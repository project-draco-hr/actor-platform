{
  boolean disableConfirm=false;
  try {
    Log.d(TAG,"Received message #" + message.getMessageId());
    if (receivedMessages.contains(message.getMessageId())) {
      Log.w(TAG,"Already received message #" + message.getMessageId() + ": ignoring");
      return;
    }
    if (receivedMessages.size() >= MAX_RECEIVED_BUFFER) {
      receivedMessages.remove(0);
      receivedMessages.add(message.getMessageId());
    }
    ProtoStruct obj;
    try {
      obj=ProtoSerializer.readMessagePayload(message.getPayload());
    }
 catch (    IOException e) {
      Log.w(TAG,"Unable to parse message: ignoring");
      e.printStackTrace();
      return;
    }
    Log.d(TAG,obj + "");
    if (obj instanceof Pong) {
    }
 else     if (obj instanceof Ping) {
    }
 else     if (obj instanceof Drop) {
    }
 else     if (obj instanceof NewSessionCreated) {
      sender.send(new SenderActor.NewSession());
    }
 else     if (obj instanceof Container) {
      Container container=(Container)obj;
      for (      ProtoMessage m : container.getMessages()) {
        self().send(m,sender());
      }
    }
 else     if (obj instanceof MTRpcResponse) {
      MTRpcResponse responseBox=(MTRpcResponse)obj;
      sender.send(new SenderActor.ForgetMessage(responseBox.getMessageId()));
    }
 else     if (obj instanceof MessageAck) {
      MessageAck ack=(MessageAck)obj;
      for (      long ackMsgId : ack.messagesIds) {
        sender.send(new SenderActor.ForgetMessage(ackMsgId));
      }
    }
 else     if (obj instanceof MTPush) {
      MTPush box=(MTPush)obj;
    }
 else     if (obj instanceof UnsentResponse) {
      UnsentResponse unsent=(UnsentResponse)obj;
      if (!receivedMessages.contains(unsent.getResponseMessageId())) {
        disableConfirm=true;
        sender.send(new SenderActor.SendMessage(MTUids.nextId(),new RequestResend(unsent.getMessageId()).toByteArray()));
      }
    }
 else     if (obj instanceof UnsentMessage) {
      UnsentMessage unsent=(UnsentMessage)obj;
      if (!receivedMessages.contains(unsent.getMessageId())) {
        disableConfirm=true;
        sender.send(new SenderActor.SendMessage(MTUids.nextId(),new RequestResend(unsent.getMessageId()).toByteArray()));
      }
    }
 else {
      Log.w(TAG,"Unsupported package " + obj.getClass().getCanonicalName());
    }
  }
  finally {
    if (!disableConfirm) {
      sender.send(new SenderActor.ConfirmMessage(message.getMessageId()));
    }
  }
}
