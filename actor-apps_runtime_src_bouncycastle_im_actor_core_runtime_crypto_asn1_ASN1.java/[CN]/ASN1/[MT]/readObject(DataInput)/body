{
  int tag=dataInput.readASN1Tag();
  int tagNumber=dataInput.readASN1TagNumber(tag);
  boolean isConstructed=(tag & im.actor.core.runtime.crypto.asn1.ASN1Primitive.TAG_CONSTRUCTED) != 0;
  int length=dataInput.readASN1Length();
  if ((tag & im.actor.core.runtime.crypto.asn1.ASN1Primitive.TAG_APPLICATION) != 0) {
    throw new IOException();
  }
  if ((tag & im.actor.core.runtime.crypto.asn1.ASN1Primitive.TAG_TAGGED) != 0) {
    throw new IOException();
  }
  DataInput objDataInput;
  if (length > 0) {
    objDataInput=new DataInput(dataInput.getData(),dataInput.getOffset(),length);
    dataInput.skip(length);
  }
 else {
    objDataInput=dataInput;
  }
switch (tagNumber) {
case im.actor.core.runtime.crypto.asn1.ASN1Primitive.TAG_SEQUENCE:
    return ASN1Sequence.readSequence(objDataInput);
case im.actor.core.runtime.crypto.asn1.ASN1Primitive.TAG_INTEGER:
  return ASN1Integer.readInteger(objDataInput);
case im.actor.core.runtime.crypto.asn1.ASN1Primitive.TAG_OBJECT_IDENTIFIER:
return ASN1ObjectIdentifier.readObjectIdentifier(objDataInput);
case im.actor.core.runtime.crypto.asn1.ASN1Primitive.TAG_NULL:
return new ASN1Null();
case im.actor.core.runtime.crypto.asn1.ASN1Primitive.TAG_BIT_STRING:
return ASN1BitString.readBitString(objDataInput);
case im.actor.core.runtime.crypto.asn1.ASN1Primitive.TAG_OCTET_STRING:
return ASN1OctetString.readOctetString(objDataInput);
default :
throw new IOException("Unsupported tag number #" + tagNumber);
}
}
