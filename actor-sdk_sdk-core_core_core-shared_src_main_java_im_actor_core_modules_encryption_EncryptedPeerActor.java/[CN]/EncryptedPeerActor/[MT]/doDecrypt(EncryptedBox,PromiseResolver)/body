{
  final int senderKeyGroup=ByteStrings.bytesToInt(ByteStrings.substring(data.getEncryptedPackage(),0,4));
  final byte[] encPackage=ByteStrings.substring(data.getEncryptedPackage(),4,data.getEncryptedPackage().length - 4);
  Log.d(TAG,"Picking session");
  SessionId pickedSession=null;
  byte[] pickedMessage=null;
  outer:   for (  SessionId s : activeSessions.keySet()) {
    if (s.getTheirKeyGroupId() != senderKeyGroup) {
      continue;
    }
    for (    EncryptedBoxKey k : data.getKeys()) {
      if (k.getKeyGroupId() == ownKeyGroupId && k.getUid() == myUid()) {
        byte[] encKey=k.getEncryptedKey();
        final long senderEphermalKey0Id=ByteStrings.bytesToLong(encKey,4);
        final long receiverEphermalKey0Id=ByteStrings.bytesToLong(encKey,12);
        if (s.getOwnKeyId0() == receiverEphermalKey0Id && s.getTheirKeyId0() == senderEphermalKey0Id && s.getOwnKeyGroupId() == ownKeyGroupId && s.getTheirKeyGroupId() == senderKeyGroup) {
          pickedSession=s;
          pickedMessage=encKey;
          continue outer;
        }
      }
    }
  }
  if (pickedSession == null) {
    Log.d(TAG,"Creation session");
    byte[] encKey=null;
    for (    EncryptedBoxKey k : data.getKeys()) {
      if (k.getKeyGroupId() == ownKeyGroupId && k.getUid() == myUid()) {
        encKey=k.getEncryptedKey();
        break;
      }
    }
    if (encKey != null) {
      final long senderEphermalKey0Id=ByteStrings.bytesToLong(encKey,4);
      final long receiverEphermalKey0Id=ByteStrings.bytesToLong(encKey,12);
      pickedSession=new SessionId(ownKeyGroupId,receiverEphermalKey0Id,senderKeyGroup,senderEphermalKey0Id);
      Log.d(TAG,"Creation of session:" + pickedSession);
      activeSessions.put(pickedSession,system().actorOf(Props.create(EncryptedSessionActor.class,new ActorCreator<EncryptedSessionActor>(){
        @Override public EncryptedSessionActor create(){
          return new EncryptedSessionActor(context(),uid,receiverEphermalKey0Id,senderEphermalKey0Id,senderKeyGroup);
        }
      }
),getPath() + "/k_" + senderKeyGroup+ "_"+ senderEphermalKey0Id+ "_"+ receiverEphermalKey0Id));
      pickedMessage=encKey;
    }
  }
  if (pickedSession == null) {
    Log.d(TAG,"Unable to create session");
    future.error(new RuntimeException("Unable to find approriate session"));
    return;
  }
  ActorRef session=activeSessions.get(pickedSession);
  final long start=im.actor.runtime.Runtime.getActorTime();
  ask(session,new EncryptedSessionActor.DecryptPackage(pickedMessage),new AskCallback(){
    @Override public void onResult(    Object obj){
      Log.d(TAG,"Decryption with key group:onResult " + (im.actor.runtime.Runtime.getActorTime() - start) + " ms");
      EncryptedSessionActor.DecryptedPackage decryptedPackage=(EncryptedSessionActor.DecryptedPackage)obj;
      byte[] encData;
      try {
        encData=ActorBox.openBox(ByteStrings.intToBytes(senderKeyGroup),encPackage,new ActorBoxKey(decryptedPackage.getData()));
        ApiMessage message=ApiMessage.fromBytes(encData);
        Log.d(TAG,"Box open:" + message);
      }
 catch (      IOException e) {
        e.printStackTrace();
        future.error(e);
        return;
      }
      future.result(null);
    }
    @Override public void onError(    Exception e){
      Log.d(TAG,"Decryption with key group:onError");
      future.error(e);
    }
  }
);
}
