{
  final int senderKeyGroup=ByteStrings.bytesToInt(ByteStrings.substring(data.getEncryptedPackage(),0,4));
  final byte[] encPackage=ByteStrings.substring(data.getEncryptedPackage(),4,data.getEncryptedPackage().length - 4);
  PromisesArray.of(data.getKeys()).filter(new Predicate<EncryptedBoxKey>(){
    @Override public boolean apply(    EncryptedBoxKey boxKey){
      return boxKey.getUid() == myUid() && boxKey.getKeyGroupId() == ownKeyGroupId && "curve25519".equals(boxKey.getKeyAlg());
    }
  }
).first().mapPromise(new Function<EncryptedBoxKey,Promise<Tuple2<SessionActor,EncryptedBoxKey>>>(){
    @Override public Promise<Tuple2<SessionActor,EncryptedBoxKey>> apply(    final EncryptedBoxKey boxKey){
      final long senderEphermalKey0Id=ByteStrings.bytesToLong(boxKey.getEncryptedKey(),4);
      final long receiverEphermalKey0Id=ByteStrings.bytesToLong(boxKey.getEncryptedKey(),12);
      if (activeSessions.containsKey(boxKey.getKeyGroupId())) {
        for (        SessionActor s : activeSessions.get(senderKeyGroup).getSessions()) {
          if (s.getOwnKeyId() == receiverEphermalKey0Id && s.getTheirKeyId() == senderEphermalKey0Id) {
            return success(new Tuple2<>(s,boxKey));
          }
        }
      }
      return context().getEncryption().getSessionManagerInt().pickSession(uid,senderKeyGroup,receiverEphermalKey0Id,senderEphermalKey0Id).map(new Function<PeerSession,Tuple2<SessionActor,EncryptedBoxKey>>(){
        @Override public Tuple2<SessionActor,EncryptedBoxKey> apply(        PeerSession src){
          return new Tuple2<>(spawnSession(src.getTheirKeyGroupId(),src.getTheirPreKeyId(),src.getOwnPreKeyId()),boxKey);
        }
      }
);
    }
  }
).mapPromise(new Function<Tuple2<SessionActor,EncryptedBoxKey>,Promise<EncryptedSessionActor.DecryptedPackage>>(){
    @Override public Promise<EncryptedSessionActor.DecryptedPackage> apply(    Tuple2<SessionActor,EncryptedBoxKey> src){
      return ask(src.getT1().getActorRef(),new EncryptedSessionActor.DecryptPackage(src.getT2().getEncryptedKey()));
    }
  }
).map(new Function<EncryptedSessionActor.DecryptedPackage,byte[]>(){
    @Override public byte[] apply(    EncryptedSessionActor.DecryptedPackage decryptedPackage){
      byte[] encData;
      try {
        encData=ActorBox.openBox(ByteStrings.intToBytes(senderKeyGroup),encPackage,new ActorBoxKey(decryptedPackage.getData()));
        ApiMessage message=ApiMessage.fromBytes(encData);
        Log.d(TAG,"Box open:" + message);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      return null;
    }
  }
).failure(new Consumer<Exception>(){
    @Override public void apply(    Exception e){
      e.printStackTrace();
      resolver.error(e);
    }
  }
).done(self());
}
