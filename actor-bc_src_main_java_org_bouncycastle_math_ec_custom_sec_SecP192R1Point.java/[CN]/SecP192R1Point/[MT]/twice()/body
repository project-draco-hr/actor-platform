{
  if (this.isInfinity()) {
    return this;
  }
  ECCurve curve=this.getCurve();
  SecP192R1FieldElement Y1=(SecP192R1FieldElement)this.y;
  if (Y1.isZero()) {
    return curve.getInfinity();
  }
  SecP192R1FieldElement X1=(SecP192R1FieldElement)this.x, Z1=(SecP192R1FieldElement)this.zs[0];
  int c;
  int[] t1=Nat192.create();
  int[] t2=Nat192.create();
  int[] Y1Squared=Nat192.create();
  SecP192R1Field.square(Y1.x,Y1Squared);
  int[] T=Nat192.create();
  SecP192R1Field.square(Y1Squared,T);
  boolean Z1IsOne=Z1.isOne();
  int[] Z1Squared=Z1.x;
  if (!Z1IsOne) {
    Z1Squared=t2;
    SecP192R1Field.square(Z1.x,Z1Squared);
  }
  SecP192R1Field.subtract(X1.x,Z1Squared,t1);
  int[] M=t2;
  SecP192R1Field.add(X1.x,Z1Squared,M);
  SecP192R1Field.multiply(M,t1,M);
  c=Nat192.addBothTo(M,M,M);
  SecP192R1Field.reduce32(c,M);
  int[] S=Y1Squared;
  SecP192R1Field.multiply(Y1Squared,X1.x,S);
  c=Nat.shiftUpBits(6,S,2,0);
  SecP192R1Field.reduce32(c,S);
  c=Nat.shiftUpBits(6,T,3,0,t1);
  SecP192R1Field.reduce32(c,t1);
  SecP192R1FieldElement X3=new SecP192R1FieldElement(T);
  SecP192R1Field.square(M,X3.x);
  SecP192R1Field.subtract(X3.x,S,X3.x);
  SecP192R1Field.subtract(X3.x,S,X3.x);
  SecP192R1FieldElement Y3=new SecP192R1FieldElement(S);
  SecP192R1Field.subtract(S,X3.x,Y3.x);
  SecP192R1Field.multiply(Y3.x,M,Y3.x);
  SecP192R1Field.subtract(Y3.x,t1,Y3.x);
  SecP192R1FieldElement Z3=new SecP192R1FieldElement(M);
  SecP192R1Field.twice(Y1.x,Z3.x);
  if (!Z1IsOne) {
    SecP192R1Field.multiply(Z3.x,Z1.x,Z3.x);
  }
  return new SecP192R1Point(curve,X3,Y3,new ECFieldElement[]{Z3},this.withCompression);
}
