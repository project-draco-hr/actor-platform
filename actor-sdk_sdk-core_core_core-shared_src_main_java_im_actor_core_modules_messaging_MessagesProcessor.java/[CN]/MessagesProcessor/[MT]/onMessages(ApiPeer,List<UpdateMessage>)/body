{
  long outMessageSortDate=0;
  long intMessageSortDate=0;
  Peer peer=convert(_peer);
  ArrayList<Message> nMessages=new ArrayList<>();
  for (  UpdateMessage u : messages) {
    AbsContent msgContent;
    try {
      msgContent=AbsContent.fromMessage(u.getMessage());
    }
 catch (    IOException e) {
      e.printStackTrace();
      continue;
    }
    boolean isOut=myUid() == u.getSenderUid();
    nMessages.add(new Message(u.getRid(),u.getDate(),u.getDate(),u.getSenderUid(),isOut ? MessageState.SENT : MessageState.UNKNOWN,msgContent,new ArrayList<Reaction>()));
    if (!isOut) {
      intMessageSortDate=Math.max(intMessageSortDate,u.getDate());
    }
 else {
      outMessageSortDate=Math.max(outMessageSortDate,u.getDate());
    }
  }
  conversationActor(peer).send(new ConversationActor.Messages(nMessages));
  if (intMessageSortDate > 0) {
    plainReceiveActor().send(new CursorReceiverActor.MarkReceived(peer,intMessageSortDate));
  }
  for (  Message m : nMessages) {
    if (m.getSenderId() != myUid()) {
      ownReadActor().send(new OwnReadActor.InMessage(peer,m));
    }
  }
}
