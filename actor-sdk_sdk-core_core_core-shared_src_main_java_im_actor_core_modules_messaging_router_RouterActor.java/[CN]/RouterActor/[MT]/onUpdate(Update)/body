{
  if (update instanceof UpdateMessage) {
    UpdateMessage msg=(UpdateMessage)update;
    Peer peer=convert(msg.getPeer());
    AbsContent msgContent=AbsContent.fromMessage(msg.getMessage());
    Message message=new Message(msg.getRid(),msg.getDate(),msg.getDate(),msg.getSenderUid(),myUid() == msg.getSenderUid() ? MessageState.SENT : MessageState.UNKNOWN,msgContent);
    ArrayList<Message> messages=new ArrayList<>();
    messages.add(message);
    return onNewMessages(peer,messages);
  }
 else   if (update instanceof UpdateMessageSent) {
    UpdateMessageSent messageSent=(UpdateMessageSent)update;
    Peer peer=convert(messageSent.getPeer());
    if (isValidPeer(peer)) {
      context().getMessagesModule().getSendMessageActor().send(new SenderActor.MessageSent(peer,messageSent.getRid()));
      onOutgoingSent(peer,messageSent.getRid(),messageSent.getDate());
    }
    return Promise.success(null);
  }
 else   if (update instanceof UpdateMessageRead) {
    UpdateMessageRead read=(UpdateMessageRead)update;
    Peer peer=convert(read.getPeer());
    if (isValidPeer(peer)) {
      onMessageRead(peer,read.getReadDate());
    }
    return Promise.success(null);
  }
 else   if (update instanceof UpdateMessageReadByMe) {
    UpdateMessageReadByMe readByMe=(UpdateMessageReadByMe)update;
    Peer peer=convert(readByMe.getPeer());
    if (isValidPeer(peer)) {
      int counter=0;
      if (readByMe.getUnreadCounter() != null) {
        counter=readByMe.getUnreadCounter();
      }
      onMessageReadByMe(peer,readByMe.getStartDate(),counter);
    }
    return Promise.success(null);
  }
 else   if (update instanceof UpdateMessageReceived) {
    UpdateMessageReceived received=(UpdateMessageReceived)update;
    Peer peer=convert(received.getPeer());
    if (isValidPeer(peer)) {
      onMessageReceived(peer,received.getStartDate());
    }
    return Promise.success(null);
  }
 else   if (update instanceof UpdateChatDelete) {
    UpdateChatDelete delete=(UpdateChatDelete)update;
    Peer peer=convert(delete.getPeer());
    if (isValidPeer(peer)) {
      onChatDelete(peer);
    }
    return Promise.success(null);
  }
 else   if (update instanceof UpdateChatClear) {
    UpdateChatClear clear=(UpdateChatClear)update;
    Peer peer=convert(clear.getPeer());
    if (isValidPeer(peer)) {
      onChatClear(peer);
    }
    return Promise.success(null);
  }
 else   if (update instanceof UpdateChatGroupsChanged) {
    UpdateChatGroupsChanged chatGroupsChanged=(UpdateChatGroupsChanged)update;
    onActiveDialogsChanged(chatGroupsChanged.getDialogs(),true,true);
    return Promise.success(null);
  }
 else   if (update instanceof UpdateMessageDelete) {
    UpdateMessageDelete delete=(UpdateMessageDelete)update;
    Peer peer=convert(delete.getPeer());
    if (isValidPeer(peer)) {
      onMessageDeleted(peer,delete.getRids());
    }
    return Promise.success(null);
  }
 else   if (update instanceof UpdateMessageContentChanged) {
    UpdateMessageContentChanged contentChanged=(UpdateMessageContentChanged)update;
    Peer peer=convert(contentChanged.getPeer());
    if (isValidPeer(peer)) {
      AbsContent content=AbsContent.fromMessage(contentChanged.getMessage());
      onContentUpdate(peer,contentChanged.getRid(),content);
    }
    return Promise.success(null);
  }
 else   if (update instanceof UpdateReactionsUpdate) {
    UpdateReactionsUpdate reactionsUpdate=(UpdateReactionsUpdate)update;
    Peer peer=convert(reactionsUpdate.getPeer());
    if (isValidPeer(peer)) {
      ArrayList<Reaction> reactions=new ArrayList<>();
      for (      ApiMessageReaction r : reactionsUpdate.getReactions()) {
        reactions.add(new Reaction(r.getCode(),r.getUsers()));
      }
      onReactionsUpdate(peer,reactionsUpdate.getRid(),reactions);
    }
    return Promise.success(null);
  }
  return Promise.success(null);
}
