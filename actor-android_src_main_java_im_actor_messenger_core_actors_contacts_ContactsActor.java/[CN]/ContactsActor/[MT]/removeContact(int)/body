{
  UserModel userModel=users().get(uid);
  final TypedFuture<Boolean> res=new TypedFuture<Boolean>();
  ask(requests().removeContact(uid,userModel.getAccessHash()),new FutureCallback<ResponseSeq>(){
    @Override public void onResult(    ResponseSeq result){
      res.doComplete(true);
      List<Integer> uids=new ArrayList<Integer>();
      uids.add(uid);
      system().actorOf(SequenceActor.sequence()).send(new SeqUpdate(result.getSeq(),result.getState(),UpdateContactsRemoved.HEADER,new UpdateContactsRemoved(uids).toByteArray()));
    }
    @Override public void onError(    Throwable throwable){
      res.doError(throwable);
      onContactsRemoved(new int[]{uid});
    }
  }
);
  return res;
}
