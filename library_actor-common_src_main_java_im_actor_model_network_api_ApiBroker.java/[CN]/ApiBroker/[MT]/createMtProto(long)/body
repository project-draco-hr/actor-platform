{
  Log.d(TAG,"Creating proto");
  keyStorage.saveAuthKey(key);
  proto=new MTProto(key,new Random().nextLong(),endpoints,new MTProtoCallback(){
    @Override public void onRpcResponse(    long mid,    byte[] content){
      self().send(new ProtoResponse(mid,content));
    }
    @Override public void onUpdate(    byte[] content){
      self().send(new ProtoUpdate(content));
    }
    @Override public void onAuthKeyInvalidated(    long authKey){
      callback.onAuthIdInvalidated(authKey);
    }
    @Override public void onSessionCreated(){
      callback.onNewSessionCreated();
    }
  }
,networkProvider,isEnableLog);
  for (  RequestHolder holder : requests.values()) {
    holder.protoId=proto.sendRpcMessage(holder.message);
    idMap.put(holder.protoId,holder.publicId);
  }
}
