{
  Log.d(TAG,"Main Keys are ready");
  List<KeyValueRecord> records=ephemeralStorage.loadAllItems();
  for (int i=0; i < 100 - records.size(); i++) {
    long randomId=RandomUtils.nextRid();
    EncryptionKey encryptionKey=new EncryptionKey(randomId,Curve25519.keyGen(Crypto.randomBytes(64)));
    EphemeralEncryptionKey ephemeralEncryptionKey=new EphemeralEncryptionKey(encryptionKey,false);
    ephemeralStorage.addOrUpdateItem(randomId,ephemeralEncryptionKey.toByteArray());
  }
  records=ephemeralStorage.loadAllItems();
  final ArrayList<EphemeralEncryptionKey> pendingEphermalKeys=new ArrayList<EphemeralEncryptionKey>();
  for (  KeyValueRecord record : records) {
    try {
      EphemeralEncryptionKey encryptionKey=new EphemeralEncryptionKey(record.getData());
      if (!encryptionKey.isUploaded()) {
        pendingEphermalKeys.add(encryptionKey);
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  if (pendingEphermalKeys.size() > 0) {
    ArrayList<ApiEncryptionKey> uploadingKeys=new ArrayList<ApiEncryptionKey>();
    ArrayList<ApiEncryptionKeySignature> uploadingSignatures=new ArrayList<ApiEncryptionKeySignature>();
    for (    EphemeralEncryptionKey k : pendingEphermalKeys) {
      ApiEncryptionKey apiKey=new ApiEncryptionKey(k.getEncryptionKey().getKeyId(),k.getEncryptionKey().getKeyAlg(),k.getEncryptionKey().getPublicKey(),null);
      uploadingKeys.add(apiKey);
      byte[] signature=Curve25519.calculateSignature(Crypto.randomBytes(64),privateKeyStorage.getIdentityKey().getPrivateKey(),apiKey.toByteArray());
      uploadingSignatures.add(new ApiEncryptionKeySignature(k.getEncryptionKey().getKeyId(),"Ed25519",signature));
    }
    request(new RequestUploadEphermalKey(privateKeyStorage.getKeyGroupId(),uploadingKeys,uploadingSignatures),new RpcCallback<ResponseVoid>(){
      @Override public void onResult(      ResponseVoid response){
        List<KeyValueRecord> updated=new ArrayList<KeyValueRecord>();
        for (        EphemeralEncryptionKey k : pendingEphermalKeys) {
          updated.add(new KeyValueRecord(k.getEncryptionKey().getKeyId(),k.toByteArray()));
        }
        ephemeralStorage.addOrUpdateItems(updated);
        onAllKeysReady();
      }
      @Override public void onError(      RpcException e){
        Log.w(TAG,"Ephemeral keys upload error");
        Log.e(TAG,e);
      }
    }
);
  }
 else {
    onAllKeysReady();
  }
}
