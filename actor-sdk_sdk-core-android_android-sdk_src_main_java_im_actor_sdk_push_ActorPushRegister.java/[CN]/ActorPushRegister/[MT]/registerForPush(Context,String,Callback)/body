{
  final SharedPreferences sharedPreferences=context.getSharedPreferences("actor_push_register",Context.MODE_PRIVATE);
  String registrationEndpoint=sharedPreferences.getString("registration_endpoint",null);
  String registrationData=sharedPreferences.getString("registration_data",null);
  if (registrationEndpoint != null && registrationData != null) {
    try {
      JSONObject data=new JSONObject(registrationData);
      startService(data,context);
      callback.onRegistered(registrationEndpoint);
      return;
    }
 catch (    JSONException e) {
      e.printStackTrace();
      sharedPreferences.edit().clear().commit();
    }
  }
  final Request request=new Request.Builder().url(endpoint).method("POST",RequestBody.create(MediaType.parse("application/json"),"{}")).build();
  client.newCall(request).enqueue(new com.squareup.okhttp.Callback(){
    @Override public void onFailure(    Request request,    IOException e){
      Log.d("ACTOR_PUSH","ACTOR_PUSH not registered: " + e.getMessage());
    }
    @Override public void onResponse(    Response response) throws IOException {
      try {
        String res=response.body().string();
        JSONObject js=new JSONObject(res).getJSONObject("data");
        String endpoint=js.getString("endpoint");
        sharedPreferences.edit().putString("registration_endpoint",endpoint).putString("registration_data",js.toString()).commit();
        startService(js,context);
        Log.d("ActorPushRegister","Endpoint: " + endpoint);
        callback.onRegistered(endpoint);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
    }
  }
);
}
