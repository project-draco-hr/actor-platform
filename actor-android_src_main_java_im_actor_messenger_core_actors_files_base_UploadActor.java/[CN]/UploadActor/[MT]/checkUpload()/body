{
  Logger.d(TAG,"checkUpload " + nextBlock + "/"+ blocksCount+ " - "+ uploadCount);
  if (nextBlock == blocksCount && uploadCount == 0) {
    Logger.d(TAG,"Completing...");
    long crc=crc32.getValue();
    Logger.d(TAG,"Src #" + crc);
    ask(requests().completeUpload(uploadConfig,blocksCount,crc),new FutureCallback<ResponseCompleteUpload>(){
      @Override public void onResult(      ResponseCompleteUpload result){
        Logger.d(TAG,"Completed in " + (System.currentTimeMillis() - start) + " ms");
        FileLocation location;
        if (useEncryption) {
          location=new FileLocation(result.getLocation().getFileId(),result.getLocation().getAccessHash(),uploadSize,FileLocation.Encryption.AES_THEN_MAC,sourceSize,encryptionKey);
        }
 else {
          location=new FileLocation(result.getLocation().getFileId(),result.getLocation().getAccessHash(),uploadSize);
        }
        complete(location);
      }
      @Override public void onError(      Throwable throwable){
        Logger.d(TAG,"Error");
        error(throwable);
      }
    }
);
    return;
  }
  if (nextBlock < blocksCount && uploadCount < BLOCKS_COUNT) {
    final int blockIndex=nextBlock++;
    byte[] data;
    int size=blockSize;
    try {
      randomAccessFile.seek(blockIndex * blockSize);
      if ((blockIndex + 1) * blockSize > randomAccessFile.length()) {
        size=(int)(randomAccessFile.length() - blockIndex * blockSize);
      }
      data=StreamingUtils.readBytes(size,randomAccessFile);
    }
 catch (    IOException e) {
      error(e);
      return;
    }
    crc32.update(data,0,size);
    Logger.d(TAG,"Starting block upload #" + blockIndex);
    uploadCount++;
    performUpload(blockIndex,blockIndex * blockSize,data);
    checkUpload();
  }
}
