{
  if (actionMode == null) {
    messagesAdapter.clearSelection();
    messagesAdapter.setSelected(message,true);
    actionMode=((AppCompatActivity)getActivity()).startSupportActionMode(new ActionMode.Callback(){
      @Override public boolean onCreateActionMode(      ActionMode actionMode,      Menu menu){
        getActivity().getMenuInflater().inflate(R.menu.messages_context,menu);
        return true;
      }
      @Override public boolean onPrepareActionMode(      ActionMode actionMode,      Menu menu){
        Message[] selected=messagesAdapter.getSelected();
        if (selected.length > 0) {
          actionMode.setTitle("" + selected.length);
        }
        boolean isAllText=true;
        for (        Message k : selected) {
          if (!(k.getContent() instanceof TextContent)) {
            isAllText=false;
            break;
          }
        }
        menu.findItem(R.id.copy).setVisible(isAllText);
        menu.findItem(R.id.quote).setVisible(isAllText);
        menu.findItem(R.id.forward).setVisible(selected.length == 1 || isAllText);
        return false;
      }
      @Override public boolean onActionItemClicked(      final ActionMode actionMode,      MenuItem menuItem){
        if (menuItem.getItemId() == R.id.delete) {
          Message[] selected=messagesAdapter.getSelected();
          final long[] rids=new long[selected.length];
          for (int i=0; i < rids.length; i++) {
            rids[i]=selected[i].getRid();
          }
          new AlertDialog.Builder(getActivity()).setMessage(getString(R.string.alert_delete_messages_text).replace("{0}","" + rids.length)).setPositiveButton(R.string.alert_delete_messages_yes,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int which){
              messenger().deleteMessages(peer,rids);
              actionMode.finish();
            }
          }
).setNegativeButton(R.string.dialog_cancel,null).show().setCanceledOnTouchOutside(true);
          return true;
        }
 else         if (menuItem.getItemId() == R.id.copy) {
          String text=messenger().getFormatter().formatMessagesExport(messagesAdapter.getSelected());
          android.content.ClipboardManager clipboard=(android.content.ClipboardManager)getActivity().getSystemService(Context.CLIPBOARD_SERVICE);
          android.content.ClipData clip=android.content.ClipData.newPlainText("Messages",text);
          clipboard.setPrimaryClip(clip);
          Toast.makeText(getActivity(),R.string.toast_messages_copied,Toast.LENGTH_SHORT).show();
          actionMode.finish();
          return true;
        }
 else         if (menuItem.getItemId() == R.id.quote) {
          String quote="";
          String rawQuote="";
          int i=0;
          for (          Message m : messagesAdapter.getSelected()) {
            if (m.getContent() instanceof TextContent) {
              UserVM user=users().get(m.getSenderId());
              String nick=user.getNick().get();
              String name=(nick != null && !nick.isEmpty()) ? "@".concat(nick) : user.getName().get();
              String text=((TextContent)m.getContent()).getText();
              quote=quote.concat(name).concat(": ").concat(text);
              rawQuote=rawQuote.concat(name).concat(": ").concat(text).concat("\n");
              if (i++ != messagesAdapter.getSelectedCount() - 1) {
                quote+=";\n";
              }
 else {
                quote+="\n";
              }
            }
          }
          ((ChatActivity)getActivity()).addQuote(quote,rawQuote);
          actionMode.finish();
          return true;
        }
 else         if (menuItem.getItemId() == R.id.forward) {
          Intent i=new Intent(getActivity(),ActorMainActivity.class);
          if (messagesAdapter.getSelected().length == 1) {
            Message m=messagesAdapter.getSelected()[0];
            if (m.getContent() instanceof TextContent) {
              UserVM user=users().get(m.getSenderId());
              String nick=user.getNick().get();
              String name=(nick != null && !nick.isEmpty()) ? "@".concat(nick) : user.getName().get();
              String text=((TextContent)m.getContent()).getText();
              String forward=name.concat(": ").concat(text).concat("\n");
              i.putExtra("forward_text",forward);
              i.putExtra("forward_text_raw",forward);
            }
 else             if (m.getContent() instanceof DocumentContent) {
              boolean isDoc=!(m.getContent() instanceof PhotoContent || m.getContent() instanceof VideoContent);
              DocumentContent fileMessage=(DocumentContent)m.getContent();
              if (fileMessage.getSource() instanceof FileRemoteSource) {
                i.putExtra("forward_doc_descriptor",messenger().findDownloadedDescriptor(((FileRemoteSource)fileMessage.getSource()).getFileReference().getFileId()));
              }
 else               if (fileMessage.getSource() instanceof FileLocalSource) {
                String descriptor=((FileLocalSource)fileMessage.getSource()).getFileDescriptor();
                i.putExtra("forward_doc_descriptor",descriptor);
              }
              i.putExtra("forward_doc_is_doc",isDoc);
            }
          }
 else {
            String quote="";
            String rawQuote="";
            int j=0;
            for (            Message m : messagesAdapter.getSelected()) {
              if (m.getContent() instanceof TextContent) {
                UserVM user=users().get(m.getSenderId());
                String nick=user.getNick().get();
                String name=(nick != null && !nick.isEmpty()) ? "@".concat(nick) : user.getName().get();
                String text=((TextContent)m.getContent()).getText();
                quote=quote.concat(name).concat(": ").concat(text);
                rawQuote=rawQuote.concat(name).concat(": ").concat(text).concat("\n");
                if (j++ != messagesAdapter.getSelectedCount() - 1) {
                  quote+=";\n";
                }
 else {
                  quote+="\n";
                }
              }
            }
            i.putExtra("forward_text",quote);
            i.putExtra("forward_text_raw",rawQuote);
          }
          actionMode.finish();
          startActivity(i);
          return true;
        }
        return false;
      }
      @Override public void onDestroyActionMode(      ActionMode actionMode){
        MessagesFragment.this.actionMode=null;
        messagesAdapter.clearSelection();
      }
    }
);
  }
 else {
    if (messagesAdapter.isSelected(message)) {
      messagesAdapter.setSelected(message,false);
      if (messagesAdapter.getSelectedCount() == 0) {
        actionMode.finish();
        actionMode=null;
      }
 else {
        actionMode.invalidate();
      }
    }
 else {
      messagesAdapter.setSelected(message,true);
      actionMode.invalidate();
    }
  }
  return true;
}
