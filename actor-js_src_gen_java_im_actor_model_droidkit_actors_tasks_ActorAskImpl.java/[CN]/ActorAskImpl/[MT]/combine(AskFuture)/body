{
  final AskFuture resultFuture=new AskFuture(this,0);
  final CombineContainer container=new CombineContainer(futures.length);
  for (int i=0; i < futures.length; i++) {
    final int index=i;
    container.futures[index]=futures[index];
    container.callbacks[index]=new AskCallback(){
      @Override public void onResult(      Object result){
        container.completed[index]=true;
        container.results[index]=result;
        boolean isCompleted=true;
        for (        boolean c : container.completed) {
          if (!c) {
            isCompleted=false;
            break;
          }
        }
        if (isCompleted && !container.isCompleted) {
          container.isCompleted=true;
          for (int i=0; i < container.futures.length; i++) {
            container.futures[i].removeListener(container.callbacks[i]);
          }
          resultFuture.onResult(container.results);
        }
      }
      @Override public void onError(      Throwable throwable){
        if (!container.isCompleted) {
          container.isCompleted=true;
          for (int i=0; i < container.futures.length; i++) {
            container.futures[i].removeListener(container.callbacks[i]);
            container.futures[i].cancel();
          }
          resultFuture.onError(throwable);
        }
      }
    }
;
    container.futures[index].addListener(container.callbacks[index]);
  }
  return resultFuture;
}
