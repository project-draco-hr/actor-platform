{
switch (viewType) {
case 0:
    return ActorSDK.sharedActor().getDelegatedViewHolder(TextHolder.class,new ActorSDK.OnDelegateViewHolder<TextHolder>(){
      @Override public TextHolder onNotDelegated(){
        return new TextHolder(MessagesAdapter.this,inflate(R.layout.adapter_dialog_text,viewGroup));
      }
    }
,MessagesAdapter.this,inflate(R.layout.adapter_dialog_text,viewGroup));
case 1:
  return ActorSDK.sharedActor().getDelegatedViewHolder(ServiceHolder.class,new ActorSDK.OnDelegateViewHolder<ServiceHolder>(){
    @Override public ServiceHolder onNotDelegated(){
      return new ServiceHolder(MessagesAdapter.this,inflate(R.layout.adapter_dialog_service,viewGroup));
    }
  }
,MessagesAdapter.this,inflate(R.layout.adapter_dialog_service,viewGroup));
case 2:
return ActorSDK.sharedActor().getDelegatedViewHolder(PhotoHolder.class,new ActorSDK.OnDelegateViewHolder<PhotoHolder>(){
  @Override public PhotoHolder onNotDelegated(){
    return new PhotoHolder(MessagesAdapter.this,inflate(R.layout.adapter_dialog_photo,viewGroup));
  }
}
,MessagesAdapter.this,inflate(R.layout.adapter_dialog_photo,viewGroup));
case 3:
return ActorSDK.sharedActor().getDelegatedViewHolder(DocHolder.class,new ActorSDK.OnDelegateViewHolder<DocHolder>(){
@Override public DocHolder onNotDelegated(){
  return new DocHolder(MessagesAdapter.this,inflate(R.layout.adapter_dialog_doc,viewGroup));
}
}
,MessagesAdapter.this,inflate(R.layout.adapter_dialog_doc,viewGroup));
case 4:
return ActorSDK.sharedActor().getDelegatedViewHolder(AudioHolder.class,new ActorSDK.OnDelegateViewHolder<AudioHolder>(){
@Override public AudioHolder onNotDelegated(){
return new AudioHolder(MessagesAdapter.this,inflate(R.layout.adapter_dialog_audio,viewGroup));
}
}
,MessagesAdapter.this,inflate(R.layout.adapter_dialog_audio,viewGroup));
case 5:
return ActorSDK.sharedActor().getDelegatedViewHolder(ContactHolder.class,new ActorSDK.OnDelegateViewHolder<ContactHolder>(){
@Override public ContactHolder onNotDelegated(){
return new ContactHolder(MessagesAdapter.this,inflate(R.layout.adapter_dialog_contact,viewGroup));
}
}
,MessagesAdapter.this,inflate(R.layout.adapter_dialog_contact,viewGroup));
case 6:
return ActorSDK.sharedActor().getDelegatedViewHolder(LocationHolder.class,new ActorSDK.OnDelegateViewHolder<LocationHolder>(){
@Override public LocationHolder onNotDelegated(){
return new LocationHolder(MessagesAdapter.this,inflate(R.layout.adapter_dialog_locaton,viewGroup));
}
}
,MessagesAdapter.this,inflate(R.layout.adapter_dialog_locaton,viewGroup));
case 7:
return ActorSDK.sharedActor().getDelegatedViewHolder(StickerHolder.class,new ActorSDK.OnDelegateViewHolder<StickerHolder>(){
@Override public StickerHolder onNotDelegated(){
return new StickerHolder(MessagesAdapter.this,inflate(R.layout.adapter_dialog_sticker,viewGroup));
}
}
,MessagesAdapter.this,inflate(R.layout.adapter_dialog_sticker,viewGroup));
default :
if (viewType - 8 >= 0 && viewType - 8 < AbsContent.getConverters().length) {
return ActorSDK.sharedActor().getDelegatedMessageViewHolder(AbsContent.getConverters()[viewType - 8].destinationType(),new ActorSDK.OnDelegateViewHolder<MessageHolder>(){
@Override public MessageHolder onNotDelegated(){
return new UnsupportedHolder(MessagesAdapter.this,inflate(R.layout.adapter_dialog_text,viewGroup));
}
}
,MessagesAdapter.this,viewGroup);
}
 else {
return new UnsupportedHolder(MessagesAdapter.this,inflate(R.layout.adapter_dialog_text,viewGroup));
}
}
}
