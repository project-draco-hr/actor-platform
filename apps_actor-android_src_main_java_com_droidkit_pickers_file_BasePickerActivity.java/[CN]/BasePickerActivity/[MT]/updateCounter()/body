{
  final TextView counterView=(TextView)findViewById(R.id.counter);
  View selectView=findViewById(R.id.select);
  View cancelView=findViewById(R.id.cancel);
  View controllerHolder=findViewById(R.id.controllers);
  if (!selectedItems.isEmpty()) {
    counterView.setText("" + selectedItems.size());
  }
  final View counterHolder=findViewById(R.id.counter_holder);
  findViewById(R.id.select_text).setEnabled(!selectedItems.isEmpty());
  selectView.setEnabled(!selectedItems.isEmpty());
  if ((selectedItems.isEmpty() && counterHolder.getVisibility() != View.GONE) || (!selectedItems.isEmpty() && counterHolder.getVisibility() == View.GONE)) {
    final int i=counterHolder.getLayoutParams().width;
    ValueAnimator valueAnimator;
    if (!selectedItems.isEmpty()) {
      valueAnimator=ValueAnimator.ofInt(0,i);
    }
 else {
      valueAnimator=ValueAnimator.ofInt(i,0);
    }
    valueAnimator.setDuration(100);
    valueAnimator.setInterpolator(new DecelerateInterpolator());
    valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
      @Override public void onAnimationUpdate(      ValueAnimator valueAnimator){
        Integer width=(Integer)valueAnimator.getAnimatedValue();
        ViewGroup.LayoutParams params=counterHolder.getLayoutParams();
        if (width == 0) {
          params.width=i;
          counterHolder.setVisibility(View.GONE);
        }
 else {
          counterHolder.setVisibility(View.VISIBLE);
          params.width=width;
        }
        counterHolder.setLayoutParams(params);
        counterHolder.invalidate();
      }
    }
);
    valueAnimator.start();
  }
}
