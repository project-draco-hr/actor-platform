{
  if (!isValidated) {
    return;
  }
  isValidated=false;
  if (seq < 0) {
    Log.d(TAG,"Loading fresh state...");
    request(new RequestGetState(new ArrayList<ApiUpdateOptimization>()),new RpcCallback<ResponseSeq>(){
      @Override public void onResult(      ResponseSeq response){
        if (isValidated) {
          return;
        }
        seq=response.getSeq();
        state=response.getState();
        isValidated=true;
        preferences().putInt(KEY_SEQ,seq);
        preferences().putBytes(KEY_STATE,state);
        Log.d(TAG,"State loaded {seq=" + seq + "}");
        checkRunnables();
        checkFuture();
        isTimerStarted=false;
        self().sendOnce(new ForceInvalidate(),24 * 60 * 60* 1000L);
      }
      @Override public void onError(      RpcException e){
        if (isValidated) {
          return;
        }
        isValidated=true;
        invalidate();
      }
    }
);
  }
 else {
    Log.d(TAG,"Loading difference...");
    onUpdateStarted();
    final long loadStart=im.actor.runtime.Runtime.getCurrentTime();
    request(new RequestGetDifference(seq,state,new ArrayList<ApiUpdateOptimization>()),new RpcCallback<ResponseGetDifference>(){
      @Override public void onResult(      ResponseGetDifference response){
        if (isValidated) {
          return;
        }
        Log.d(TAG,"Difference loaded {seq=" + response.getSeq() + "} in "+ (im.actor.runtime.Runtime.getCurrentTime() - loadStart)+ " ms");
        long parseStart=im.actor.runtime.Runtime.getCurrentTime();
        ArrayList<Update> updates=new ArrayList<Update>();
        for (        ApiUpdateContainer u : response.getUpdates()) {
          try {
            updates.add(parser.read(u.getUpdateHeader(),u.getUpdate()));
          }
 catch (          IOException e) {
            e.printStackTrace();
            Log.d(TAG,"Broken update #" + u.getUpdateHeader() + ": ignoring");
          }
        }
        Log.d(TAG,"Difference parsed  in " + (im.actor.runtime.Runtime.getCurrentTime() - parseStart) + " ms");
        if (updates.size() > 0) {
          String command="Difference updates:";
          for (          Update u : updates) {
            command+="\n| " + u;
          }
          Log.d(TAG,command);
        }
        long applyStart=im.actor.runtime.Runtime.getCurrentTime();
        processor.applyDifferenceUpdate(response.getUsers(),response.getGroups(),updates);
        Log.d(TAG,"Difference applied in " + (im.actor.runtime.Runtime.getCurrentTime() - applyStart) + " ms");
        seq=response.getSeq();
        state=response.getState();
        isValidated=true;
        preferences().putInt(KEY_SEQ,seq);
        preferences().putBytes(KEY_STATE,state);
        checkRunnables();
        checkFuture();
        isTimerStarted=false;
        self().sendOnce(new ForceInvalidate(),24 * 60 * 60* 1000L);
        if (response.needMore()) {
          invalidate();
        }
 else {
          onUpdateEnded();
        }
      }
      @Override public void onError(      RpcException e){
        if (isValidated) {
          return;
        }
        isValidated=true;
        invalidate();
      }
    }
);
  }
}
