{
  long c=0;
  c+=(u[uOff + 0] & M) + (v[vOff + 0] & M);
  u[uOff + 0]=(int)c;
  v[vOff + 0]=(int)c;
  c>>>=32;
  c+=(u[uOff + 1] & M) + (v[vOff + 1] & M);
  u[uOff + 1]=(int)c;
  v[vOff + 1]=(int)c;
  c>>>=32;
  c+=(u[uOff + 2] & M) + (v[vOff + 2] & M);
  u[uOff + 2]=(int)c;
  v[vOff + 2]=(int)c;
  c>>>=32;
  c+=(u[uOff + 3] & M) + (v[vOff + 3] & M);
  u[uOff + 3]=(int)c;
  v[vOff + 3]=(int)c;
  c>>>=32;
  c+=(u[uOff + 4] & M) + (v[vOff + 4] & M);
  u[uOff + 4]=(int)c;
  v[vOff + 4]=(int)c;
  c>>>=32;
  c+=(u[uOff + 5] & M) + (v[vOff + 5] & M);
  u[uOff + 5]=(int)c;
  v[vOff + 5]=(int)c;
  c>>>=32;
  c+=(u[uOff + 6] & M) + (v[vOff + 6] & M);
  u[uOff + 6]=(int)c;
  v[vOff + 6]=(int)c;
  c>>>=32;
  return (int)c;
}
