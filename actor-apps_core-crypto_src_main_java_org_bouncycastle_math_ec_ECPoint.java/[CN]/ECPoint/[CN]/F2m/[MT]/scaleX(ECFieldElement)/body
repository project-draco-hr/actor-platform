{
  if (this.isInfinity()) {
    return this;
  }
  int coord=this.getCurveCoordinateSystem();
switch (coord) {
case ECCurve.COORD_LAMBDA_AFFINE:
{
      ECFieldElement X=this.getRawXCoord(), L=this.getRawYCoord();
      ECFieldElement X2=X.multiply(scale);
      ECFieldElement L2=L.add(X).divide(scale).add(X2);
      return this.getCurve().createRawPoint(X,L2,this.getRawZCoords(),this.withCompression);
    }
case ECCurve.COORD_LAMBDA_PROJECTIVE:
{
    ECFieldElement X=this.getRawXCoord(), L=this.getRawYCoord(), Z=this.getRawZCoords()[0];
    ECFieldElement X2=X.multiply(scale.square());
    ECFieldElement L2=L.add(X).add(X2);
    ECFieldElement Z2=Z.multiply(scale);
    return this.getCurve().createRawPoint(X2,L2,new ECFieldElement[]{Z2},this.withCompression);
  }
default :
{
  return super.scaleX(scale);
}
}
}
