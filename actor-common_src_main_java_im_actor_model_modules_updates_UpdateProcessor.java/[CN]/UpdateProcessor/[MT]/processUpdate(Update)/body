{
  Log.d(TAG,update + "");
  if (update instanceof UpdateUserContactAdded) {
  }
 else   if (update instanceof UpdateUserContactRemoved) {
  }
 else   if (update instanceof UpdateContactMoved) {
  }
 else   if (update instanceof UpdateContactTitleChanged) {
  }
 else   if (update instanceof UpdateUserContactsChanged) {
  }
 else   if (update instanceof UpdateUserNameChanged) {
    UpdateUserNameChanged userNameChanged=(UpdateUserNameChanged)update;
    usersProcessor.onUserNameChanged(userNameChanged.getUid(),userNameChanged.getName());
  }
 else   if (update instanceof UpdateUserLocalNameChanged) {
    UpdateUserLocalNameChanged localNameChanged=(UpdateUserLocalNameChanged)update;
    usersProcessor.onUserLocalNameChanged(localNameChanged.getUid(),localNameChanged.getLocalName());
  }
 else   if (update instanceof UpdateUserAvatarChanged) {
    UpdateUserAvatarChanged avatarChanged=(UpdateUserAvatarChanged)update;
    usersProcessor.onUserAvatarChanged(avatarChanged.getUid(),avatarChanged.getAvatar());
  }
 else   if (update instanceof UpdateUserStateChanged) {
  }
 else   if (update instanceof UpdateMessage) {
    UpdateMessage message=(UpdateMessage)update;
    messagesProcessor.onMessage(message.getPeer(),message.getSenderUid(),message.getDate(),message.getRid(),message.getMessage());
    typingProcessor.onMessage(message.getPeer(),message.getSenderUid());
  }
 else   if (update instanceof UpdateMessageRead) {
    UpdateMessageRead messageRead=(UpdateMessageRead)update;
    messagesProcessor.onMessageRead(messageRead.getPeer(),messageRead.getStartDate(),messageRead.getReadDate());
  }
 else   if (update instanceof UpdateMessageReadByMe) {
    UpdateMessageReadByMe messageReadByMe=(UpdateMessageReadByMe)update;
    messagesProcessor.onMessageReadByMe(messageReadByMe.getPeer(),messageReadByMe.getStartDate());
  }
 else   if (update instanceof UpdateMessageReceived) {
    UpdateMessageReceived received=(UpdateMessageReceived)update;
    messagesProcessor.onMessageReceived(received.getPeer(),received.getStartDate(),received.getReceivedDate());
  }
 else   if (update instanceof UpdateMessageDelete) {
    UpdateMessageDelete messageDelete=(UpdateMessageDelete)update;
    messagesProcessor.onMessageDelete(messageDelete.getPeer(),messageDelete.getRids());
  }
 else   if (update instanceof UpdateMessageSent) {
    UpdateMessageSent messageSent=(UpdateMessageSent)update;
    messagesProcessor.onMessageSent(messageSent.getPeer(),messageSent.getRid(),messageSent.getDate());
  }
 else   if (update instanceof UpdateEncryptedMessage) {
    UpdateEncryptedMessage encryptedMessage=(UpdateEncryptedMessage)update;
    typingProcessor.onMessage(encryptedMessage.getPeer(),encryptedMessage.getSenderUid());
  }
 else   if (update instanceof UpdateEncryptedRead) {
    UpdateEncryptedRead encryptedRead=(UpdateEncryptedRead)update;
    messagesProcessor.onMessageEncryptedRead(encryptedRead.getPeer(),encryptedRead.getRid(),encryptedRead.getReadDate());
  }
 else   if (update instanceof UpdateEncryptedReadByMe) {
    UpdateEncryptedReadByMe encryptedRead=(UpdateEncryptedReadByMe)update;
    messagesProcessor.onMessageEncryptedReadByMe(encryptedRead.getPeer(),encryptedRead.getRid());
  }
 else   if (update instanceof UpdateEncryptedReceived) {
    UpdateEncryptedReceived received=(UpdateEncryptedReceived)update;
    messagesProcessor.onMessageEncryptedReceived(received.getPeer(),received.getRid(),received.getReceivedDate());
  }
 else   if (update instanceof UpdateChatClear) {
    UpdateChatClear chatClear=(UpdateChatClear)update;
    messagesProcessor.onChatClear(chatClear.getPeer());
  }
 else   if (update instanceof UpdateChatDelete) {
    UpdateChatDelete chatDelete=(UpdateChatDelete)update;
    messagesProcessor.onChatDelete(chatDelete.getPeer());
  }
 else   if (update instanceof UpdateContactRegistered) {
    UpdateContactRegistered registered=(UpdateContactRegistered)update;
    if (!registered.isSilent()) {
      messagesProcessor.onUserRegistered(registered.getUid(),registered.getDate());
    }
  }
 else   if (update instanceof UpdateUserOnline) {
    UpdateUserOnline userOnline=(UpdateUserOnline)update;
    presenceProcessor.onUserOnline(userOnline.getUid());
  }
 else   if (update instanceof UpdateUserOffline) {
    UpdateUserOffline offline=(UpdateUserOffline)update;
    presenceProcessor.onUserOffline(offline.getUid());
  }
 else   if (update instanceof UpdateUserLastSeen) {
    UpdateUserLastSeen lastSeen=(UpdateUserLastSeen)update;
    presenceProcessor.onUserLastSeen(lastSeen.getUid(),lastSeen.getDate());
  }
 else   if (update instanceof UpdateGroupOnline) {
    UpdateGroupOnline groupOnline=(UpdateGroupOnline)update;
    presenceProcessor.onGroupOnline(groupOnline.getGroupId(),groupOnline.getCount());
  }
 else   if (update instanceof UpdateTyping) {
    UpdateTyping typing=(UpdateTyping)update;
    typingProcessor.onTyping(typing.getPeer(),typing.getUid(),typing.getTypingType());
  }
 else   if (update instanceof UpdateGroupTitleChanged) {
    UpdateGroupTitleChanged titleChanged=(UpdateGroupTitleChanged)update;
    groupsProcessor.onTitleChanged(titleChanged.getGroupId(),titleChanged.getRid(),titleChanged.getUid(),titleChanged.getTitle(),titleChanged.getDate());
  }
 else   if (update instanceof UpdateGroupAvatarChanged) {
    UpdateGroupAvatarChanged avatarChanged=(UpdateGroupAvatarChanged)update;
    groupsProcessor.onAvatarChanged(avatarChanged.getGroupId(),avatarChanged.getRid(),avatarChanged.getUid(),EntityConverter.convert(avatarChanged.getAvatar()),avatarChanged.getDate());
  }
 else   if (update instanceof UpdateGroupInvite) {
    UpdateGroupInvite groupInvite=(UpdateGroupInvite)update;
    groupsProcessor.onGroupInvite(groupInvite.getGroupId(),groupInvite.getRid(),groupInvite.getInviteUid(),groupInvite.getDate());
  }
 else   if (update instanceof UpdateGroupUserLeave) {
    UpdateGroupUserLeave leave=(UpdateGroupUserLeave)update;
    groupsProcessor.onUserLeave(leave.getGroupId(),leave.getRid(),leave.getUid(),leave.getDate());
  }
 else   if (update instanceof UpdateGroupUserKick) {
    UpdateGroupUserKick userKick=(UpdateGroupUserKick)update;
    groupsProcessor.onUserKicked(userKick.getGroupId(),userKick.getRid(),userKick.getUid(),userKick.getKickerUid(),userKick.getDate());
  }
 else   if (update instanceof UpdateGroupUserAdded) {
    UpdateGroupUserAdded userAdded=(UpdateGroupUserAdded)update;
    groupsProcessor.onUserAdded(userAdded.getGroupId(),userAdded.getRid(),userAdded.getUid(),userAdded.getInviterUid(),userAdded.getDate());
  }
 else   if (update instanceof UpdateContactsAdded) {
    UpdateContactsAdded contactsAdded=(UpdateContactsAdded)update;
    int[] res=new int[contactsAdded.getUids().size()];
    for (int i=0; i < res.length; i++) {
      res[i]=contactsAdded.getUids().get(i);
    }
    contactsProcessor.onContactsAdded(res);
  }
 else   if (update instanceof UpdateContactsRemoved) {
    UpdateContactsRemoved contactsRemoved=(UpdateContactsRemoved)update;
    int[] res=new int[contactsRemoved.getUids().size()];
    for (int i=0; i < res.length; i++) {
      res[i]=contactsRemoved.getUids().get(i);
    }
    contactsProcessor.onContactsRemoved(res);
  }
}
