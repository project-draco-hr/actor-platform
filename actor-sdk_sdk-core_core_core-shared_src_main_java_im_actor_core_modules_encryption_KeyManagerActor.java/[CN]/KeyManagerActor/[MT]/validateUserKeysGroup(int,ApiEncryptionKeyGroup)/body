{
  if (!"curve25519".equals(keyGroup.getIdentityKey().getKeyAlg())) {
    Log.w(TAG,"(uid:" + uid + ") Unsupported identity key alg "+ keyGroup.getIdentityKey().getKeyAlg());
    return null;
  }
  UserPublicKey identity=new UserPublicKey(keyGroup.getIdentityKey().getKeyId(),keyGroup.getIdentityKey().getKeyAlg(),keyGroup.getIdentityKey().getKeyMaterial());
  ArrayList<UserPublicKey> keys=new ArrayList<UserPublicKey>();
  key_loop:   for (  ApiEncryptionKey key : keyGroup.getKeys()) {
    for (    ApiEncryptionKeySignature sig : keyGroup.getSignatures()) {
      if (!sig.getSignatureAlg().equals("Ed25519")) {
        Log.w(TAG,"(uid:" + uid + ") Unsupported signature algorithm "+ sig.getSignatureAlg());
        continue;
      }
      if (sig.getKeyId() != key.getKeyId()) {
        continue;
      }
      byte[] keyForSign=RatchetKeySignature.hashForSignature(key.getKeyId(),key.getKeyAlg(),key.getKeyMaterial());
      if (!Curve25519.verifySignature(identity.getPublicKey(),keyForSign,sig.getSignature())) {
        Log.w(TAG,"(uid:" + uid + ") Unable to verify signature for "+ Crypto.keyHash(key.getKeyMaterial())+ " key");
        continue key_loop;
      }
    }
    keys.add(new UserPublicKey(key.getKeyId(),key.getKeyAlg(),key.getKeyMaterial()));
  }
  if (keys.size() > 0) {
    return new UserKeysGroup(keyGroup.getKeyGroupId(),identity,keys.toArray(new UserPublicKey[keys.size()]),new UserPublicKey[0]);
  }
 else {
    Log.w(TAG,"(uid:" + uid + ") No valid keys in key group #"+ keyGroup.getKeyGroupId());
    return null;
  }
}
