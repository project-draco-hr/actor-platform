{
  encryptionKeysStorage=Storage.createKeyValue("encryption_keys");
  ownKeys=null;
  byte[] ownKeysStorage=encryptionKeysStorage.loadItem(0);
  if (ownKeysStorage != null) {
    try {
      ownKeys=new OwnKeys(ownKeysStorage);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  if (ownKeys == null) {
    byte[] identityPrivate=Curve25519.keyGenPrivate(Crypto.randomBytes(64));
    byte[] key0=Curve25519.keyGenPrivate(Crypto.randomBytes(64));
    ownKeys=new OwnKeys(0,new OwnPrivateKey(RandomUtils.nextRid(),"curve25519",identityPrivate),new OwnPrivateKey[]{new OwnPrivateKey(RandomUtils.nextRid(),"curve25519",key0)},new OwnPrivateKeyUploadable[0]);
    encryptionKeysStorage.addOrUpdateItem(0,ownKeys.toByteArray());
  }
  if (ownKeys.getKeyGroupId() == 0) {
    OwnPrivateKey privateKey=ownKeys.getIdentityKey();
    byte[] publicKey=Curve25519.keyGenPublic(privateKey.getKey());
    ApiEncryptionKey apiEncryptionKey=new ApiEncryptionKey(privateKey.getKeyId(),privateKey.getKeyAlg(),publicKey,null);
    ArrayList<String> encryption=new ArrayList<String>();
    encryption.add("curve25519");
    encryption.add("Ed25519");
    encryption.add("kuznechik128");
    encryption.add("streebog256");
    encryption.add("sha256");
    encryption.add("sha512");
    encryption.add("aes128");
    ArrayList<ApiEncryptionKey> keys=new ArrayList<ApiEncryptionKey>();
    ArrayList<ApiEncryptionKeySignature> keySignatures=new ArrayList<ApiEncryptionKeySignature>();
    for (    OwnPrivateKey key : ownKeys.getKeys()) {
      byte[] publicKey2=Curve25519.keyGenPublic(privateKey.getKey());
      ApiEncryptionKey apiKey=new ApiEncryptionKey(key.getKeyId(),key.getKeyAlg(),publicKey2,null);
      keys.add(apiKey);
      byte[] signature=Curve25519.calculateSignature(Crypto.randomBytes(64),privateKey.getKey(),apiKey.toByteArray());
      keySignatures.add(new ApiEncryptionKeySignature(key.getKeyId(),"Ed25519",signature));
    }
    request(new RequestCreateNewKeyGroup(apiEncryptionKey,encryption,keys,keySignatures),new RpcCallback<ResponseCreateNewKeyGroup>(){
      @Override public void onResult(      ResponseCreateNewKeyGroup response){
        ownKeys=ownKeys.setGroupId(response.getKeyGroupId());
        encryptionKeysStorage.addOrUpdateItem(0,ownKeys.toByteArray());
        onMainKeysReady();
      }
      @Override public void onError(      RpcException e){
        Log.w(TAG,"Keys upload error");
        Log.e(TAG,e);
      }
    }
);
  }
 else {
    onMainKeysReady();
  }
}
