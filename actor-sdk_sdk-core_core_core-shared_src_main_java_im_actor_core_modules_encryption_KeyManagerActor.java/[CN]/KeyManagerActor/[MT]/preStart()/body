{
  ephemeralStorage=Storage.createKeyValue("ephemeral_keys");
  byte[] data=preferences().getBytes(PRIVATE_KEYS);
  if (data != null) {
    try {
      privateKeyStorage=new PrivateKeyStorage(data);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  if (privateKeyStorage == null) {
    Log.d(TAG,"Generating new encryption keys...");
    EncryptionKey identityKey=new EncryptionKey(RandomUtils.nextRid(),Curve25519.keyGen(Crypto.randomBytes(64)));
    ArrayList<EncryptionKey> keyPairs=new ArrayList<EncryptionKey>();
    keyPairs.add(new EncryptionKey(RandomUtils.nextRid(),Curve25519.keyGen(Crypto.randomBytes(64))));
    privateKeyStorage=new PrivateKeyStorage(identityKey,keyPairs,0);
    preferences().putBytes(PRIVATE_KEYS,privateKeyStorage.toByteArray());
  }
  if (privateKeyStorage.getKeyGroupId() == 0) {
    Log.d(TAG,"Uploading main encryption keys...");
    EncryptionKey identityKey=privateKeyStorage.getIdentityKey();
    ApiEncryptionKey apiEncryptionKey=new ApiEncryptionKey(identityKey.getKeyId(),identityKey.getKeyAlg(),identityKey.getPublicKey(),null);
    ArrayList<String> encryption=new ArrayList<String>();
    encryption.add("curve25519");
    encryption.add("Ed25519");
    encryption.add("kuznechik128");
    encryption.add("streebog256");
    encryption.add("sha256");
    encryption.add("sha512");
    encryption.add("aes128");
    ArrayList<ApiEncryptionKey> keys=new ArrayList<ApiEncryptionKey>();
    ArrayList<ApiEncryptionKeySignature> keySignatures=new ArrayList<ApiEncryptionKeySignature>();
    for (    EncryptionKey key : privateKeyStorage.getKeys()) {
      ApiEncryptionKey apiKey=new ApiEncryptionKey(key.getKeyId(),key.getKeyAlg(),key.getPublicKey(),null);
      keys.add(apiKey);
      byte[] signature=Curve25519.calculateSignature(Crypto.randomBytes(64),identityKey.getPrivateKey(),apiKey.toByteArray());
      keySignatures.add(new ApiEncryptionKeySignature(key.getKeyId(),"Ed25519",signature));
    }
    request(new RequestCreateNewKeyGroup(apiEncryptionKey,encryption,keys,keySignatures),new RpcCallback<ResponseCreateNewKeyGroup>(){
      @Override public void onResult(      ResponseCreateNewKeyGroup response){
        privateKeyStorage=privateKeyStorage.markUploaded(response.getKeyGroupId());
        preferences().putBytes(PRIVATE_KEYS,privateKeyStorage.toByteArray());
        onMainKeysReady();
      }
      @Override public void onError(      RpcException e){
        Log.w(TAG,"Keys upload error");
        Log.e(TAG,e);
      }
    }
);
  }
 else {
    onMainKeysReady();
  }
}
