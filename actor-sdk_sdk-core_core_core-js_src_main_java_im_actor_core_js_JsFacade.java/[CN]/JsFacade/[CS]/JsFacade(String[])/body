{
  provider=(JsFileSystemProvider)Storage.getFileSystemRuntime();
  String clientName=IdentityUtils.getClientName();
  String uniqueId=IdentityUtils.getUniqueId();
  ConfigurationBuilder configuration=new ConfigurationBuilder();
  configuration.setApiConfiguration(new ApiConfiguration(APP_NAME,APP_ID,APP_KEY,clientName,uniqueId));
  configuration.setPhoneBookProvider(new JsPhoneBookProvider());
  configuration.setNotificationProvider(new JsNotificationsProvider());
  configuration.setWebRTCProvider(new JsWebRTCProvider());
  String locale=LocaleInfo.getCurrentLocale().getLocaleName();
  if (locale.equals("default")) {
    Log.d(TAG,"Default locale found");
    configuration.addPreferredLanguage("en");
  }
 else {
    Log.d(TAG,"Locale found:" + locale);
    configuration.addPreferredLanguage(locale.toLowerCase());
  }
  int offset=new Date().getTimezoneOffset();
  String timeZone=TimeZone.createTimeZone(offset).getID();
  Log.d(TAG,"TimeZone found:" + timeZone + " for delta "+ offset);
  configuration.setTimeZone(timeZone);
  configuration.setPlatformType(PlatformType.WEB);
  configuration.setDeviceCategory(DeviceCategory.DESKTOP);
  for (  String endpoint : endpoints) {
    configuration.addEndpoint(endpoint);
  }
  messenger=new JsMessenger(configuration.build());
  JsWebRTC.getAudioMedia().then(new Consumer<JsUserMediaStream>(){
    @Override public void apply(    JsUserMediaStream mediaStream){
      Log.d(TAG,"Audio received");
    }
  }
).failure(new Consumer<Exception>(){
    @Override public void apply(    Exception e){
      Log.w(TAG,"Audio Error");
    }
  }
);
  Log.d(TAG,"JsMessenger created");
}
