{
  return JsPromise.create(new JsPromiseExecutor(){
    @Override public void execute(){
      messenger.findPeers(PeerSearchType.GROUPS).start(new CommandCallback<List<PeerSearchEntity>>(){
        @Override public void onResult(        List<PeerSearchEntity> res){
          Log.d(TAG,"findGroups:result");
          JsArray<JsPeerSearchResult> jsRes=JsArray.createArray().cast();
          for (          PeerSearchEntity s : res) {
            if (s.getPeer().getPeerType() == PeerType.GROUP) {
              jsRes.push(JsPeerSearchResult.create(messenger.buildPeerInfo(s.getPeer()),s.getDescription(),s.getMembersCount(),(int)(s.getDate() / 1000L),messenger.buildPeerInfo(Peer.user(s.getCreatorUid())),s.isPublic(),s.isJoined()));
            }
 else             if (s.getPeer().getPeerType() == PeerType.PRIVATE) {
              jsRes.push(JsPeerSearchResult.create(messenger.buildPeerInfo(s.getPeer())));
            }
          }
          resolve(jsRes);
        }
        @Override public void onError(        Exception e){
          Log.d(TAG,"findGroups:error");
          reject(e.getMessage());
        }
      }
);
    }
  }
);
}
