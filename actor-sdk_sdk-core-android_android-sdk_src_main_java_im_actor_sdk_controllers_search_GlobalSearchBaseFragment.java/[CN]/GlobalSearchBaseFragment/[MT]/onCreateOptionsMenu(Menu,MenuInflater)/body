{
  super.onCreateOptionsMenu(menu,inflater);
  inflater.inflate(R.menu.fragment_global_search,menu);
  searchMenu=menu.findItem(R.id.search);
  if (messenger().getAppState().getIsAppEmpty().get()) {
    searchMenu.setVisible(false);
  }
 else {
    searchMenu.setVisible(true);
  }
  searchView=(SearchView)searchMenu.getActionView();
  searchView.setIconifiedByDefault(true);
  MenuItemCompat.setOnActionExpandListener(searchMenu,new MenuItemCompat.OnActionExpandListener(){
    @Override public boolean onMenuItemActionExpand(    MenuItem item){
      showSearch();
      return true;
    }
    @Override public boolean onMenuItemActionCollapse(    MenuItem item){
      hideSearch();
      return true;
    }
  }
);
  searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String s){
      return false;
    }
    @Override public boolean onQueryTextChange(    String s){
      searchQuery=s.trim();
      if (isSearchVisible) {
        if (s.trim().length() > 0) {
          String activeSearchQuery=searchQuery;
          searchDisplay.initSearch(s.trim().toLowerCase(),false);
          searchAdapter.setQuery(s.trim().toLowerCase());
          messenger().findPeers(s).start(new CommandCallback<List<PeerSearchEntity>>(){
            @Override public void onResult(            List<PeerSearchEntity> res){
              int footerVisability=footer.getVisibility();
              if (searchQuery.equals(activeSearchQuery)) {
                boolean showResult=false;
                Peer peer=null;
                String name=null;
                Avatar avatar=null;
                if (res.size() > 0) {
                  peer=res.get(0).getPeer();
                  if (peer.getPeerType() == PeerType.PRIVATE) {
                    UserVM userVM=users().get(peer.getPeerId());
                    name=userVM.getName().getName();
                    avatar=userVM.getAvatar().get();
                  }
 else                   if (peer.getPeerType() == PeerType.GROUP) {
                    GroupVM groupVM=groups().get(peer.getPeerId());
                    name=groupVM.getName().getName();
                    avatar=groupVM.getAvatar().get();
                  }
 else {
                    return;
                  }
                  showResult=true;
                  for (int i=0; i < searchDisplay.getSize(); i++) {
                    if (searchDisplay.getItem(i).getPeer().equals(peer))                     showResult=false;
                    break;
                  }
                }
                if (showResult) {
                  footerSearchHolder.bind(new SearchEntity(peer,0,avatar,name),activeSearchQuery,true);
                  showView(footer);
                }
 else {
                  goneView(footer);
                }
              }
              if (footerVisability != footer.getVisibility()) {
                onSearchChanged();
              }
            }
            @Override public void onError(            Exception e){
            }
          }
);
        }
 else {
          searchDisplay.initEmpty();
          goneView(footer);
        }
      }
      return false;
    }
  }
);
}
