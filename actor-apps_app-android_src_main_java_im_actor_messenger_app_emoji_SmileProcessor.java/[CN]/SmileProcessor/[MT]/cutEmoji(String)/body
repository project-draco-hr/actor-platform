{
  StringBuilder stringBuilder=new StringBuilder();
  long prev=0;
  long prevLong=0;
  int prevLongCount=0;
  int lastTextPos=0;
  ArrayList<SpanDescription> list=new ArrayList<SpanDescription>();
  for (int i=0; i < s.length(); i++) {
    long current=s.charAt(i);
    if (prevLongCount == 3) {
      long prevId=((prevLong & 0xFFFFFFFF) << 16) + current;
      if (EMOJI_SET.contains(prevId)) {
        if (lastTextPos < i - 3) {
          stringBuilder.append(s.substring(lastTextPos,i - 3));
          lastTextPos=i - 3;
        }
        stringBuilder.append(":smile:");
        lastTextPos+=4;
        list.add(new SpanDescription(prevId,i - 3,i + 1));
        prev=0;
        prevLong=0;
        prevLongCount=0;
        continue;
      }
    }
    if (prev != 0) {
      long prevId=((prev & 0xFFFF) << 16) + current;
      if (EMOJI_SET.contains(prevId)) {
        if (lastTextPos < i - 1) {
          stringBuilder.append(s.substring(lastTextPos,i - 1));
          lastTextPos=i - 1;
        }
        stringBuilder.append(":smile:");
        lastTextPos+=2;
        list.add(new SpanDescription(prevId,i - 1,i + 1));
        prev=0;
        prevLong=0;
        prevLongCount=0;
        continue;
      }
    }
    if (EMOJI_SET.contains(current)) {
      if (lastTextPos < i) {
        stringBuilder.append(s.substring(lastTextPos,i));
        lastTextPos=i;
      }
      stringBuilder.append(":smile:");
      lastTextPos+=1;
      list.add(new SpanDescription(current,i,i + 1));
      prev=0;
      prevLong=0;
      prevLongCount=0;
    }
 else {
      prev=current;
      prevLong=((prevLong & 0xFFFFFFFF) << 16) + current;
      if (prevLongCount < 3) {
        prevLongCount++;
      }
    }
  }
  if (lastTextPos < s.length()) {
    stringBuilder.append(s.substring(lastTextPos,s.length()));
  }
  return stringBuilder.toString();
}
