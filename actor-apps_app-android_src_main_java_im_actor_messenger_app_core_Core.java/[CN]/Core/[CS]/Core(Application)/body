{
  AndroidContext.setContext(application);
  JSONObject config=new JSONObject(new String(readAll(application.getAssets().open("app.json"))));
  hockeyToken=config.optString("hockeyapp");
  if (config.optString("mint") != null && !config.optString("mint").equals("null")) {
    Mint.disableNetworkMonitoring();
    Mint.initAndStartSession(application,config.getString("mint"));
  }
  Fresco.initialize(application);
  if (BuildConfig.IS_FREE) {
    Intent keepAliveService=new Intent(application,KeepAliveService.class);
    PendingIntent pintent=PendingIntent.getService(application,0,keepAliveService,0);
    AlarmManager alarm=(AlarmManager)application.getSystemService(Context.ALARM_SERVICE);
    alarm.setRepeating(AlarmManager.RTC,System.currentTimeMillis(),30 * 1000,pintent);
  }
  AppContext.setContext(application);
  this.smileProcessor=new SmileProcessor(application);
  this.smileProcessor.loadEmoji();
  ConfigurationBuilder builder=new ConfigurationBuilder();
  JSONArray endpoints=config.getJSONArray("endpoints");
  for (int i=0; i < endpoints.length(); i++) {
    builder.addEndpoint(endpoints.getString(i));
  }
  builder.setPhoneBookProvider(new AndroidPhoneBook());
  builder.setNotificationProvider(new AndroidNotifications(AppContext.getContext()));
  builder.setDeviceCategory(DeviceCategory.MOBILE);
  builder.setPlatformType(PlatformType.ANDROID);
  builder.setApiConfiguration(new ApiConfiguration(BuildConfig.VERSION_TITLE,API_ID,API_KEY,getDeviceName(),AppContext.getContext().getPackageName() + ":" + Build.SERIAL));
  this.messenger=new AndroidMessenger(AppContext.getContext(),builder.build());
  this.androidPushesActor=system().actorOf(Props.create(AndroidPushActor.class,new ActorCreator<AndroidPushActor>(){
    @Override public AndroidPushActor create(){
      return new AndroidPushActor(application,messenger);
    }
  }
),"actor/android/push");
}
