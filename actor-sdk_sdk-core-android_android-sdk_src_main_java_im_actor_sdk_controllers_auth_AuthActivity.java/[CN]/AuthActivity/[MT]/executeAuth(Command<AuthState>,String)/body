{
  dismissProgress();
  progressDialog=new ProgressDialog(this);
  progressDialog.setCanceledOnTouchOutside(false);
  progressDialog.setCancelable(false);
  progressDialog.setTitle("Loading...");
  progressDialog.show();
  command.start(new CommandCallback<AuthState>(){
    @Override public void onResult(    final AuthState res){
      if (dismissProgress()) {
        updateState(res);
      }
    }
    @Override public void onError(    final Exception e){
      dismissProgress();
      boolean canTryAgain=false;
      String message=getString(R.string.error_unknown);
      String tag="UNKNOWN";
      if (e instanceof RpcException) {
        RpcException re=(RpcException)e;
        tag=re.getTag();
        if (re instanceof RpcInternalException) {
          message=getString(R.string.error_unknown);
          canTryAgain=true;
        }
 else         if (re instanceof RpcTimeoutException) {
          message=getString(R.string.error_connection);
          canTryAgain=true;
        }
 else {
          if ("PHONE_CODE_EXPIRED".equals(re.getTag())) {
            message=getString(R.string.auth_error_code_expired);
            canTryAgain=false;
          }
 else           if ("PHONE_CODE_INVALID".equals(re.getTag())) {
            message=getString(R.string.auth_error_code_invalid);
            canTryAgain=false;
          }
 else           if ("FAILED_GET_OAUTH2_TOKEN".equals(re.getTag())) {
            message=getString(R.string.auth_error_failed_get_oauth2_token);
            canTryAgain=false;
          }
 else {
            message=re.getMessage();
            canTryAgain=re.isCanTryAgain();
          }
        }
      }
      try {
        if (canTryAgain) {
          new AlertDialog.Builder(AuthActivity.this).setMessage(message).setPositiveButton(R.string.dialog_try_again,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int which){
              dismissAlert();
              executeAuth(command,action);
            }
          }
).setNegativeButton(R.string.dialog_cancel,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int which){
              dismissAlert();
              updateState(messenger().getAuthState());
            }
          }
).setCancelable(false).show().setCanceledOnTouchOutside(false);
        }
 else {
          new AlertDialog.Builder(AuthActivity.this).setMessage(message).setPositiveButton(R.string.dialog_ok,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int which){
              dismissAlert();
              updateState(messenger().getAuthState());
            }
          }
).setCancelable(false).show().setCanceledOnTouchOutside(false);
        }
      }
 catch (      Exception ex) {
        ex.printStackTrace();
      }
    }
  }
);
}
