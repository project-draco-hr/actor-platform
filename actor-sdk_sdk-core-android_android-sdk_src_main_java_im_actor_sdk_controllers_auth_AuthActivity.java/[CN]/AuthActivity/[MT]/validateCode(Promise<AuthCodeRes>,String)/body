{
  currentCode=code;
  showProgress();
  promise.then(new Consumer<AuthCodeRes>(){
    @Override public void apply(    AuthCodeRes authCodeRes){
      if (dismissProgress()) {
        codeValidated=true;
        transactionHash=authCodeRes.getTransactionHash();
        if (!authCodeRes.isNeedToSignup()) {
          messenger().doCompleteAuth(authCodeRes.getResult()).then(new Consumer<Boolean>(){
            @Override public void apply(            Boolean aBoolean){
              updateState(AuthState.LOGGED_IN);
            }
          }
).failure(new Consumer<Exception>(){
            @Override public void apply(            Exception e){
              handleAuthError(e);
            }
          }
);
        }
 else {
          if (currentName == null || currentName.isEmpty()) {
            updateState(AuthState.SIGN_UP,true);
          }
 else {
            signUp(messenger().doSignup(currentName,currentSex != null ? currentSex : Sex.UNKNOWN,transactionHash),currentName,currentSex);
          }
        }
      }
    }
  }
).failure(new Consumer<Exception>(){
    @Override public void apply(    Exception e){
      handleAuthError(e);
    }
  }
);
}
