{
  final OutPeer outPeer=buidOutPeer(peer);
  final im.actor.model.api.Peer apiPeer=buildApiPeer(peer);
  if (outPeer == null || apiPeer == null) {
    return;
  }
  im.actor.model.api.Message message;
  if (content instanceof TextContent) {
    message=new TextMessage(((TextContent)content).getText(),null);
  }
 else   if (content instanceof DocumentContent) {
    DocumentContent documentContent=(DocumentContent)content;
    FileRemoteSource source=(FileRemoteSource)documentContent.getSource();
    DocumentEx documentEx=null;
    if (content instanceof PhotoContent) {
      PhotoContent photoContent=(PhotoContent)content;
      documentEx=new DocumentExPhoto(photoContent.getW(),photoContent.getH());
    }
 else     if (content instanceof VideoContent) {
      VideoContent videoContent=(VideoContent)content;
      documentEx=new DocumentExVideo(videoContent.getW(),videoContent.getH(),videoContent.getDuration());
    }
    im.actor.model.api.FastThumb fastThumb=null;
    if (documentContent.getFastThumb() != null) {
      fastThumb=new im.actor.model.api.FastThumb(documentContent.getFastThumb().getW(),documentContent.getFastThumb().getH(),documentContent.getFastThumb().getImage());
    }
    message=new DocumentMessage(source.getFileLocation().getFileId(),source.getFileLocation().getAccessHash(),source.getFileLocation().getFileSize(),null,null,null,source.getFileLocation().getFileName(),documentContent.getMimetype(),fastThumb,documentEx);
  }
 else {
    return;
  }
  request(new RequestSendMessage(outPeer,rid,message),new RpcCallback<ResponseSeqDate>(){
    @Override public void onResult(    ResponseSeqDate response){
      self().send(new MessageSent(peer,rid));
      updates().onUpdateReceived(new SeqUpdate(response.getSeq(),response.getState(),UpdateMessageSent.HEADER,new UpdateMessageSent(apiPeer,rid,response.getDate()).toByteArray()));
    }
    @Override public void onError(    RpcException e){
      self().send(new MessageError(peer,rid));
    }
  }
);
}
