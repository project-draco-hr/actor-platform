{
  MVVMEngine.checkMainThread();
  if (isGlobalList) {
    throw new RuntimeException("Global DisplayList can't perform search");
  }
  if (query == null || query.trim().length() == 0) {
    throw new RuntimeException("Query can't be null or empty");
  }
  if (mode != null && mode == ListMode.SEARCH && this.query.equals(query)) {
    return;
  }
  this.mode=ListMode.SEARCH;
  this.query=query;
  if (refresh) {
    editList((Modification)DisplayModifications.clear());
  }
  stateModel.change(State.LOADING_EMPTY);
  isLoadMoreBackwardRequested=false;
  isLoadMoreBackwardRequested=false;
  currentGeneration++;
  window.startInitForward();
  listEngine.loadForward(query,pageSize,cover(new ListEngineDisplayLoadCallback<T>(){
    @Override public void onLoaded(    List<T> items,    long topSortKey,    long bottomSortKey){
      MVVMEngine.checkMainThread();
      window.completeInitForward(bottomSortKey);
      editList(DisplayModifications.replace(items));
      if (items.size() == 0) {
        window.onForwardCompleted();
      }
    }
  }
,currentGeneration));
}
