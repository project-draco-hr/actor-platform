{
  long c=0, xVal=x & M;
  c+=xVal * (y[yOff + 0] & M) + (z[zOff + 0] & M);
  z[zOff + 0]=(int)c;
  c>>>=32;
  c+=xVal * (y[yOff + 1] & M) + (z[zOff + 1] & M);
  z[zOff + 1]=(int)c;
  c>>>=32;
  c+=xVal * (y[yOff + 2] & M) + (z[zOff + 2] & M);
  z[zOff + 2]=(int)c;
  c>>>=32;
  c+=xVal * (y[yOff + 3] & M) + (z[zOff + 3] & M);
  z[zOff + 3]=(int)c;
  c>>>=32;
  c+=xVal * (y[yOff + 4] & M) + (z[zOff + 4] & M);
  z[zOff + 4]=(int)c;
  c>>>=32;
  c+=xVal * (y[yOff + 5] & M) + (z[zOff + 5] & M);
  z[zOff + 5]=(int)c;
  c>>>=32;
  c+=xVal * (y[yOff + 6] & M) + (z[zOff + 6] & M);
  z[zOff + 6]=(int)c;
  c>>>=32;
  c+=xVal * (y[yOff + 7] & M) + (z[zOff + 7] & M);
  z[zOff + 7]=(int)c;
  c>>>=32;
  return (int)c;
}
