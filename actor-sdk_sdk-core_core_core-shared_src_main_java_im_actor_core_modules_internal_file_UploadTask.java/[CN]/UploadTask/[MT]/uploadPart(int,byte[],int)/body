{
  request(new RequestGetFileUploadPartUrl(blockIndex,blockSize,uploadConfig),new RpcCallback<ResponseGetFileUploadPartUrl>(){
    @Override public void onResult(    ResponseGetFileUploadPartUrl response){
      HTTP.putMethod(response.getUrl(),data,new FileUploadCallback(){
        @Override public void onUploaded(){
          self().send(new Runnable(){
            @Override public void run(){
              if (LOG) {
                Log.d(TAG,"Block #" + blockIndex + " uploaded");
              }
              uploadCount--;
              uploaded++;
              reportProgress(uploaded / (float)blocksCount);
              checkQueue();
            }
          }
);
        }
        @Override public void onUploadFailure(        int error,        int retryInSecs){
          if ((error >= 500 && error < 600) || error == 0) {
            if (retryInSecs <= 0) {
              retryInSecs=DEFAULT_RETRY;
            }
            if (LOG) {
              Log.w(TAG,"Block #" + blockIndex + " upload error #"+ error+ " trying again in "+ retryInSecs+ " sec, attempt #"+ (attempt + 1));
            }
            self().send(new Retry(blockIndex,data,attempt + 1),retryInSecs * 1000L);
          }
 else {
            self().send(new Runnable(){
              @Override public void run(){
                if (LOG) {
                  Log.w(TAG,"Block #" + blockIndex + " upload failure");
                }
                reportError();
              }
            }
);
          }
        }
      }
);
    }
    @Override public void onError(    RpcException e){
      if (LOG) {
        Log.w(TAG,"Get Block #" + blockIndex + " url failure");
      }
      reportError();
    }
  }
);
}
