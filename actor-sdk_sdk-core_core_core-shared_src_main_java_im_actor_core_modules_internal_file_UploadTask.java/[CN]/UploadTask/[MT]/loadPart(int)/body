{
  int size=blockSize;
  int fileOffset=blockIndex * blockSize;
  if ((blockIndex + 1) * blockSize > srcReference.getSize()) {
    size=srcReference.getSize() - blockIndex * blockSize;
  }
  byte[] data=new byte[size];
  final int finalSize=size;
  inputFile.read(fileOffset,data,0,size,new FileReadCallback(){
    @Override public void onFileRead(    final int fileOffset,    final byte[] data,    int offset,    int len){
      self().send(new Runnable(){
        @Override public void run(){
          if (isCompleted) {
            return;
          }
          if (LOG) {
            Log.d(TAG,"Block #" + blockIndex + " read");
          }
          if (isWriteToDestProvider) {
            if (!outputFile.write(fileOffset,data,0,finalSize)) {
              if (LOG) {
                Log.w(TAG,"write #" + blockIndex + " error");
              }
              reportError();
              return;
            }
          }
          crc32.update(data,0,finalSize);
          if (LOG) {
            Log.d(TAG,"Starting block upload #" + blockIndex);
          }
          uploadCount++;
          uploadPart(blockIndex,data,0);
          checkQueue();
        }
      }
);
    }
    @Override public void onFileReadError(){
      self().send(new Runnable(){
        @Override public void run(){
          if (isCompleted) {
            return;
          }
          if (LOG) {
            Log.w(TAG,"Block #" + blockIndex + " read failure");
          }
          reportError();
        }
      }
);
    }
  }
);
}
