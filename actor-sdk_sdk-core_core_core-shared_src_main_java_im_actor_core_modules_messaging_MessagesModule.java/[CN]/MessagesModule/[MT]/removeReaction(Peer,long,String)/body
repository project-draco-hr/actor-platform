{
  return new Command<Boolean>(){
    @Override public void start(    final CommandCallback<Boolean> callback){
      ApiOutPeer outPeer;
      final ApiPeer apiPeer;
      if (peer.getPeerType() == PeerType.PRIVATE) {
        User user=users().getValue(peer.getPeerId());
        if (user == null) {
          runOnUiThread(new Runnable(){
            @Override public void run(){
              callback.onError(new RpcInternalException());
            }
          }
);
          return;
        }
        outPeer=new ApiOutPeer(ApiPeerType.PRIVATE,user.getUid(),user.getAccessHash());
        apiPeer=new ApiPeer(ApiPeerType.PRIVATE,user.getUid());
      }
 else       if (peer.getPeerType() == PeerType.GROUP) {
        Group group=groups().getValue(peer.getPeerId());
        if (group == null) {
          runOnUiThread(new Runnable(){
            @Override public void run(){
              callback.onError(new RpcInternalException());
            }
          }
);
          return;
        }
        outPeer=new ApiOutPeer(ApiPeerType.GROUP,group.getGroupId(),group.getAccessHash());
        apiPeer=new ApiPeer(ApiPeerType.GROUP,group.getGroupId());
      }
 else {
        runOnUiThread(new Runnable(){
          @Override public void run(){
            callback.onError(new RpcInternalException());
          }
        }
);
        return;
      }
      request(new RequestMessageRemoveReaction(outPeer,rid,reaction),new RpcCallback<ResponseReactionsResponse>(){
        @Override public void onResult(        ResponseReactionsResponse response){
          updates().onSeqUpdateReceived(response.getSeq(),response.getState(),new UpdateReactionsUpdate(apiPeer,rid,response.getReactions()));
          updates().executeAfter(response.getSeq(),new Runnable(){
            @Override public void run(){
              runOnUiThread(new Runnable(){
                @Override public void run(){
                  callback.onResult(true);
                }
              }
);
            }
          }
);
        }
        @Override public void onError(        final RpcException e){
          runOnUiThread(new Runnable(){
            @Override public void run(){
              callback.onError(e);
            }
          }
);
        }
      }
);
    }
  }
;
}
