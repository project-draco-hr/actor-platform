{
  return new Command<Boolean>(){
    @Override public void start(    final CommandCallback<Boolean> callback){
      ApiOutPeer outPeer;
      final ApiPeer apiPeer=buildApiPeer(peer);
      if (peer.getPeerType() == PeerType.PRIVATE) {
        User user=users().getValue(peer.getPeerId());
        if (user == null) {
          runOnUiThread(new Runnable(){
            @Override public void run(){
              callback.onError(new RpcInternalException());
            }
          }
);
          return;
        }
        outPeer=new ApiOutPeer(ApiPeerType.PRIVATE,user.getUid(),user.getAccessHash());
      }
 else       if (peer.getPeerType() == PeerType.GROUP) {
        Group group=groups().getValue(peer.getPeerId());
        if (group == null) {
          runOnUiThread(new Runnable(){
            @Override public void run(){
              callback.onError(new RpcInternalException());
            }
          }
);
          return;
        }
        outPeer=new ApiOutPeer(ApiPeerType.GROUP,group.getGroupId(),group.getAccessHash());
      }
 else {
        runOnUiThread(new Runnable(){
          @Override public void run(){
            callback.onError(new RpcInternalException());
          }
        }
);
        return;
      }
      request(new RequestDeleteChat(outPeer),new RpcCallback<ResponseSeq>(){
        @Override public void onResult(        ResponseSeq response){
          updates().onUpdateReceived(new SeqUpdate(response.getSeq(),response.getState(),UpdateChatDelete.HEADER,new UpdateChatDelete(apiPeer).toByteArray()));
          runOnUiThread(new Runnable(){
            @Override public void run(){
              callback.onResult(true);
            }
          }
);
        }
        @Override public void onError(        final RpcException e){
          runOnUiThread(new Runnable(){
            @Override public void run(){
              callback.onError(e);
            }
          }
);
        }
      }
,RPC_TIMEOUT);
    }
  }
;
}
