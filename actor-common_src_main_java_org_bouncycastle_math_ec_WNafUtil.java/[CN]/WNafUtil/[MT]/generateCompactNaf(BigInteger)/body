{
  if ((k.bitLength() >>> 16) != 0) {
    throw new IllegalArgumentException("'k' must have bitlength < 2^16");
  }
  if (k.signum() == 0) {
    return EMPTY_INTS;
  }
  BigInteger _3k=k.shiftLeft(1).add(k);
  int bits=_3k.bitLength();
  int[] naf=new int[bits >> 1];
  BigInteger diff=_3k.xor(k);
  int highBit=bits - 1, length=0, zeroes=0;
  for (int i=1; i < highBit; ++i) {
    if (!diff.testBit(i)) {
      ++zeroes;
      continue;
    }
    int digit=k.testBit(i) ? -1 : 1;
    naf[length++]=(digit << 16) | zeroes;
    zeroes=1;
    ++i;
  }
  naf[length++]=(1 << 16) | zeroes;
  if (naf.length > length) {
    naf=trim(naf,length);
  }
  return naf;
}
