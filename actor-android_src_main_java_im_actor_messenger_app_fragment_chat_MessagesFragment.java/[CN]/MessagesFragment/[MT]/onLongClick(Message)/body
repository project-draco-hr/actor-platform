{
  if (actionMode == null) {
    selected.clear();
    selected.put(messageModel.getRid(),messageModel);
    actionMode=((ActionBarActivity)getActivity()).startSupportActionMode(new ActionMode.Callback(){
      @Override public boolean onCreateActionMode(      ActionMode mode,      Menu menu){
        getActivity().getMenuInflater().inflate(R.menu.messages_context,menu);
        return true;
      }
      @Override public boolean onPrepareActionMode(      ActionMode mode,      Menu menu){
        mode.setTitle("" + selected.size());
        boolean isAllText=true;
        for (        long k : selected.keySet()) {
          Message model=selected.get(k);
          if (!(model.getContent() instanceof TextContent)) {
            isAllText=false;
            break;
          }
        }
        menu.findItem(R.id.copy).setVisible(isAllText);
        return true;
      }
      @Override public boolean onActionItemClicked(      final ActionMode mode,      MenuItem item){
        if (item.getItemId() == R.id.delete) {
          new AlertDialog.Builder(getActivity()).setMessage(getString(R.string.alert_delete_messages_text).replace("{0}",selected.size() + "")).setPositiveButton(R.string.alert_delete_messages_yes,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int which){
              mode.finish();
            }
          }
).setNegativeButton(R.string.dialog_cancel,null).show().setCanceledOnTouchOutside(true);
        }
 else         if (item.getItemId() == R.id.copy) {
          String text="";
          Message[] models=selected.values().toArray(new Message[0]);
          Arrays.sort(models,new Comparator<Message>(){
            int compare(            long lhs,            long rhs){
              return lhs < rhs ? -1 : (lhs == rhs ? 0 : 1);
            }
            @Override public int compare(            Message lhs,            Message rhs){
              return compare(lhs.getListSortKey(),rhs.getListSortKey());
            }
          }
);
          if (models.length == 1) {
            for (            Message model : models) {
              if (!(model.getContent() instanceof TextContent)) {
                continue;
              }
              text+=((TextContent)model.getContent()).getText();
            }
          }
 else {
            for (            Message model : models) {
              if (!(model.getContent() instanceof TextContent)) {
                continue;
              }
              if (text.length() > 0) {
                text+="\n";
              }
              text+=users().get(model.getSenderId()).getName() + ": ";
              text+=((TextContent)model.getContent()).getText();
            }
          }
          android.content.ClipboardManager clipboard=(android.content.ClipboardManager)getActivity().getSystemService(Context.CLIPBOARD_SERVICE);
          android.content.ClipData clip=android.content.ClipData.newPlainText("Messages",text);
          clipboard.setPrimaryClip(clip);
          Toast.makeText(getActivity(),R.string.toast_messages_copied,Toast.LENGTH_SHORT).show();
          mode.finish();
        }
        return true;
      }
      @Override public void onDestroyActionMode(      ActionMode mode){
        selected.clear();
        actionMode=null;
      }
    }
);
    return true;
  }
  if (!selected.containsKey(messageModel.getRid())) {
    selected.put(messageModel.getRid(),messageModel);
  }
 else {
    selected.remove(messageModel.getRid());
  }
  if (actionMode != null) {
    if (selected.size() == 0) {
      actionMode.finish();
      actionMode=null;
    }
 else {
      actionMode.invalidate();
    }
  }
  return true;
}
