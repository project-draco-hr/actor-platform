{
  return pickCachedSession(uid,keyGroupId).fallback(new Function<Exception,Promise<PeerSession>>(){
    @Override public Promise<PeerSession> apply(    Exception e){
      return Promises.tuple(keyManager.getOwnIdentity(),keyManager.getOwnRandomPreKey(),keyManager.getUserKeyGroups(uid),keyManager.getUserRandomPreKey(uid,keyGroupId)).flatMap(new FunctionTupled4<KeyManagerActor.OwnIdentity,PrivateKey,UserKeys,PublicKey,Promise<PeerSession>>(){
        @Override public Promise<PeerSession> apply(        KeyManagerActor.OwnIdentity ownIdentity,        PrivateKey ownPreKey,        UserKeys userKeys,        PublicKey theirPreKey){
          UserKeysGroup keysGroup=ManagedList.of(userKeys.getUserKeysGroups()).filter(UserKeysGroup.BY_KEY_GROUP(keyGroupId)).first();
          spawnSession(uid,ownIdentity.getKeyGroup(),keyGroupId,ownIdentity.getIdentityKey(),keysGroup.getIdentityKey(),ownPreKey,theirPreKey);
          return Promise.success(null);
        }
      }
);
    }
  }
).afterVoid(new Supplier<Promise<PeerSession>>(){
    @Override public Promise<PeerSession> get(){
      return pickCachedSession(uid,keyGroupId);
    }
  }
);
}
