{
  ECFieldElement k=curve.fromBigInteger(BigInteger.valueOf(bytes[bytes.length - 1] & 0x1));
  ECFieldElement xp=curve.fromBigInteger(new BigInteger(1,bytes));
  if (!trace(xp).equals(curve.getA())) {
    xp=xp.addOne();
  }
  ECFieldElement yp=null;
  if (xp.isZero()) {
    yp=curve.getB().sqrt();
  }
 else {
    ECFieldElement beta=xp.square().invert().multiply(curve.getB()).add(curve.getA()).add(xp);
    ECFieldElement z=solveQuadraticEquation(curve,beta);
    if (z != null) {
      if (!trace(z).equals(k)) {
        z=z.addOne();
      }
      yp=xp.multiply(z);
    }
  }
  if (yp == null) {
    throw new IllegalArgumentException("Invalid point compression");
  }
  return curve.createPoint(xp.toBigInteger(),yp.toBigInteger());
}
