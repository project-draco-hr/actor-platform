{
  if (state != STATE_NONE) {
    destroyPlayer();
  }
  state=STATE_NONE;
  currentFileName=fileName;
  int res=opusLib.openOpusFile(currentFileName);
  if (res == 0) {
    callback.onError(currentFileName);
    return;
  }
  duration=opusLib.getTotalPcmDuration();
  offset=0;
  try {
    bufferSize=AudioTrack.getMinBufferSize(48000,AudioFormat.CHANNEL_OUT_MONO,AudioFormat.ENCODING_PCM_16BIT);
    audioTrack=new AudioTrack(AudioManager.STREAM_MUSIC,48000,AudioFormat.CHANNEL_OUT_MONO,AudioFormat.ENCODING_PCM_16BIT,bufferSize,AudioTrack.MODE_STREAM);
    audioTrack.play();
  }
 catch (  Exception e) {
    e.printStackTrace();
    destroyPlayer();
    callback.onError(currentFileName);
    return;
  }
  state=STATE_STARTED;
  if (seek != 0) {
    opusLib.seekOpusFile(seek);
  }
  callback.onStart(fileName);
  self().send(new Iterate());
}
