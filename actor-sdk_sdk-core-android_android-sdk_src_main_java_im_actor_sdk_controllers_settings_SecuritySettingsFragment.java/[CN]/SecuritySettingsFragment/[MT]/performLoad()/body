{
  loading.setText(R.string.security_authorized_loading);
  loading.setClickable(true);
  showView(loading,false);
  executeSilent(messenger().loadSessions(),new CommandCallback<List<ApiAuthSession>>(){
    @Override public void onResult(    List<ApiAuthSession> res){
      goneView(loading,false);
      authItems.removeAllViews();
      ArrayList<ApiAuthSession> items=new ArrayList<ApiAuthSession>(res);
      Collections.sort(items,new Comparator<ApiAuthSession>(){
        @Override public int compare(        ApiAuthSession lhs,        ApiAuthSession rhs){
          return rhs.getAuthTime() - lhs.getAuthTime();
        }
      }
);
      for (      final ApiAuthSession item : items) {
        if (getActivity() == null)         return;
        View view=getActivity().getLayoutInflater().inflate(R.layout.adapter_auth,authItems,false);
        boolean isThisDevice=item.getAuthHolder() == ApiAuthHolder.THISDEVICE;
        String deviceTitle=(isThisDevice ? getString(R.string.security_this_title) : "") + item.getDeviceTitle();
        ((TextView)view.findViewById(R.id.date)).setText(messenger().getFormatter().formatShortDate(item.getAuthTime() * 1000L));
        ((TextView)view.findViewById(R.id.date)).setTextColor(ActorSDK.sharedActor().style.getTextSecondaryColor());
        ((TextView)view.findViewById(R.id.appTitle)).setText(item.getAppTitle());
        ((TextView)view.findViewById(R.id.appTitle)).setTextColor(ActorSDK.sharedActor().style.getTextSecondaryColor());
        ((TextView)view.findViewById(R.id.deviceTitle)).setText(deviceTitle);
        ((TextView)view.findViewById(R.id.deviceTitle)).setTextColor(ActorSDK.sharedActor().style.getTextPrimaryColor());
        if (!isThisDevice) {
          view.setOnClickListener(new View.OnClickListener(){
            @Override public void onClick(            View v){
              new AlertDialog.Builder(getActivity()).setMessage(getString(R.string.security_terminate_this_message).replace("{device}",item.getDeviceTitle())).setPositiveButton(R.string.dialog_yes,new DialogInterface.OnClickListener(){
                @Override public void onClick(                DialogInterface dialog,                int which){
                  execute(messenger().terminateSession(item.getId()),R.string.progress_common,new CommandCallback<Void>(){
                    @Override public void onResult(                    Void res){
                      performLoad();
                    }
                    @Override public void onError(                    Exception e){
                      Toast.makeText(getActivity(),R.string.security_toast_unable_remove_auth,Toast.LENGTH_SHORT).show();
                      performLoad();
                    }
                  }
);
                }
              }
).setNegativeButton(R.string.dialog_no,null).show().setCanceledOnTouchOutside(true);
            }
          }
);
        }
        authItems.addView(view);
      }
    }
    @Override public void onError(    Exception e){
      loading.setText(R.string.security_toast_unable_to_load);
      loading.setClickable(true);
      showView(loading,false);
    }
  }
);
}
