{
  String nl=System.getProperty("line.separator");
  if (obj instanceof ASN1Sequence) {
    Enumeration e=((ASN1Sequence)obj).getObjects();
    String tab=indent + TAB;
    buf.append(indent);
    if (obj instanceof BERSequence) {
      buf.append("BER Sequence");
    }
 else     if (obj instanceof DERSequence) {
      buf.append("DER Sequence");
    }
 else {
      buf.append("Sequence");
    }
    buf.append(nl);
    while (e.hasMoreElements()) {
      Object o=e.nextElement();
      if (o == null || o.equals(DERNull.INSTANCE)) {
        buf.append(tab);
        buf.append("NULL");
        buf.append(nl);
      }
 else       if (o instanceof ASN1Primitive) {
        _dumpAsString(tab,verbose,(ASN1Primitive)o,buf);
      }
 else {
        _dumpAsString(tab,verbose,((ASN1Encodable)o).toASN1Primitive(),buf);
      }
    }
  }
 else   if (obj instanceof ASN1TaggedObject) {
    String tab=indent + TAB;
    buf.append(indent);
    if (obj instanceof BERTaggedObject) {
      buf.append("BER Tagged [");
    }
 else {
      buf.append("Tagged [");
    }
    ASN1TaggedObject o=(ASN1TaggedObject)obj;
    buf.append(Integer.toString(o.getTagNo()));
    buf.append(']');
    if (!o.isExplicit()) {
      buf.append(" IMPLICIT ");
    }
    buf.append(nl);
    if (o.isEmpty()) {
      buf.append(tab);
      buf.append("EMPTY");
      buf.append(nl);
    }
 else {
      _dumpAsString(tab,verbose,o.getObject(),buf);
    }
  }
 else   if (obj instanceof ASN1Set) {
    Enumeration e=((ASN1Set)obj).getObjects();
    String tab=indent + TAB;
    buf.append(indent);
    if (obj instanceof BERSet) {
      buf.append("BER Set");
    }
 else {
      buf.append("DER Set");
    }
    buf.append(nl);
    while (e.hasMoreElements()) {
      Object o=e.nextElement();
      if (o == null) {
        buf.append(tab);
        buf.append("NULL");
        buf.append(nl);
      }
 else       if (o instanceof ASN1Primitive) {
        _dumpAsString(tab,verbose,(ASN1Primitive)o,buf);
      }
 else {
        _dumpAsString(tab,verbose,((ASN1Encodable)o).toASN1Primitive(),buf);
      }
    }
  }
 else   if (obj instanceof ASN1OctetString) {
    ASN1OctetString oct=(ASN1OctetString)obj;
    if (obj instanceof BEROctetString) {
      buf.append(indent + "BER Constructed Octet String" + "["+ oct.getOctets().length+ "] ");
    }
 else {
      buf.append(indent + "DER Octet String" + "["+ oct.getOctets().length+ "] ");
    }
    if (verbose) {
      buf.append(dumpBinaryDataAsString(indent,oct.getOctets()));
    }
 else {
      buf.append(nl);
    }
  }
 else   if (obj instanceof ASN1ObjectIdentifier) {
    buf.append(indent + "ObjectIdentifier(" + ((ASN1ObjectIdentifier)obj).getId()+ ")"+ nl);
  }
 else   if (obj instanceof ASN1Boolean) {
    buf.append(indent + "Boolean(" + ((ASN1Boolean)obj).isTrue()+ ")"+ nl);
  }
 else   if (obj instanceof ASN1Integer) {
    buf.append(indent + "Integer(" + ((ASN1Integer)obj).getValue()+ ")"+ nl);
  }
 else   if (obj instanceof DERBitString) {
    DERBitString bt=(DERBitString)obj;
    buf.append(indent + "DER Bit String" + "["+ bt.getBytes().length+ ", "+ bt.getPadBits()+ "] ");
    if (verbose) {
      buf.append(dumpBinaryDataAsString(indent,bt.getBytes()));
    }
 else {
      buf.append(nl);
    }
  }
 else   if (obj instanceof DERIA5String) {
    buf.append(indent + "IA5String(" + ((DERIA5String)obj).getString()+ ") "+ nl);
  }
 else   if (obj instanceof DERUTF8String) {
    buf.append(indent + "UTF8String(" + ((DERUTF8String)obj).getString()+ ") "+ nl);
  }
 else   if (obj instanceof DERPrintableString) {
    buf.append(indent + "PrintableString(" + ((DERPrintableString)obj).getString()+ ") "+ nl);
  }
 else   if (obj instanceof DERVisibleString) {
    buf.append(indent + "VisibleString(" + ((DERVisibleString)obj).getString()+ ") "+ nl);
  }
 else   if (obj instanceof DERBMPString) {
    buf.append(indent + "BMPString(" + ((DERBMPString)obj).getString()+ ") "+ nl);
  }
 else   if (obj instanceof DERT61String) {
    buf.append(indent + "T61String(" + ((DERT61String)obj).getString()+ ") "+ nl);
  }
 else   if (obj instanceof ASN1UTCTime) {
    buf.append(indent + "UTCTime(" + ((ASN1UTCTime)obj).getTime()+ ") "+ nl);
  }
 else   if (obj instanceof ASN1GeneralizedTime) {
    buf.append(indent + "GeneralizedTime(" + ((ASN1GeneralizedTime)obj).getTime()+ ") "+ nl);
  }
 else   if (obj instanceof BERApplicationSpecific) {
    buf.append(outputApplicationSpecific("BER",indent,verbose,obj,nl));
  }
 else   if (obj instanceof DERApplicationSpecific) {
    buf.append(outputApplicationSpecific("DER",indent,verbose,obj,nl));
  }
 else   if (obj instanceof ASN1Enumerated) {
    ASN1Enumerated en=(ASN1Enumerated)obj;
    buf.append(indent + "DER Enumerated(" + en.getValue()+ ")"+ nl);
  }
 else   if (obj instanceof DERExternal) {
    DERExternal ext=(DERExternal)obj;
    buf.append(indent + "External " + nl);
    String tab=indent + TAB;
    if (ext.getDirectReference() != null) {
      buf.append(tab + "Direct Reference: " + ext.getDirectReference().getId()+ nl);
    }
    if (ext.getIndirectReference() != null) {
      buf.append(tab + "Indirect Reference: " + ext.getIndirectReference().toString()+ nl);
    }
    if (ext.getDataValueDescriptor() != null) {
      _dumpAsString(tab,verbose,ext.getDataValueDescriptor(),buf);
    }
    buf.append(tab + "Encoding: " + ext.getEncoding()+ nl);
    _dumpAsString(tab,verbose,ext.getExternalContent(),buf);
  }
 else {
    buf.append(indent + obj.toString() + nl);
  }
}
