{
  context().getTypingModule().onMessageSent(peer);
  return new Command<ResponseSeqDate>(){
    @Override public void start(    final CommandCallback<ResponseSeqDate> callback){
      ArrayList<Integer> mentions=new ArrayList<Integer>();
      TextContent content=TextContent.create(message,null,mentions);
      if (peer.getPeerType() == PeerType.GROUP) {
        Group group=groups().getValue(peer.getPeerId());
        String lowText=message.toLowerCase();
        for (        GroupMember member : group.getMembers()) {
          User user=users().getValue(member.getUid());
          if (user.getNick() != null) {
            String nick="@" + user.getNick().toLowerCase();
            if (lowText.contains(nick + ":") || lowText.contains(nick + " ") || lowText.contains(" " + nick)|| lowText.endsWith(nick)|| lowText.equals(nick)) {
              mentions.add(user.getUid());
            }
          }
        }
      }
      ApiMessage editMessage=new ApiTextMessage(message,((TextContent)content).getMentions(),((TextContent)content).getTextMessageEx());
      request(new RequestUpdateMessage(buidOutPeer(peer),rid,editMessage),new RpcCallback<ResponseSeqDate>(){
        @Override public void onResult(        ResponseSeqDate response){
          callback.onResult(response);
        }
        @Override public void onError(        RpcException e){
          callback.onError(e);
        }
      }
);
    }
  }
;
}
