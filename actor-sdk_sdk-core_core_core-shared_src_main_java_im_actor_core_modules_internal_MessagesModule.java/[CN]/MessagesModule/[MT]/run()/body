{
  this.dialogsActor=system().actorOf(Props.create(new ActorCreator(){
    @Override public DialogsActor create(){
      return new DialogsActor(context());
    }
  }
),"actor/dialogs");
  this.dialogsHistoryActor=system().actorOf(Props.create(new ActorCreator(){
    @Override public DialogsHistoryActor create(){
      return new DialogsHistoryActor(context());
    }
  }
),"actor/dialogs/history");
  this.dialogsGroupedActor=system().actorOf(Props.create(new ActorCreator(){
    @Override public GroupedDialogsActor create(){
      return new GroupedDialogsActor(context());
    }
  }
),"actor/dialogs/grouped");
  this.ownReadActor=system().actorOf(Props.create(new ActorCreator(){
    @Override public OwnReadActor create(){
      return new OwnReadActor(context());
    }
  }
),"actor/read/own");
  this.plainReadActor=system().actorOf(Props.create(new ActorCreator(){
    @Override public CursorReaderActor create(){
      return new CursorReaderActor(context());
    }
  }
).changeDispatcher("heavy"),"actor/plain/read");
  this.plainReceiverActor=system().actorOf(Props.create(new ActorCreator(){
    @Override public CursorReceiverActor create(){
      return new CursorReceiverActor(context());
    }
  }
).changeDispatcher("heavy"),"actor/plain/receive");
  this.sendMessageActor=system().actorOf(Props.create(new ActorCreator(){
    @Override public SenderActor create(){
      return new SenderActor(context());
    }
  }
),"actor/sender/small");
  this.deletionsActor=system().actorOf(Props.create(new ActorCreator(){
    @Override public MessageDeleteActor create(){
      return new MessageDeleteActor(context());
    }
  }
),"actor/deletions");
  context().getEvents().subscribe(this,PeerChatOpened.EVENT);
  context().getEvents().subscribe(this,PeerChatClosed.EVENT);
  context().getEvents().subscribe(this,AppVisibleChanged.EVENT);
}
