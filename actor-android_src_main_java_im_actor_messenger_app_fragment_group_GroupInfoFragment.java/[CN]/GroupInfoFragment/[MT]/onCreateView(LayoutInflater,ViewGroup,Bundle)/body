{
  chatId=getArguments().getInt(EXTRA_CHAT_ID);
  groupInfo=groups().get(chatId);
  View res=inflater.inflate(R.layout.fragment_group,container,false);
  listView=(ListView)res.findViewById(R.id.groupList);
  View header=inflater.inflate(R.layout.fragment_group_header,listView,false);
  avatarView=(CoverAvatarView)header.findViewById(R.id.avatar);
  bind(avatarView,groupInfo.getAvatar());
  avatarView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
    }
  }
);
  bind((TextView)header.findViewById(R.id.title),groupInfo.getName());
  TextView createdBy=(TextView)header.findViewById(R.id.createdBy);
  if (groupInfo.getCreatorId() == myUid()) {
    createdBy.setText(R.string.group_created_by_you);
  }
 else {
    UserVM admin=users().get(groupInfo.getCreatorId());
    createdBy.setText(getString(R.string.group_created_by).replace("{0}",admin.getName().get()));
  }
  header.findViewById(R.id.filesCont).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
    }
  }
);
  header.findViewById(R.id.sharedTitle).setVisibility(View.GONE);
  header.findViewById(R.id.sharedDiv).setVisibility(View.GONE);
  header.findViewById(R.id.filesCont).setVisibility(View.GONE);
  ((TextView)header.findViewById(R.id.membersCount)).setText(getString(R.string.group_members_count).replace("{0}",groupInfo.getMembersCount() + "").replace("{1}","300"));
  listView.addHeaderView(header,null,false);
  View add=inflater.inflate(R.layout.fragment_group_add,listView,false);
  add.findViewById(R.id.addUser).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      startActivityForResult(Intents.pickUser(getActivity()),0);
    }
  }
);
  listView.addFooterView(add,null,false);
  groupUserAdapter=new GroupUserAdapter(groupInfo.getMembers().get(),getActivity());
  bind(groupInfo.getMembers(),new ValueChangedListener<HashSet<GroupMember>>(){
    @Override public void onChanged(    HashSet<GroupMember> val,    ValueModel<HashSet<GroupMember>> valueModel){
      groupUserAdapter.updateUid(val);
    }
  }
);
  listView.setAdapter(groupUserAdapter);
  listView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      Object item=parent.getItemAtPosition(position);
      if (item != null && item instanceof UserVM) {
        final UserVM userModel=(UserVM)item;
        if (userModel.getId() == myUid()) {
          return;
        }
        new AlertDialog.Builder(getActivity()).setItems(new CharSequence[]{getString(R.string.group_context_message).replace("{0}",userModel.getName().get()),getString(R.string.group_context_call).replace("{0}",userModel.getName().get()),getString(R.string.group_context_view).replace("{0}",userModel.getName().get()),getString(R.string.group_context_remove).replace("{0}",userModel.getName().get())},new DialogInterface.OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            if (which == 0) {
              startActivity(Intents.openPrivateDialog(userModel.getId(),true,getActivity()));
            }
 else             if (which == 1) {
            }
 else             if (which == 2) {
              startActivity(Intents.openProfile(userModel.getId(),getActivity()));
            }
 else             if (which == 3) {
              new AlertDialog.Builder(getActivity()).setMessage(getString(R.string.alert_group_remove_text).replace("{0}",userModel.getName().get())).setPositiveButton(R.string.alert_group_remove_yes,new DialogInterface.OnClickListener(){
                @Override public void onClick(                DialogInterface dialog2,                int which){
                }
              }
).setNegativeButton(R.string.dialog_cancel,null).show().setCanceledOnTouchOutside(true);
            }
          }
        }
).show().setCanceledOnTouchOutside(true);
      }
    }
  }
);
  listView.setOnScrollListener(new AbsListView.OnScrollListener(){
    @Override public void onScrollStateChanged(    AbsListView view,    int scrollState){
    }
    @Override public void onScroll(    AbsListView view,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      if (firstVisibleItem >= 1) {
        updateBar(Integer.MAX_VALUE);
      }
 else {
        View top=listView.getChildAt(0);
        if (top != null) {
          updateBar(-top.getTop());
        }
 else {
          updateBar(Integer.MAX_VALUE);
        }
      }
    }
  }
);
  return res;
}
