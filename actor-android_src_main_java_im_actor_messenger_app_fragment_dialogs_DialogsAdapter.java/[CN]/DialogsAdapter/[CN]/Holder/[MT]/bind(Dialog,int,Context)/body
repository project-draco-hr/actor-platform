{
  if (binded != 0) {
    if (data.getPeer().getUnuqueId() != binded) {
      Log.d("ListDialogs","Bind new #" + position);
    }
 else {
      Log.d("ListDialogs","Bind updated #" + position);
    }
  }
 else {
    Log.d("ListDialogs","Bind fresh #" + position);
  }
  binded=data.getPeer().getUnuqueId();
  if (getEngine().getListState().getValue().getState() == ListState.State.LOADED) {
    if (position > getCount() - LOAD_GAP) {
      messenger().loadMoreDialogs();
    }
  }
  this.bindedItem=data;
  avatar.unbind();
  avatar.setEmptyDrawable(AvatarDrawable.create(data,24,context));
  if (data.getDialogAvatar() != null && data.getDialogAvatar().getSmallImage() != null) {
    avatar.bindAvatar(54,data.getDialogAvatar());
  }
  if (data.getUnreadCount() > 0) {
    counter.setText("" + data.getUnreadCount());
    counter.setVisibility(View.VISIBLE);
  }
 else {
    counter.setVisibility(View.GONE);
  }
  title.setText(data.getDialogTitle());
  int right=0;
  int left=0;
  if (data.getPeer().getPeerType() == PeerType.GROUP) {
    left=R.drawable.dialogs_group;
  }
  title.setCompoundDrawablesWithIntrinsicBounds(left,0,right,0);
  time.setText(Formatter.formatShortDate(data.getSortDate()));
  boolean isGroup=data.getPeer().getPeerType() == PeerType.GROUP;
  if (data.getMessageType() == ContentType.TEXT) {
    bindedText=MessageTextFormatter.textMessage(data.getSenderId(),isGroup,data.getText());
  }
 else   if (data.getMessageType() == ContentType.DOCUMENT_PHOTO) {
    bindedText=MessageTextFormatter.photoMessage(data.getSenderId(),isGroup);
  }
 else   if (data.getMessageType() == ContentType.DOCUMENT_VIDEO) {
    bindedText=MessageTextFormatter.videoMessage(data.getSenderId(),isGroup);
  }
 else   if (data.getMessageType() == ContentType.DOCUMENT) {
    bindedText=MessageTextFormatter.documentMessage(data.getSenderId(),isGroup);
  }
 else   if (data.getMessageType() == ContentType.SERVICE_REGISTERED) {
    bindedText=MessageTextFormatter.joinedActor(data.getSenderId());
  }
 else   if (data.getMessageType() == ContentType.SERVICE_CREATED) {
    bindedText=MessageTextFormatter.groupCreated(data.getSenderId());
  }
 else   if (data.getMessageType() == ContentType.SERVICE_LEAVE) {
    bindedText=MessageTextFormatter.groupLeave(data.getSenderId());
  }
 else   if (data.getMessageType() == ContentType.SERVICE_ADD) {
    bindedText=MessageTextFormatter.groupAdd(data.getSenderId(),data.getRelatedUid());
  }
 else   if (data.getMessageType() == ContentType.SERVICE_KICK) {
    bindedText=MessageTextFormatter.groupKicked(data.getSenderId(),data.getRelatedUid());
  }
 else   if (data.getMessageType() == ContentType.SERVICE_TITLE) {
    bindedText=MessageTextFormatter.groupChangeTitle(data.getSenderId());
  }
 else   if (data.getMessageType() == ContentType.SERVICE_AVATAR) {
    bindedText=MessageTextFormatter.groupChangeAvatar(data.getSenderId());
  }
 else   if (data.getMessageType() == ContentType.SERVICE_AVATAR_REMOVED) {
    bindedText=MessageTextFormatter.groupRemoveAvatar(data.getSenderId());
  }
 else {
    bindedText="";
  }
  if (privateTypingListener != null) {
    privateTypingListener=null;
  }
  if (groupTypingListener != null) {
    groupTypingListener=null;
  }
  text.setText(bindedText);
  text.setTextColor(getContext().getResources().getColor(R.color.text_primary));
  if (data.getPeer().getPeerType() == PeerType.PRIVATE) {
    bindedUid=data.getPeer().getPeerId();
    privateTypingListener=new ValueChangeListener<Boolean>(){
      @Override public void onChanged(      Boolean value){
        if (value) {
          text.setText(R.string.typing_private);
          text.setTextColor(context.getResources().getColor(R.color.primary));
        }
 else {
          text.setText(bindedText);
          text.setTextColor(getContext().getResources().getColor(R.color.text_primary));
        }
      }
    }
;
  }
 else   if (data.getPeer().getPeerType() == PeerType.GROUP) {
    bindedGid=data.getPeer().getPeerId();
    groupTypingListener=new ValueChangeListener<int[]>(){
      @Override public void onChanged(      int[] value){
        if (value.length != 0) {
          text.setText(Formatter.formatTyping(value));
          text.setTextColor(context.getResources().getColor(R.color.primary));
        }
 else {
          text.setText(bindedText);
          text.setTextColor(getContext().getResources().getColor(R.color.text_primary));
        }
      }
    }
;
  }
 else {
    text.setText(bindedText);
    text.setTextColor(getContext().getResources().getColor(R.color.text_primary));
  }
  if (data.getSenderId() != myUid()) {
    state.setVisibility(View.GONE);
  }
 else {
switch (data.getStatus()) {
default :
case PENDING:
      state.setResource(R.drawable.msg_clock);
    state.setTint(pendingColor);
  break;
case SENT:
state.setResource(R.drawable.msg_check_1);
state.setTint(sentColor);
break;
case RECEIVED:
state.setResource(R.drawable.msg_check_2);
state.setTint(receivedColor);
break;
case READ:
state.setResource(R.drawable.msg_check_2);
state.setTint(readColor);
break;
case ERROR:
state.setResource(R.drawable.msg_error);
state.setTint(errorColor);
break;
}
state.setVisibility(View.VISIBLE);
}
if (position == getCount() - 1) {
separator.setVisibility(View.GONE);
}
 else {
separator.setVisibility(View.VISIBLE);
}
}
