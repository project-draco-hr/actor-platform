{
  this.container=container;
  manager=(NotificationManager)getActivity().getSystemService(Context.NOTIFICATION_SERVICE);
  FrameLayout cont=(FrameLayout)inflater.inflate(R.layout.fragment_call,container,false);
  v=(Vibrator)getActivity().getSystemService(Context.VIBRATOR_SERVICE);
  CallBackgroundAvatarView backgroundAvatarView=(CallBackgroundAvatarView)cont.findViewById(R.id.background);
  layer1=cont.findViewById(R.id.layer1);
  layer2=cont.findViewById(R.id.layer2);
  layer3=cont.findViewById(R.id.layer3);
  avatarLayers=new View[]{layer1,layer2,layer3};
  for (int i=0; i < avatarLayers.length; i++) {
    View layer=avatarLayers[i];
    ((GradientDrawable)layer.getBackground()).setColor(Color.WHITE);
    ((GradientDrawable)layer.getBackground()).setAlpha(50);
  }
  endCallContainer=cont.findViewById(R.id.end_call_container);
  answerContainer=cont.findViewById(R.id.answer_container);
  ImageButton answer=(ImageButton)cont.findViewById(R.id.answer);
  answer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      onAnswer();
    }
  }
);
  ImageButton notAnswer=(ImageButton)cont.findViewById(R.id.notAnswer);
  endCall=(ImageButton)cont.findViewById(R.id.end_call);
  notAnswer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      doEndCall();
    }
  }
);
  endCall.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      doEndCall();
    }
  }
);
  avatarView=(AvatarView)cont.findViewById(R.id.avatar);
  avatarView.init(Screen.dp(130),50);
  TextView nameTV=(TextView)cont.findViewById(R.id.name);
  nameTV.setTextColor(ActorSDK.sharedActor().style.getProfileTitleColor());
  if (peer.getPeerType() == PeerType.PRIVATE) {
    UserVM user=users().get(peer.getPeerId());
    avatarView.bind(user);
    backgroundAvatarView.bind(user);
    bind(nameTV,user.getName());
  }
 else   if (peer.getPeerType() == PeerType.GROUP) {
    GroupVM g=groups().get(peer.getPeerId());
    avatarView.bind(g);
    backgroundAvatarView.bind(g);
    bind(nameTV,g.getName());
  }
  nameTV.setSelected(true);
  membersList=(RecyclerListView)cont.findViewById(R.id.members_list);
  if (call != null) {
    CallMembersAdapter membersAdapter=new CallMembersAdapter(getActivity(),call.getMembers());
    membersList.setAdapter(membersAdapter);
  }
  View.OnClickListener listener=new View.OnClickListener(){
    @Override public void onClick(    View v){
      switchAvatarMembers();
    }
  }
;
  avatarView.setOnClickListener(listener);
  membersList.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      switchAvatarMembers();
    }
  }
);
  statusTV=(TextView)cont.findViewById(R.id.status);
  if (ContextCompat.checkSelfPermission(getActivity(),Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED || ContextCompat.checkSelfPermission(getActivity(),Manifest.permission.VIBRATE) != PackageManager.PERMISSION_GRANTED || ContextCompat.checkSelfPermission(getActivity(),Manifest.permission.MODIFY_AUDIO_SETTINGS) != PackageManager.PERMISSION_GRANTED || ContextCompat.checkSelfPermission(getActivity(),Manifest.permission.WAKE_LOCK) != PackageManager.PERMISSION_GRANTED) {
    Log.d("Permissions","call - no permission :c");
    CallFragment.this.requestPermissions(new String[]{Manifest.permission.RECORD_AUDIO,Manifest.permission.VIBRATE,Manifest.permission.MODIFY_AUDIO_SETTINGS,Manifest.permission.WAKE_LOCK},PERMISSIONS_REQUEST_FOR_CALL);
  }
  audioManager=(AudioManager)getActivity().getSystemService(Context.AUDIO_SERVICE);
  audioManager.getStreamVolume(AudioManager.STREAM_VOICE_CALL);
  speaker=(TintImageView)cont.findViewById(R.id.speaker);
  speaker.setResource(R.drawable.ic_volume_up_white_24dp);
  speakerTV=(TextView)cont.findViewById(R.id.speaker_tv);
  cont.findViewById(R.id.speaker_btn).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      toggleSpeaker(speaker,speakerTV);
    }
  }
);
  checkSpeaker(speaker,speakerTV);
  muteCall=(TintImageView)cont.findViewById(R.id.mute);
  muteCallTv=(TextView)cont.findViewById(R.id.mute_tv);
  muteCall.setResource(R.drawable.ic_mic_off_white_24dp);
  cont.findViewById(R.id.mute_btn).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      messenger().toggleCallMute(callId);
    }
  }
);
  videoIcon=(TintImageView)cont.findViewById(R.id.video);
  videoIcon.setResource(R.drawable.ic_videocam_white_24dp);
  videoTv=(TextView)cont.findViewById(R.id.video_tv);
  videoTv.setTextColor(getResources().getColor(R.color.picker_grey));
  videoIcon.setTint(getResources().getColor(R.color.picker_grey));
  cont.findViewById(R.id.video_btn).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      messenger().toggleVideoEnabled(callId);
    }
  }
);
  final TintImageView back=(TintImageView)cont.findViewById(R.id.back);
  back.setResource(R.drawable.ic_message_white_24dp);
  cont.findViewById(R.id.back_btn).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      getActivity().onBackPressed();
    }
  }
);
  final TintImageView add=(TintImageView)cont.findViewById(R.id.add);
  add.setResource(R.drawable.ic_person_add_white_24dp);
  TextView addTv=(TextView)cont.findViewById(R.id.add_user_tv);
  addTv.setTextColor(getResources().getColor(R.color.picker_grey));
  add.setTint(getResources().getColor(R.color.picker_grey));
  if (peer.getPeerType() == PeerType.PRIVATE && ActorSDK.sharedActor().isVideoCallsEnabled()) {
    rootEglBase=EglBase.create();
    remoteVideoView=(SurfaceViewRenderer)cont.findViewById(R.id.remote_renderer);
    remoteVideoView.init(rootEglBase.getEglBaseContext(),null);
    localVideoView=new SurfaceViewRenderer(getActivity());
    localVideoView.setVisibility(View.INVISIBLE);
    localVideoView.setZOrderMediaOverlay(true);
    localVideoView.init(rootEglBase.getEglBaseContext(),null);
    localVideoView.setOnTouchListener(new View.OnTouchListener(){
      @Override public boolean onTouch(      View v,      MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
          dX=localVideoView.getX() - event.getRawX();
        dY=localVideoView.getY() - event.getRawY();
      break;
case MotionEvent.ACTION_MOVE:
    localVideoView.animate().x(event.getRawX() + dX).y(event.getRawY() + dY).setDuration(0).start();
default :
  return false;
}
return true;
}
}
);
int margin=Screen.dp(20);
int localVideoWidth=Screen.getWidth() / 3 - margin;
FrameLayout.LayoutParams params=new FrameLayout.LayoutParams(localVideoWidth,Math.round(localVideoWidth / 1.5f),Gravity.TOP | Gravity.LEFT);
int statusBarHeight=0;
int resourceId=getResources().getIdentifier("status_bar_height","dimen","android");
if (resourceId > 0) {
statusBarHeight=getResources().getDimensionPixelSize(resourceId);
}
params.setMargins(margin,margin + statusBarHeight,0,0);
cont.addView(localVideoView,params);
webRTCPeerConnectionCallback=new WebRTCPeerConnectionCallback(){
@Override public void onCandidate(int label,String id,String candidate){
}
@Override public void onStreamAdded(WebRTCMediaStream remoteStream){
AndroidMediaStream stream=(AndroidMediaStream)remoteStream;
if (stream.getVideoTrack() != null) {
getActivity().runOnUiThread(new Runnable(){
  @Override public void run(){
    remoteRender=new VideoRenderer(remoteVideoView);
    stream.getVideoTrack().addRenderer(remoteRender);
    remoteVideoView.setVisibility(View.VISIBLE);
    avatarView.setVisibility(View.INVISIBLE);
    nameTV.setVisibility(View.INVISIBLE);
  }
}
);
}
}
@Override public void onStreamRemoved(WebRTCMediaStream stream){
}
@Override public void onOwnStreamAdded(WebRTCMediaStream ownStream){
AndroidMediaStream stream=(AndroidMediaStream)ownStream;
if (stream.getVideoTrack() != null) {
getActivity().runOnUiThread(new Runnable(){
  @Override public void run(){
    source=stream.getVideoSource();
    localRender=new VideoRenderer(localVideoView);
    stream.getVideoTrack().addRenderer(localRender);
    localVideoView.setVisibility(View.VISIBLE);
  }
}
);
}
}
@Override public void onOwnStreamRemoved(WebRTCMediaStream stream){
}
@Override public void onRenegotiationNeeded(){
}
@Override public void onDisposed(){
if (localVideoView != null) {
localVideoView.release();
}
if (remoteVideoView != null) {
remoteVideoView.release();
}
}
}
;
}
 else {
if (call != null) {
if (call.getIsVideoEnabled().get()) {
messenger().toggleVideoEnabled(callId);
}
}
}
return cont;
}
