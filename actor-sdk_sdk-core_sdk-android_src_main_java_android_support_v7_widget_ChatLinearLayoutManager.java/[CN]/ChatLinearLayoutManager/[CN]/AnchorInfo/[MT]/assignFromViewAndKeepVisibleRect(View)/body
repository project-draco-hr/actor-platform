{
  final int spaceChange=mOrientationHelper.getTotalSpaceChange();
  if (spaceChange >= 0) {
    assignFromView(child);
    return;
  }
  mPosition=getPosition(child);
  if (mLayoutFromEnd) {
    final int prevLayoutEnd=mOrientationHelper.getEndAfterPadding() - spaceChange;
    final int childEnd=mOrientationHelper.getDecoratedEnd(child);
    final int previousEndMargin=prevLayoutEnd - childEnd;
    mCoordinate=mOrientationHelper.getEndAfterPadding() - previousEndMargin;
    if (previousEndMargin > 0) {
      final int childSize=mOrientationHelper.getDecoratedMeasurement(child);
      final int estimatedChildStart=mCoordinate - childSize;
      final int layoutStart=mOrientationHelper.getStartAfterPadding();
      final int previousStartMargin=mOrientationHelper.getDecoratedStart(child) - layoutStart;
      final int startReference=layoutStart + Math.min(previousStartMargin,0);
      final int startMargin=estimatedChildStart - startReference;
      if (startMargin < 0) {
        mCoordinate+=Math.min(previousEndMargin,-startMargin);
      }
    }
  }
 else {
    final int childStart=mOrientationHelper.getDecoratedStart(child);
    final int startMargin=childStart - mOrientationHelper.getStartAfterPadding();
    mCoordinate=childStart;
    if (startMargin > 0) {
      final int estimatedEnd=childStart + mOrientationHelper.getDecoratedMeasurement(child);
      final int previousLayoutEnd=mOrientationHelper.getEndAfterPadding() - spaceChange;
      final int previousEndMargin=previousLayoutEnd - mOrientationHelper.getDecoratedEnd(child);
      final int endReference=mOrientationHelper.getEndAfterPadding() - Math.min(0,previousEndMargin);
      final int endMargin=endReference - estimatedEnd;
      if (endMargin < 0) {
        mCoordinate-=Math.min(startMargin,-endMargin);
      }
    }
  }
}
