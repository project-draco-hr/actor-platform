{
  mLayoutState.mExtra=getExtraLayoutSpace(state);
  mLayoutState.mLayoutDirection=layoutDirection;
  int fastScrollSpace;
  if (layoutDirection == LayoutState.LAYOUT_END) {
    mLayoutState.mExtra+=mOrientationHelper.getEndPadding();
    final View child=getChildClosestToEnd();
    mLayoutState.mItemDirection=mShouldReverseLayout ? LayoutState.ITEM_DIRECTION_HEAD : LayoutState.ITEM_DIRECTION_TAIL;
    mLayoutState.mCurrentPosition=getPosition(child) + mLayoutState.mItemDirection;
    mLayoutState.mOffset=mOrientationHelper.getDecoratedEnd(child);
    fastScrollSpace=mOrientationHelper.getDecoratedEnd(child) - mOrientationHelper.getEndAfterPadding();
  }
 else {
    final View child=getChildClosestToStart();
    mLayoutState.mExtra+=mOrientationHelper.getStartAfterPadding();
    mLayoutState.mItemDirection=mShouldReverseLayout ? LayoutState.ITEM_DIRECTION_TAIL : LayoutState.ITEM_DIRECTION_HEAD;
    mLayoutState.mCurrentPosition=getPosition(child) + mLayoutState.mItemDirection;
    mLayoutState.mOffset=mOrientationHelper.getDecoratedStart(child);
    fastScrollSpace=-mOrientationHelper.getDecoratedStart(child) + mOrientationHelper.getStartAfterPadding();
  }
  mLayoutState.mAvailable=requiredSpace;
  if (canUseExistingSpace) {
    mLayoutState.mAvailable-=fastScrollSpace;
  }
  mLayoutState.mScrollingOffset=fastScrollSpace;
}
