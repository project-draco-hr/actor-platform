{
  int[] mont_x=new int[10];
  int[] mont_x_minus_one=new int[10];
  int[] mont_x_plus_one=new int[10];
  int[] inv_mont_x_plus_one=new int[10];
  int[] one=new int[10];
  int[] ed_y=new int[10];
  byte[] ed_pubkey=new byte[32];
  long some_retval=0;
  byte[] verifybuf=new byte[MAX_MSG_LEN + 64];
  byte[] verifybuf2=new byte[MAX_MSG_LEN + 64];
  if (msg_len > MAX_MSG_LEN) {
    return -1;
  }
  fe_frombytes.fe_frombytes(mont_x,curve25519_pubkey);
  fe_1.fe_1(one);
  fe_sub.fe_sub(mont_x_minus_one,mont_x,one);
  fe_add.fe_add(mont_x_plus_one,mont_x,one);
  fe_invert.fe_invert(inv_mont_x_plus_one,mont_x_plus_one);
  fe_mul.fe_mul(ed_y,mont_x_minus_one,inv_mont_x_plus_one);
  fe_tobytes.fe_tobytes(ed_pubkey,ed_y);
  ed_pubkey[31]&=0x7F;
  ed_pubkey[31]|=(signature[63] & 0x80);
  System.arraycopy(signature,0,verifybuf,0,64);
  verifybuf[63]&=0x7F;
  System.arraycopy(msg,0,verifybuf,64,(int)msg_len);
  return open.crypto_sign_open(sha512provider,verifybuf2,some_retval,verifybuf,64 + msg_len,ed_pubkey);
}
