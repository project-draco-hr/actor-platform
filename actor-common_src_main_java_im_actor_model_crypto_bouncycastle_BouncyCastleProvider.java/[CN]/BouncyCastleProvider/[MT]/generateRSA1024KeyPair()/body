{
  RSAKeyPairGenerator generator=new RSAKeyPairGenerator();
  generator.init(new RSAKeyGenerationParameters(RSA_EXPONENT,new SecureRandom(),RSA_1024_STREIGHT,RSA_CERTAINITY));
  AsymmetricCipherKeyPair res=generator.generateKeyPair();
  byte[] publicKey;
  try {
    RSAKeyParameters rsaPublicKey=(RSAKeyParameters)res.getPublic();
    SubjectPublicKeyInfo info=new SubjectPublicKeyInfo(new AlgorithmIdentifier(PKCSObjectIdentifiers.rsaEncryption,DERNull.INSTANCE),new RSAPublicKey(rsaPublicKey.getModulus(),rsaPublicKey.getExponent()));
    publicKey=info.getEncoded(ASN1Encoding.DER);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
  RSAPrivateCrtKeyParameters parameter=(RSAPrivateCrtKeyParameters)res.getPrivate();
  org.bouncycastle.asn1.pkcs.RSAPrivateKey pksPrivateKey=new org.bouncycastle.asn1.pkcs.RSAPrivateKey(parameter.getModulus(),ZERO,parameter.getExponent(),ZERO,ZERO,ZERO,ZERO,ZERO);
  byte[] privateKey;
  try {
    PrivateKeyInfo info=new PrivateKeyInfo(new AlgorithmIdentifier(PKCSObjectIdentifiers.rsaEncryption,DERNull.INSTANCE),pksPrivateKey.toASN1Primitive());
    privateKey=info.getEncoded(ASN1Encoding.DER);
  }
 catch (  IOException e) {
    e.printStackTrace();
    return null;
  }
  return new CryptoKeyPair(publicKey,privateKey);
}
