{
  if (currentTasks.containsKey(gid)) {
    context().getFilesModule().cancelUpload(currentTasks.get(gid));
    currentTasks.remove(gid);
  }
  final long rid=RandomUtils.nextRid();
  currentTasks.put(gid,rid);
  tasksMap.put(rid,gid);
  Group group=context().getGroupsModule().getGroups().getValue(gid);
  ApiGroupOutPeer outPeer=new ApiGroupOutPeer(gid,group.getAccessHash());
  context().getProfileModule().getOwnAvatarVM().getUploadState().change(new AvatarUploadState(null,true));
  request(new RequestRemoveGroupAvatar(outPeer,rid),new RpcCallback<ResponseSeqDate>(){
    @Override public void onResult(    ResponseSeqDate response){
      updates().onSeqUpdateReceived(response.getSeq(),response.getState(),new UpdateGroupAvatarChanged(gid,rid,myUid(),null,response.getDate()));
      updates().onUpdateReceived(new ExecuteAfter(response.getSeq(),new Runnable(){
        @Override public void run(){
          self().send(new AvatarChanged(gid,rid));
        }
      }
));
    }
    @Override public void onError(    RpcException e){
      if (!tasksMap.containsKey(rid)) {
        return;
      }
      final int gid=tasksMap.get(rid);
      if (currentTasks.get(gid) != rid) {
        return;
      }
      currentTasks.remove(gid);
      tasksMap.remove(rid);
      context().getGroupsModule().getAvatarVM(gid).getUploadState().change(new AvatarUploadState(null,false));
    }
  }
);
}
