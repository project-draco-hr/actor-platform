{
  this.query=null;
  if (fast) {
    this.listState.change(new ListState(ListState.State.LOADING_EMPTY));
    listWindow.startInitForward();
    final long start=System.currentTimeMillis();
    final Object[] result=new Object[2];
    listEngine.loadTailInitial(loadLimit,new LoadCallback<V>(){
      @Override public void onLoaded(      List<V> res,      Object nextRef){
synchronized (result) {
          result[0]=res;
          result[1]=nextRef;
          result.notify();
        }
      }
    }
);
synchronized (result) {
      if (result[0] == null) {
        try {
          result.wait();
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
          return;
        }
      }
    }
    List<V> res=(List<V>)result[0];
    Object nextRef=result[1];
    uiList.setList(listMods.replace(res));
    listWindow.stopInitForward(nextRef);
    if (res.size() == 0) {
      listState.change(new ListState(ListState.State.LOADED_EMPTY));
      listWindow.onTailCompleted();
    }
 else {
      listState.change(new ListState(ListState.State.LOADED));
    }
  }
 else {
    this.listState.change(new ListState(ListState.State.LOADING_EMPTY));
    listWindow.startInitForward();
    final long start=System.currentTimeMillis();
    listEngine.loadTailInitial(loadLimit,new LoadCallback<V>(){
      @Override public void onLoaded(      List<V> res,      Object nextRef){
        uiList.editList(listMods.replace(res));
        listWindow.stopInitForward(nextRef);
        if (res.size() == 0) {
          listState.change(new ListState(ListState.State.LOADED_EMPTY));
          listWindow.onTailCompleted();
        }
 else {
          listState.change(new ListState(ListState.State.LOADED));
        }
      }
    }
);
  }
}
