{
  if (DEBUG) {
    Log.d(TAG,"is pre layout:" + state.isPreLayout());
  }
  if (mPendingSavedState != null && mPendingSavedState.hasValidAnchor()) {
    mPendingScrollPosition=mPendingSavedState.mAnchorPosition;
  }
  ensureLayoutState();
  mLayoutState.mRecycle=false;
  resolveShouldLayoutReverse();
  mAnchorInfo.reset();
  mAnchorInfo.mLayoutFromEnd=mShouldReverseLayout ^ mStackFromEnd;
  updateAnchorInfoForLayout(state,mAnchorInfo);
  if (DEBUG) {
    Log.d(TAG,"Anchor info:" + mAnchorInfo);
  }
  int extraForStart;
  int extraForEnd;
  final int extra=getExtraLayoutSpace(state);
  if (mLayoutState.mLastScrollDelta >= 0) {
    extraForEnd=extra;
    extraForStart=0;
  }
 else {
    extraForStart=extra;
    extraForEnd=0;
  }
  extraForStart+=mOrientationHelper.getStartAfterPadding();
  extraForEnd+=mOrientationHelper.getEndPadding();
  if (state.isPreLayout() && mPendingScrollPosition != NO_POSITION && mPendingScrollPositionOffset != INVALID_OFFSET) {
    final View existing=findViewByPosition(mPendingScrollPosition);
    if (existing != null) {
      final int current;
      final int upcomingOffset;
      if (mShouldReverseLayout) {
        current=mOrientationHelper.getEndAfterPadding() - mOrientationHelper.getDecoratedEnd(existing);
        upcomingOffset=current - mPendingScrollPositionOffset;
      }
 else {
        current=mOrientationHelper.getDecoratedStart(existing) - mOrientationHelper.getStartAfterPadding();
        upcomingOffset=mPendingScrollPositionOffset - current;
      }
      if (upcomingOffset > 0) {
        extraForStart+=upcomingOffset;
      }
 else {
        extraForEnd-=upcomingOffset;
      }
    }
  }
  int startOffset;
  int endOffset;
  onAnchorReady(state,mAnchorInfo);
  detachAndScrapAttachedViews(recycler);
  mLayoutState.mIsPreLayout=state.isPreLayout();
  if (mAnchorInfo.mLayoutFromEnd) {
    updateLayoutStateToFillStart(mAnchorInfo);
    mLayoutState.mExtra=extraForStart;
    fill(recycler,mLayoutState,state,false);
    startOffset=mLayoutState.mOffset;
    final int firstElement=mLayoutState.mCurrentPosition;
    if (mLayoutState.mAvailable > 0) {
      extraForEnd+=mLayoutState.mAvailable;
    }
    updateLayoutStateToFillEnd(mAnchorInfo);
    mLayoutState.mExtra=extraForEnd;
    mLayoutState.mCurrentPosition+=mLayoutState.mItemDirection;
    fill(recycler,mLayoutState,state,false);
    endOffset=mLayoutState.mOffset;
    if (mLayoutState.mAvailable > 0) {
      extraForStart=mLayoutState.mAvailable;
      updateLayoutStateToFillStart(firstElement,startOffset);
      mLayoutState.mExtra=extraForStart;
      fill(recycler,mLayoutState,state,false);
      startOffset=mLayoutState.mOffset;
    }
  }
 else {
    updateLayoutStateToFillEnd(mAnchorInfo);
    mLayoutState.mExtra=extraForEnd;
    fill(recycler,mLayoutState,state,false);
    endOffset=mLayoutState.mOffset;
    final int lastElement=mLayoutState.mCurrentPosition;
    if (mLayoutState.mAvailable > 0) {
      extraForStart+=mLayoutState.mAvailable;
    }
    updateLayoutStateToFillStart(mAnchorInfo);
    mLayoutState.mExtra=extraForStart;
    mLayoutState.mCurrentPosition+=mLayoutState.mItemDirection;
    fill(recycler,mLayoutState,state,false);
    startOffset=mLayoutState.mOffset;
    if (mLayoutState.mAvailable > 0) {
      extraForEnd=mLayoutState.mAvailable;
      updateLayoutStateToFillEnd(lastElement,endOffset);
      mLayoutState.mExtra=extraForEnd;
      fill(recycler,mLayoutState,state,false);
      endOffset=mLayoutState.mOffset;
    }
  }
  if (getChildCount() > 0) {
    if (mShouldReverseLayout ^ mStackFromEnd) {
      int fixOffset=fixLayoutEndGap(endOffset,recycler,state,true);
      startOffset+=fixOffset;
      endOffset+=fixOffset;
      fixOffset=fixLayoutStartGap(startOffset,recycler,state,false);
      startOffset+=fixOffset;
      endOffset+=fixOffset;
    }
 else {
      int fixOffset=fixLayoutStartGap(startOffset,recycler,state,true);
      startOffset+=fixOffset;
      endOffset+=fixOffset;
      fixOffset=fixLayoutEndGap(endOffset,recycler,state,false);
      startOffset+=fixOffset;
      endOffset+=fixOffset;
    }
  }
  layoutForPredictiveAnimations(recycler,state,startOffset,endOffset);
  if (!state.isPreLayout()) {
    mPendingScrollPosition=NO_POSITION;
    mPendingScrollPositionOffset=INVALID_OFFSET;
    mOrientationHelper.onLayoutComplete();
  }
  mLastStackFromEnd=mStackFromEnd;
  mPendingSavedState=null;
  if (DEBUG) {
    validateChildOrder();
  }
}
