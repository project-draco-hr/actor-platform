{
  ArrayList<Message> messages=new ArrayList<>();
  long maxLoadedDate=Long.MAX_VALUE;
  long maxReadDate=0;
  long maxReceiveDate=0;
  for (  ApiMessageContainer historyMessage : history) {
    AbsContent content=AbsContent.fromMessage(historyMessage.getMessage());
    MessageState state=EntityConverter.convert(historyMessage.getState());
    ArrayList<Reaction> reactions=new ArrayList<>();
    for (    ApiMessageReaction r : historyMessage.getReactions()) {
      reactions.add(new Reaction(r.getCode(),r.getUsers()));
    }
    messages.add(new Message(historyMessage.getRid(),historyMessage.getDate(),historyMessage.getDate(),historyMessage.getSenderUid(),state,content,reactions,0));
    maxLoadedDate=Math.min(historyMessage.getDate(),maxLoadedDate);
    if (historyMessage.getState() == ApiMessageState.RECEIVED) {
      maxReceiveDate=Math.max(historyMessage.getDate(),maxReceiveDate);
    }
 else     if (historyMessage.getState() == ApiMessageState.READ) {
      maxReceiveDate=Math.max(historyMessage.getDate(),maxReceiveDate);
      maxReadDate=Math.max(historyMessage.getDate(),maxReadDate);
    }
  }
  boolean isEnded=history.size() < LIMIT;
  context().getMessagesModule().getRouter().onChatHistoryLoaded(peer,messages,maxReceiveDate,maxReadDate,isEnded);
  if (isEnded) {
    historyLoaded=true;
  }
 else {
    historyLoaded=false;
    historyMaxDate=maxLoadedDate;
  }
  preferences().putLong(KEY_LOADED_DATE,maxLoadedDate);
  preferences().putBool(KEY_LOADED,historyLoaded);
  preferences().putBool(KEY_LOADED_INIT,true);
}
