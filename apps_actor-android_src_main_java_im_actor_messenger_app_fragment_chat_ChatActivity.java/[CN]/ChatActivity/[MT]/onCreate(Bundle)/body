{
  super.onCreate(saveInstance);
  if (saveInstance != null) {
    fileName=saveInstance.getString("pending_file_name",null);
  }
  keyboardUtils=new KeyboardHelper(this);
  peer=Peer.fromUniqueId(getIntent().getExtras().getLong(Intents.EXTRA_CHAT_PEER));
  isCompose=saveInstance == null && getIntent().getExtras().getBoolean(Intents.EXTRA_CHAT_COMPOSE,false);
  messenger=messenger();
  getSupportActionBar().setDisplayShowCustomEnabled(true);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  getSupportActionBar().setDisplayShowHomeEnabled(true);
  getSupportActionBar().setDisplayShowTitleEnabled(false);
  getSupportActionBar().setDisplayUseLogoEnabled(false);
  barView=LayoutInflater.from(this).inflate(R.layout.bar_conversation,null);
  barTitle=(TextView)barView.findViewById(R.id.title);
  barSubtitleContainer=barView.findViewById(R.id.subtitleContainer);
  barTypingIcon=(ImageView)barView.findViewById(R.id.typingImage);
  barTypingIcon.setImageDrawable(new TypingDrawable());
  barTyping=(TextView)barView.findViewById(R.id.typing);
  barSubtitle=(TextView)barView.findViewById(R.id.subtitle);
  barTypingContainer=barView.findViewById(R.id.typingContainer);
  barTypingContainer.setVisibility(View.INVISIBLE);
  barAvatar=(AvatarView)barView.findViewById(R.id.avatarPreview);
  barAvatar.init(Screen.dp(32),18);
  ActionBar.LayoutParams layout=new ActionBar.LayoutParams(ActionBar.LayoutParams.MATCH_PARENT,ActionBar.LayoutParams.MATCH_PARENT);
  getSupportActionBar().setCustomView(barView,layout);
  barView.findViewById(R.id.titleContainer).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (peer.getPeerType() == PeerType.PRIVATE) {
        startActivity(Intents.openProfile(peer.getPeerId(),ChatActivity.this));
      }
 else       if (peer.getPeerType() == PeerType.GROUP) {
        startActivity(Intents.openGroup(peer.getPeerId(),ChatActivity.this));
      }
 else {
      }
    }
  }
);
  setContentView(R.layout.activity_dialog);
  getWindow().setBackgroundDrawable(null);
  if (saveInstance == null) {
    getSupportFragmentManager().beginTransaction().add(R.id.messagesFragment,MessagesFragment.create(peer)).commit();
  }
  messageBody=(SelectionListenerEdittext)findViewById(R.id.et_message);
  messageBody.addTextChangedListener(new TextWatcher(){
    boolean mentionErase;
    int mentionEraseStart;
    int eraseStart;
    int eraseCount;
    boolean isErase;
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
      if (after > count && !isTypingDisabled) {
        messenger.onTyping(peer);
      }
      isErase=after < count;
      isOneCharErase=isErase && count == 1;
      if (isOneCharErase)       eraseStart=start;
      mentionErase=isOneCharErase && count == 1 && s.charAt(start) == MENTION_BOUNDS_CHR;
      if (mentionErase)       mentionEraseStart=start;
      eraseCount=count;
    }
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
      String str=s.toString();
      String firstPeace=str.substring(0,start + count);
      if (peer.getPeerType() == PeerType.GROUP) {
        if (count == 1 && s.charAt(start) == '@') {
          showMentions(false);
          forceMentionHide=false;
          mentionSearchString="";
        }
 else         if (!forceMentionHide && firstPeace.contains("@")) {
          showMentions(true);
        }
 else {
          hideMentions();
        }
        mentionStart=firstPeace.lastIndexOf("@");
        if (s.length() != count) {
          if (firstPeace.contains("@") && mentionStart + 1 < firstPeace.length()) {
            mentionSearchString=firstPeace.substring(mentionStart + 1,firstPeace.length());
          }
 else {
            mentionSearchString="";
          }
          if (mentionSearchString.equals(" ")) {
            hideMentions();
          }
 else           if (mentionsAdapter != null) {
            mentionsAdapter.setQuery(mentionSearchString.toLowerCase());
          }
        }
      }
    }
    @Override public void afterTextChanged(    Editable s){
      if (s.length() > 0) {
        sendButton.setTint(getResources().getColor(R.color.conv_send_enabled));
        sendButton.setEnabled(true);
      }
 else {
        sendButton.setTint(getResources().getColor(R.color.conv_send_disabled));
        sendButton.setEnabled(false);
      }
      int escapeMentionEdit=s.toString().indexOf(" ".concat(MENTION_BOUNDS_STR));
      if (!isOneCharErase && escapeMentionEdit != -1) {
        s.replace(escapeMentionEdit,escapeMentionEdit + 2,MENTION_BOUNDS_STR.concat(" "));
        if (s.charAt(messageBody.getSelectionStart() - 1) == MENTION_BOUNDS_CHR)         messageBody.setSelection(messageBody.getSelectionStart() + 1);
      }
      if (mentionErase && eraseCount == 1) {
        int firstBound=s.subSequence(0,mentionEraseStart).toString().lastIndexOf(MENTION_BOUNDS_STR);
        if (mentionEraseStart > 0 && s.charAt(mentionEraseStart - 1) == MENTION_BOUNDS_CHR) {
          s.replace(mentionEraseStart - 2,mentionEraseStart,"");
        }
 else         if (mentionEraseStart > 0 && s.charAt(mentionEraseStart - 1) == '@') {
          s.replace(mentionEraseStart - 1,mentionEraseStart - 1,"");
        }
 else         if (mentionEraseStart > 0 && firstBound != -1) {
          s.replace(firstBound,mentionEraseStart,"");
          if (useForceMentionHide) {
            hideMentions();
            forceMentionHide=true;
          }
        }
      }
      int emptyBoundsIndex=s.toString().indexOf(MENTION_BOUNDS_STR.concat(MENTION_BOUNDS_STR));
      if (emptyBoundsIndex != -1) {
        s.replace(emptyBoundsIndex,emptyBoundsIndex + 2,"");
      }
      if (s.length() == 1 && s.charAt(0) == MENTION_BOUNDS_CHR) {
        s.clear();
      }
    }
  }
);
  messageBody.setOnSelectionListener(new SelectionListenerEdittext.OnSelectedListener(){
    @Override public void onSelected(    int selStart,    int selEnd){
      Editable text=messageBody.getText();
      if (selEnd != selStart && text.charAt(selStart) == '@') {
        if (text.charAt(selEnd - 1) == MENTION_BOUNDS_CHR) {
          messageBody.setSelection(selStart + 2,selEnd - 1);
        }
 else         if (text.length() >= 3 && text.charAt(selEnd - 2) == MENTION_BOUNDS_CHR) {
          messageBody.setSelection(selStart + 2,selEnd - 2);
        }
      }
    }
  }
);
  messageBody.setOnKeyListener(new View.OnKeyListener(){
    @Override public boolean onKey(    View view,    int keycode,    KeyEvent keyEvent){
      if (messenger().isSendByEnterEnabled()) {
        if (keyEvent.getAction() == KeyEvent.ACTION_DOWN && keycode == KeyEvent.KEYCODE_ENTER) {
          sendMessage();
          return true;
        }
      }
      return false;
    }
  }
);
  messageBody.setOnEditorActionListener(new TextView.OnEditorActionListener(){
    @Override public boolean onEditorAction(    TextView textView,    int i,    KeyEvent keyEvent){
      if (i == EditorInfo.IME_ACTION_SEND) {
        sendMessage();
        return true;
      }
      if (i == EditorInfo.IME_ACTION_DONE) {
        sendMessage();
        return true;
      }
      if (messenger().isSendByEnterEnabled()) {
        if (keyEvent != null && i == EditorInfo.IME_NULL && keyEvent.getAction() == KeyEvent.ACTION_DOWN) {
          sendMessage();
          return true;
        }
      }
      return false;
    }
  }
);
  kicked=findViewById(R.id.kickedFromChat);
  sendButton=(TintImageView)findViewById(R.id.ib_send);
  sendButton.setResource(R.drawable.conv_send);
  sendButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      sendMessage();
    }
  }
);
  attachButton=(ImageButton)findViewById(R.id.ib_attach);
  attachButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      Context wrapper=new ContextThemeWrapper(ChatActivity.this,R.style.AttachPopupTheme);
      PopupMenu popup=new PopupMenu(wrapper,findViewById(R.id.attachAnchor));
      try {
        Field[] fields=popup.getClass().getDeclaredFields();
        for (        Field field : fields) {
          if ("mPopup".equals(field.getName())) {
            field.setAccessible(true);
            Object menuPopupHelper=field.get(popup);
            Class<?> classPopupHelper=Class.forName(menuPopupHelper.getClass().getName());
            Method setForceIcons=classPopupHelper.getMethod("setForceShowIcon",boolean.class);
            setForceIcons.invoke(menuPopupHelper,true);
            break;
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      popup.getMenuInflater().inflate(R.menu.attach_popup,popup.getMenu());
      popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener(){
        @Override public boolean onMenuItemClick(        MenuItem item){
          if (item.getItemId() == R.id.gallery) {
            Intent intent=new Intent(Intent.ACTION_PICK,MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
            intent.setType("image/* video/*");
            startActivityForResult(intent,REQUEST_GALLERY);
            return true;
          }
 else           if (item.getItemId() == R.id.takePhoto) {
            File externalFile=getExternalFilesDir(null);
            if (externalFile == null) {
              Toast.makeText(ChatActivity.this,R.string.toast_no_sdcard,Toast.LENGTH_LONG).show();
              return true;
            }
            String externalPath=externalFile.getAbsolutePath();
            new File(externalPath + "/actor/").mkdirs();
            fileName=externalPath + "/actor/capture_" + RandomUtil.randomId()+ ".jpg";
            startActivityForResult(new Intent(MediaStore.ACTION_IMAGE_CAPTURE).putExtra(MediaStore.EXTRA_OUTPUT,Uri.fromFile(new File(fileName))),REQUEST_PHOTO);
          }
 else           if (item.getItemId() == R.id.takeVideo) {
            File externalFile=getExternalFilesDir(null);
            if (externalFile == null) {
              Toast.makeText(ChatActivity.this,R.string.toast_no_sdcard,Toast.LENGTH_LONG).show();
              return true;
            }
            String externalPath=externalFile.getAbsolutePath();
            new File(externalPath + "/actor/").mkdirs();
            fileName=externalPath + "/actor/capture_" + RandomUtil.randomId()+ ".mp4";
            Intent i=new Intent(MediaStore.ACTION_VIDEO_CAPTURE).putExtra(MediaStore.EXTRA_OUTPUT,Uri.fromFile(new File(fileName)));
            startActivityForResult(i,REQUEST_VIDEO);
            return true;
          }
 else           if (item.getItemId() == R.id.file) {
            startActivityForResult(Intents.pickFile(ChatActivity.this),REQUEST_DOC);
          }
 else           if (item.getItemId() == R.id.location) {
            startActivityForResult(com.droidkit.pickers.Intents.pickLocation(ChatActivity.this),REQUEST_LOCATION);
          }
          return false;
        }
      }
);
      popup.show();
    }
  }
);
  final ImageView emojiButton=(ImageView)findViewById(R.id.ib_emoji);
  emojiKeyboard=new EmojiKeyboard(this);
  emojiKeyboard.setKeyboardStatusListener(new KeyboardStatusListener(){
    @Override public void onDismiss(){
      emojiButton.setImageResource(R.drawable.ic_emoji);
    }
    @Override public void onShow(){
      emojiButton.setImageResource(R.drawable.ic_keyboard);
    }
  }
);
  emojiButton.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      emojiKeyboard.toggle(messageBody);
    }
  }
);
  mentionsList=(ListView)findViewById(R.id.mentionsList);
}
