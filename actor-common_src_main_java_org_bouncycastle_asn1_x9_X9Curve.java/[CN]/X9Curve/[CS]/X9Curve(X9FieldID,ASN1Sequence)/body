{
  fieldIdentifier=fieldID.getIdentifier();
  if (fieldIdentifier.equals(prime_field)) {
    BigInteger p=((ASN1Integer)fieldID.getParameters()).getValue();
    X9FieldElement x9A=new X9FieldElement(p,(ASN1OctetString)seq.getObjectAt(0));
    X9FieldElement x9B=new X9FieldElement(p,(ASN1OctetString)seq.getObjectAt(1));
    curve=new ECCurve.Fp(p,x9A.getValue().toBigInteger(),x9B.getValue().toBigInteger());
  }
 else   if (fieldIdentifier.equals(characteristic_two_field)) {
    ASN1Sequence parameters=ASN1Sequence.getInstance(fieldID.getParameters());
    int m=((ASN1Integer)parameters.getObjectAt(0)).getValue().intValue();
    ASN1ObjectIdentifier representation=(ASN1ObjectIdentifier)parameters.getObjectAt(1);
    int k1=0;
    int k2=0;
    int k3=0;
    if (representation.equals(tpBasis)) {
      k1=ASN1Integer.getInstance(parameters.getObjectAt(2)).getValue().intValue();
    }
 else     if (representation.equals(ppBasis)) {
      ASN1Sequence pentanomial=ASN1Sequence.getInstance(parameters.getObjectAt(2));
      k1=ASN1Integer.getInstance(pentanomial.getObjectAt(0)).getValue().intValue();
      k2=ASN1Integer.getInstance(pentanomial.getObjectAt(1)).getValue().intValue();
      k3=ASN1Integer.getInstance(pentanomial.getObjectAt(2)).getValue().intValue();
    }
 else {
      throw new IllegalArgumentException("This type of EC basis is not implemented");
    }
    X9FieldElement x9A=new X9FieldElement(m,k1,k2,k3,(ASN1OctetString)seq.getObjectAt(0));
    X9FieldElement x9B=new X9FieldElement(m,k1,k2,k3,(ASN1OctetString)seq.getObjectAt(1));
    curve=new ECCurve.F2m(m,k1,k2,k3,x9A.getValue().toBigInteger(),x9B.getValue().toBigInteger());
  }
 else {
    throw new IllegalArgumentException("This type of ECCurve is not implemented");
  }
  if (seq.size() == 3) {
    seed=((DERBitString)seq.getObjectAt(2)).getBytes();
  }
}
