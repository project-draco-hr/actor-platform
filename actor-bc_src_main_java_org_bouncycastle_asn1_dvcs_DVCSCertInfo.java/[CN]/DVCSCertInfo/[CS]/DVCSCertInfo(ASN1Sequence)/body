{
  int i=0;
  ASN1Encodable x=seq.getObjectAt(i++);
  try {
    ASN1Integer encVersion=ASN1Integer.getInstance(x);
    this.version=encVersion.getValue().intValue();
    x=seq.getObjectAt(i++);
  }
 catch (  IllegalArgumentException e) {
  }
  this.dvReqInfo=DVCSRequestInformation.getInstance(x);
  x=seq.getObjectAt(i++);
  this.messageImprint=DigestInfo.getInstance(x);
  x=seq.getObjectAt(i++);
  this.serialNumber=ASN1Integer.getInstance(x);
  x=seq.getObjectAt(i++);
  this.responseTime=DVCSTime.getInstance(x);
  while (i < seq.size()) {
    x=seq.getObjectAt(i++);
    try {
      ASN1TaggedObject t=ASN1TaggedObject.getInstance(x);
      int tagNo=t.getTagNo();
switch (tagNo) {
case TAG_DV_STATUS:
        this.dvStatus=PKIStatusInfo.getInstance(t,false);
      break;
case TAG_POLICY:
    this.policy=PolicyInformation.getInstance(ASN1Sequence.getInstance(t,false));
  break;
case TAG_REQ_SIGNATURE:
this.reqSignature=ASN1Set.getInstance(t,false);
break;
case TAG_CERTS:
this.certs=ASN1Sequence.getInstance(t,false);
break;
}
continue;
}
 catch (IllegalArgumentException e) {
}
try {
this.extensions=Extensions.getInstance(x);
}
 catch (IllegalArgumentException e) {
}
}
}
