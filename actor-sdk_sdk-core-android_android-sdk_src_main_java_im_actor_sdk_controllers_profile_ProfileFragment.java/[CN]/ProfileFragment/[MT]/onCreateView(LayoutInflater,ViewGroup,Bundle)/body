{
  final UserVM user=users().get(getArguments().getInt(EXTRA_UID));
  ArrayList<UserPhone> phones=user.getPhones().get();
  ArrayList<UserEmail> emails=user.getEmails().get();
  String about=user.getAbout().get();
  final String userName=user.getNick().get();
  final View res=inflater.inflate(R.layout.fragment_profile,container,false);
  res.findViewById(R.id.container).setBackgroundColor(style.getMainBackgroundColor());
  res.findViewById(R.id.avatarContainer).setBackgroundColor(style.getToolBarColor());
  avatarView=(AvatarView)res.findViewById(R.id.avatar);
  avatarView.init(Screen.dp(96),48);
  avatarView.bind(user.getAvatar().get(),user.getName().get(),user.getId());
  avatarView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      startActivity(ViewAvatarActivity.viewAvatar(user.getId(),getActivity()));
    }
  }
);
  TextView nameText=(TextView)res.findViewById(R.id.name);
  nameText.setTextColor(style.getProfileTitleColor());
  bind(nameText,user.getName());
  TextView lastSeen=(TextView)res.findViewById(R.id.lastSeen);
  lastSeen.setTextColor(style.getProfileSubtitleColor());
  bind(lastSeen,user);
  final View addContact=res.findViewById(R.id.addContact);
  final ImageView addContactIcon=(ImageView)addContact.findViewById(R.id.addContactIcon);
  final TextView addContactTitle=(TextView)addContact.findViewById(R.id.addContactTitle);
  bind(user.isContact(),new ValueChangedListener<Boolean>(){
    @Override public void onChanged(    Boolean isContact,    Value<Boolean> valueModel){
      if (isContact) {
        addContactTitle.setText(getString(R.string.profile_contacts_added));
        addContactTitle.setTextColor(style.getProfileContactIconColor());
        Drawable drawable=DrawableCompat.wrap(getResources().getDrawable(R.drawable.ic_check_circle_black_24dp));
        DrawableCompat.setTint(drawable,style.getProfileContactIconColor());
        addContactIcon.setImageDrawable(drawable);
        addContact.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View v){
            execute(ActorSDK.sharedActor().getMessenger().removeContact(user.getId()));
          }
        }
);
      }
 else {
        addContactTitle.setText(getString(R.string.profile_contacts_available));
        addContactTitle.setTextColor(style.getProfileContactIconColor());
        Drawable drawable=DrawableCompat.wrap(getResources().getDrawable(R.drawable.ic_person_add_white_24dp));
        DrawableCompat.setTint(drawable,style.getProfileContactIconColor());
        addContactIcon.setImageDrawable(drawable);
        addContact.setOnClickListener(new View.OnClickListener(){
          @Override public void onClick(          View v){
            execute(ActorSDK.sharedActor().getMessenger().addContact(user.getId()));
          }
        }
);
      }
    }
  }
);
  View newMessageView=res.findViewById(R.id.newMessage);
  ImageView newMessageIcon=(ImageView)newMessageView.findViewById(R.id.newMessageIcon);
  TextView newMessageTitle=(TextView)newMessageView.findViewById(R.id.newMessageText);
{
    Drawable drawable=DrawableCompat.wrap(getResources().getDrawable(R.drawable.ic_chat_black_24dp));
    DrawableCompat.setTint(drawable,style.getListActionColor());
    newMessageIcon.setImageDrawable(drawable);
    newMessageTitle.setTextColor(style.getListActionColor());
  }
  newMessageView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      startActivity(Intents.openPrivateDialog(user.getId(),true,getActivity()));
    }
  }
);
  View voiceCallView=res.findViewById(R.id.voiceCall);
  if (ActorSDK.sharedActor().isCallsEnabled()) {
    ImageView voiceViewIcon=(ImageView)voiceCallView.findViewById(R.id.actionIcon);
    TextView voiceViewTitle=(TextView)voiceCallView.findViewById(R.id.actionText);
    if (!user.isBot()) {
      Drawable drawable=DrawableCompat.wrap(getResources().getDrawable(R.drawable.ic_phone_white_24dp));
      DrawableCompat.setTint(drawable,style.getListActionColor());
      voiceViewIcon.setImageDrawable(drawable);
      voiceViewTitle.setTextColor(style.getListActionColor());
      voiceCallView.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View v){
          execute(ActorSDK.sharedActor().getMessenger().doCall(user.getId()));
        }
      }
);
    }
 else {
      Drawable drawable=DrawableCompat.wrap(getResources().getDrawable(R.drawable.ic_phone_white_24dp));
      DrawableCompat.setTint(drawable,style.getTextHintColor());
      voiceViewIcon.setImageDrawable(drawable);
      voiceViewTitle.setTextColor(style.getTextHintColor());
    }
  }
 else {
    voiceCallView.setVisibility(View.GONE);
  }
  final LinearLayout contactsContainer=(LinearLayout)res.findViewById(R.id.contactsContainer);
  boolean isFirstContact=true;
  for (int i=0; i < phones.size(); i++) {
    final UserPhone userPhone=phones.get(i);
    String _phoneNumber;
    try {
      Phonenumber.PhoneNumber number=PhoneNumberUtil.getInstance().parse("+" + userPhone.getPhone(),"us");
      _phoneNumber=PhoneNumberUtil.getInstance().format(number,PhoneNumberUtil.PhoneNumberFormat.INTERNATIONAL);
    }
 catch (    NumberParseException e) {
      e.printStackTrace();
      _phoneNumber="+" + userPhone.getPhone();
    }
    final String phoneNumber=_phoneNumber;
    String phoneTitle=userPhone.getTitle();
    if (phoneTitle.toLowerCase().equals("mobile phone")) {
      phoneTitle=getString(R.string.settings_mobile_phone);
    }
    View view=buildRecord(phoneTitle,phoneNumber,R.drawable.ic_import_contacts_black_24dp,isFirstContact,emails.size() == 0 && i == phones.size() - 1,inflater,contactsContainer);
    view.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        new AlertDialog.Builder(getActivity()).setItems(new CharSequence[]{getString(R.string.phone_menu_call).replace("{0}",phoneNumber),getString(R.string.phone_menu_sms).replace("{0}",phoneNumber),getString(R.string.phone_menu_share).replace("{0}",phoneNumber),getString(R.string.phone_menu_copy)},new DialogInterface.OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            if (which == 0) {
              startActivity(new Intent(Intent.ACTION_DIAL).setData(Uri.parse("tel:+" + userPhone.getPhone())));
            }
 else             if (which == 1) {
              startActivity(new Intent(Intent.ACTION_VIEW).setData(Uri.parse("sms:+" + userPhone.getPhone())));
            }
 else             if (which == 2) {
              startActivity(new Intent(Intent.ACTION_SEND).setType("text/plain").putExtra(Intent.EXTRA_TEXT,getString(R.string.settings_share_text).replace("{0}",phoneNumber).replace("{1}",user.getName().get())));
            }
 else             if (which == 3) {
              ClipboardManager clipboard=(ClipboardManager)getActivity().getSystemService(Context.CLIPBOARD_SERVICE);
              ClipData clip=ClipData.newPlainText("Phone number",phoneNumber);
              clipboard.setPrimaryClip(clip);
              Snackbar.make(res,R.string.toast_phone_copied,Snackbar.LENGTH_SHORT).show();
            }
          }
        }
).show().setCanceledOnTouchOutside(true);
      }
    }
);
    view.setOnLongClickListener(new View.OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        ClipboardManager clipboard=(ClipboardManager)getActivity().getSystemService(Context.CLIPBOARD_SERVICE);
        ClipData clip=ClipData.newPlainText("Phone number","+" + userPhone.getPhone());
        clipboard.setPrimaryClip(clip);
        Snackbar.make(res,R.string.toast_phone_copied,Snackbar.LENGTH_SHORT).show();
        return true;
      }
    }
);
    isFirstContact=false;
  }
  for (int i=0; i < emails.size(); i++) {
    final UserEmail userEmail=emails.get(i);
    View view=buildRecord(userEmail.getTitle(),userEmail.getEmail(),R.drawable.ic_import_contacts_black_24dp,isFirstContact,userName == null && i == emails.size() - 1,inflater,contactsContainer);
    view.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        new AlertDialog.Builder(getActivity()).setItems(new CharSequence[]{getString(R.string.email_menu_email).replace("{0}",userEmail.getEmail()),getString(R.string.phone_menu_copy)},new DialogInterface.OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            if (which == 0) {
              startActivity(new Intent(Intent.ACTION_SENDTO,Uri.fromParts("mailto",userEmail.getEmail(),null)));
            }
 else             if (which == 1) {
              ClipboardManager clipboard=(ClipboardManager)getActivity().getSystemService(Context.CLIPBOARD_SERVICE);
              ClipData clip=ClipData.newPlainText("Email",userEmail.getEmail());
              clipboard.setPrimaryClip(clip);
              Snackbar.make(res,R.string.toast_email_copied,Snackbar.LENGTH_SHORT).show();
            }
          }
        }
).show().setCanceledOnTouchOutside(true);
      }
    }
);
    view.setOnLongClickListener(new View.OnLongClickListener(){
      @Override public boolean onLongClick(      View v){
        ClipboardManager clipboard=(ClipboardManager)getActivity().getSystemService(Context.CLIPBOARD_SERVICE);
        ClipData clip=ClipData.newPlainText("Email","+" + userEmail.getEmail());
        clipboard.setPrimaryClip(clip);
        Snackbar.make(res,R.string.toast_email_copied,Snackbar.LENGTH_SHORT).show();
        return true;
      }
    }
);
    isFirstContact=false;
  }
  final boolean finalIsFirstContact=isFirstContact;
  bind(user.getNick(),new ValueChangedListener<String>(){
    private View userNameRecord;
    @Override public void onChanged(    final String newUserName,    Value<String> valueModel){
      if (newUserName != null && newUserName.length() > 0) {
        if (userNameRecord == null) {
          userNameRecord=buildRecord(getString(R.string.nickname),"@" + newUserName,R.drawable.ic_import_contacts_black_24dp,finalIsFirstContact,true,inflater,contactsContainer);
        }
 else {
          ((TextView)userNameRecord.findViewById(R.id.value)).setText(newUserName);
        }
        userNameRecord.setOnLongClickListener(new View.OnLongClickListener(){
          @Override public boolean onLongClick(          View v){
            ClipboardManager clipboard=(ClipboardManager)getActivity().getSystemService(Context.CLIPBOARD_SERVICE);
            ClipData clip=ClipData.newPlainText("Nickname",newUserName);
            clipboard.setPrimaryClip(clip);
            Snackbar.make(res,R.string.toast_nickname_copied,Snackbar.LENGTH_SHORT).show();
            return true;
          }
        }
);
      }
    }
  }
);
  bind(user.getAbout(),new ValueChangedListener<String>(){
    private View userAboutRecord;
    @Override public void onChanged(    final String newUserAbout,    Value<String> valueModel){
      if (newUserAbout != null && newUserAbout.length() > 0) {
        if (userAboutRecord == null) {
          userAboutRecord=buildRecordBig(newUserAbout,R.drawable.ic_info_outline_black_24dp,true,true,inflater,contactsContainer);
        }
 else {
          ((TextView)userAboutRecord.findViewById(R.id.value)).setText(newUserAbout);
        }
      }
    }
  }
);
{
    View notificationContainer=res.findViewById(R.id.notificationsCont);
    ((TextView)notificationContainer.findViewById(R.id.settings_notifications_title)).setTextColor(style.getTextPrimaryColor());
    final SwitchCompat notificationEnable=(SwitchCompat)res.findViewById(R.id.enableNotifications);
    notificationEnable.setChecked(messenger().isNotificationsEnabled(Peer.user(user.getId())));
    notificationEnable.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
      @Override public void onCheckedChanged(      CompoundButton buttonView,      boolean isChecked){
        messenger().changeNotificationsEnabled(Peer.user(user.getId()),isChecked);
      }
    }
);
    notificationContainer.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        notificationEnable.setChecked(!notificationEnable.isChecked());
      }
    }
);
    ImageView iconView=(ImageView)res.findViewById(R.id.settings_notification_icon);
    Drawable drawable=DrawableCompat.wrap(getResources().getDrawable(R.drawable.ic_list_black_24dp));
    DrawableCompat.setTint(drawable,style.getSettingsIconColor());
    iconView.setImageDrawable(drawable);
    View blockContainer=res.findViewById(R.id.blockCont);
    final TextView blockTitle=(TextView)blockContainer.findViewById(R.id.settings_block_title);
    blockTitle.setTextColor(style.getTextPrimaryColor());
    bind(user.getIsBlocked(),new ValueChangedListener<Boolean>(){
      @Override public void onChanged(      Boolean val,      Value<Boolean> valueModel){
        blockTitle.setText(val ? R.string.profile_settings_unblock : R.string.profile_settings_block);
      }
    }
);
    blockContainer.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (!user.getIsBlocked().get()) {
          AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
          builder.setMessage(getString(R.string.profile_settings_block_confirm).replace("{user}",user.getName().get())).setPositiveButton(R.string.dialog_yes,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int which){
              execute(messenger().blockUser(user.getId()));
              dialog.dismiss();
            }
          }
).setNegativeButton(R.string.dialog_cancel,new DialogInterface.OnClickListener(){
            @Override public void onClick(            DialogInterface dialog,            int which){
              dialog.dismiss();
            }
          }
).show();
        }
 else {
          execute(messenger().unblockUser(user.getId()));
        }
      }
    }
);
    ImageView blockIconView=(ImageView)res.findViewById(R.id.settings_block_icon);
    Drawable blockDrawable=DrawableCompat.wrap(getResources().getDrawable(R.drawable.ic_content_clear_gray));
    DrawableCompat.setTint(blockDrawable,style.getSettingsIconColor());
    blockIconView.setImageDrawable(blockDrawable);
  }
  final ScrollView scrollView=((ScrollView)res.findViewById(R.id.scrollContainer));
  scrollView.getViewTreeObserver().addOnScrollChangedListener(new ViewTreeObserver.OnScrollChangedListener(){
    @Override public void onScrollChanged(){
      updateBar(scrollView.getScrollY());
    }
  }
);
  updateBar(scrollView.getScrollY());
  return res;
}
