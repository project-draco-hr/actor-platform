{
  byte[] aslide=new byte[256];
  byte[] bslide=new byte[256];
  ge_cached Ai[]=new ge_cached[8];
  for (int count=0; count < 8; count++)   Ai[count]=new ge_cached();
  ge_p1p1 t=new ge_p1p1();
  ge_p3 u=new ge_p3();
  ge_p3 A2=new ge_p3();
  int i;
  slide(aslide,a);
  slide(bslide,b);
  ge_p3_to_cached.ge_p3_to_cached(Ai[0],A);
  ge_p3_dbl.ge_p3_dbl(t,A);
  ge_p1p1_to_p3.ge_p1p1_to_p3(A2,t);
  ge_add.ge_add(t,A2,Ai[0]);
  ge_p1p1_to_p3.ge_p1p1_to_p3(u,t);
  ge_p3_to_cached.ge_p3_to_cached(Ai[1],u);
  ge_add.ge_add(t,A2,Ai[1]);
  ge_p1p1_to_p3.ge_p1p1_to_p3(u,t);
  ge_p3_to_cached.ge_p3_to_cached(Ai[2],u);
  ge_add.ge_add(t,A2,Ai[2]);
  ge_p1p1_to_p3.ge_p1p1_to_p3(u,t);
  ge_p3_to_cached.ge_p3_to_cached(Ai[3],u);
  ge_add.ge_add(t,A2,Ai[3]);
  ge_p1p1_to_p3.ge_p1p1_to_p3(u,t);
  ge_p3_to_cached.ge_p3_to_cached(Ai[4],u);
  ge_add.ge_add(t,A2,Ai[4]);
  ge_p1p1_to_p3.ge_p1p1_to_p3(u,t);
  ge_p3_to_cached.ge_p3_to_cached(Ai[5],u);
  ge_add.ge_add(t,A2,Ai[5]);
  ge_p1p1_to_p3.ge_p1p1_to_p3(u,t);
  ge_p3_to_cached.ge_p3_to_cached(Ai[6],u);
  ge_add.ge_add(t,A2,Ai[6]);
  ge_p1p1_to_p3.ge_p1p1_to_p3(u,t);
  ge_p3_to_cached.ge_p3_to_cached(Ai[7],u);
  ge_p2_0.ge_p2_0(r);
  for (i=255; i >= 0; --i) {
    if (aslide[i] != 0 || bslide[i] != 0)     break;
  }
  for (; i >= 0; --i) {
    ge_p2_dbl.ge_p2_dbl(t,r);
    if (aslide[i] > 0) {
      ge_p1p1_to_p3.ge_p1p1_to_p3(u,t);
      ge_add.ge_add(t,u,Ai[aslide[i] / 2]);
    }
 else     if (aslide[i] < 0) {
      ge_p1p1_to_p3.ge_p1p1_to_p3(u,t);
      ge_sub.ge_sub(t,u,Ai[(-aslide[i]) / 2]);
    }
    if (bslide[i] > 0) {
      ge_p1p1_to_p3.ge_p1p1_to_p3(u,t);
      ge_madd.ge_madd(t,u,Bi[bslide[i] / 2]);
    }
 else     if (bslide[i] < 0) {
      ge_p1p1_to_p3.ge_p1p1_to_p3(u,t);
      ge_msub.ge_msub(t,u,Bi[(-bslide[i]) / 2]);
    }
    ge_p1p1_to_p2.ge_p1p1_to_p2(r,t);
  }
}
