{
  View rootView=inflater.inflate(R.layout.fragment_media_picture,container,false);
  final Bundle bundle=getArguments();
  path=bundle.getString(ARG_FILE_PATH);
  fileId=bundle.getLong(ARG_FILE_ID);
  accessHash=bundle.getLong(ARG_FILE_ACCESS_HASH);
  fileSize=bundle.getInt(ARG_FILE_SIZE);
  fileName=bundle.getString(ARG_FILE_NAME);
  int sender=bundle.getInt(ARG_OWNER,0);
  circularView=(CircularView)rootView.findViewById(R.id.progress);
  circularView.setValue(50);
  imageView=(ImageKitView)rootView.findViewById(R.id.image);
  imageView.setExtraReceiverCallback(new ReceiverCallback(){
    @Override public void onImageLoaded(    BitmapReference bitmap){
      goneView(circularView);
      attacher=new PhotoViewAttacher(imageView);
      attacher.setOnDoubleTapListener(new DefaultOnDoubleTapListener(attacher){
        @Override public boolean onSingleTapConfirmed(        MotionEvent e){
          if (!uiIsHidden) {
            hideSystemUi();
          }
 else {
            showSystemUi();
          }
          return super.onSingleTapConfirmed(e);
        }
        @Override public boolean onDoubleTap(        MotionEvent e){
          if (!uiIsHidden)           hideSystemUi();
          return super.onDoubleTap(e);
        }
        @Override public boolean onDoubleTapEvent(        MotionEvent e){
          return super.onDoubleTapEvent(e);
        }
      }
);
    }
    @Override public void onImageCleared(){
    }
    @Override public void onImageError(){
    }
  }
);
  if (path == null) {
    messenger().requestState(fileId,new FileCallback(){
      @Override public void onNotDownloaded(){
        final FileReference location=new FileReference(new FileLocation(fileId,accessHash),fileName,fileSize);
        messenger().bindFile(location,true,new FileVMCallback(){
          @Override public void onNotDownloaded(){
            messenger().startDownloading(location);
          }
          @Override public void onDownloading(          float progress){
            circularView.setValue((int)progress);
          }
          @Override public void onDownloaded(          final FileSystemReference reference){
            MVVMEngine.runOnUiThread(new Runnable(){
              @Override public void run(){
                path=reference.getDescriptor();
                imageView.request(new RawFileTask(path));
              }
            }
);
          }
        }
);
        circularView.setVisibility(View.VISIBLE);
      }
      @Override public void onDownloading(      float progress){
      }
      @Override public void onDownloaded(      final FileSystemReference reference){
        MVVMEngine.runOnUiThread(new Runnable(){
          @Override public void run(){
            path=reference.getDescriptor();
            imageView.request(new RawFileTask(path));
          }
        }
);
      }
    }
);
  }
 else {
    imageView.request(new RawFileTask(path));
  }
  ownerAvatarView=(AvatarView)rootView.findViewById(R.id.avatar);
  ownerNameView=(TextView)rootView.findViewById(R.id.name);
  ownerContainer=rootView.findViewById(R.id.ownerContainer);
  if (Build.VERSION.SDK_INT >= 19) {
    ownerContainer.setPadding(0,0,0,Screen.getNavbarHeight());
  }
  UserVM owner=users().get(sender);
  ownerAvatarView.init(Screen.dp(48),18);
  ownerAvatarView.bind(owner);
  ownerNameView.setText(owner.getName().get());
  backgroundView=null;
  Activity activity=getActivity();
  backgroundView=rootView.findViewById(R.id.background);
  if (backgroundView != null)   backgroundView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (!uiIsHidden) {
        hideSystemUi();
      }
 else {
        showSystemUi();
      }
    }
  }
);
  ownerContainer.setVisibility(View.GONE);
  return rootView;
}
