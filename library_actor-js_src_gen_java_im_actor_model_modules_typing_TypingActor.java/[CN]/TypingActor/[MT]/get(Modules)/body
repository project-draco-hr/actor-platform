{
  return ActorSystem.system().actorOf(Props.create(TypingActor.class,new ActorCreator<TypingActor>(){
    @Override public TypingActor create(){
      return new TypingActor(messenger);
    }
  }
,new MailboxCreator(){
    @Override public Mailbox createMailbox(    MailboxesQueue queue){
      return new Mailbox(queue){
        @Override protected boolean isEqualEnvelope(        Envelope a,        Envelope b){
          if (a.getMessage().equals(b.getMessage())) {
            return true;
          }
          return super.isEqualEnvelope(a,b);
        }
      }
;
    }
  }
),"actor/typing");
}
