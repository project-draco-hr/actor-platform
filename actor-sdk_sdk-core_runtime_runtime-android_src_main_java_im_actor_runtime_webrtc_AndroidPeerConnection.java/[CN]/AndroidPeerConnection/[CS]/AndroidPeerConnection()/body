{
  if (LIBJINGLE_LOGS) {
    Logging.enableTracing("logcat:",EnumSet.of(Logging.TraceLevel.TRACE_ALL),Logging.Severity.LS_SENSITIVE);
  }
  if (iceServers == null) {
    iceServers=new ArrayList<PeerConnection.IceServer>();
    iceServers.add(new PeerConnection.IceServer("stun:62.4.22.219:3478"));
    iceServers.add(new PeerConnection.IceServer("turn:62.4.22.219:3478?transport=tcp","actor","password"));
    iceServers.add(new PeerConnection.IceServer("turn:62.4.22.219:3478?transport=udp","actor","password"));
  }
  this.peerConnection=factory().createPeerConnection(iceServers,new MediaConstraints(),new PeerConnection.Observer(){
    @Override public void onSignalingChange(    PeerConnection.SignalingState signalingState){
    }
    @Override public void onIceConnectionChange(    PeerConnection.IceConnectionState iceConnectionState){
    }
    @Override public void onIceConnectionReceivingChange(    boolean b){
    }
    @Override public void onIceGatheringChange(    PeerConnection.IceGatheringState iceGatheringState){
    }
    @Override public void onIceCandidate(    IceCandidate candidate){
      for (      WebRTCPeerConnectionCallback c : callbacks) {
        c.onCandidate(candidate.sdpMLineIndex,candidate.sdpMid,candidate.sdp);
      }
    }
    @Override public void onAddStream(    MediaStream stream){
      AndroidMediaStream stream1=new AndroidMediaStream(stream);
      streams.put(stream,stream1);
      for (      WebRTCPeerConnectionCallback c : callbacks) {
        c.onStreamAdded(stream1);
      }
    }
    @Override public void onRemoveStream(    MediaStream stream){
      AndroidMediaStream stream1=streams.get(stream);
      if (stream1 != null) {
        for (        WebRTCPeerConnectionCallback c : callbacks) {
          c.onStreamRemoved(stream1);
        }
      }
    }
    @Override public void onDataChannel(    DataChannel dataChannel){
    }
    @Override public void onRenegotiationNeeded(){
      for (      WebRTCPeerConnectionCallback c : callbacks) {
        c.onRenegotiationNeeded();
      }
    }
  }
);
}
