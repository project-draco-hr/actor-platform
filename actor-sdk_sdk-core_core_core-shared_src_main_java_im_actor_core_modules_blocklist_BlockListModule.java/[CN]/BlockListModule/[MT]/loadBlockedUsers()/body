{
  return new Promise<>(new PromiseFunc<List<User>>(){
    @Override public void exec(    @NotNull final PromiseResolver<List<User>> resolver){
      request(new RequestLoadBlockedUsers(),new RpcCallback<ResponseLoadBlockedUsers>(){
        @Override public void onResult(        ResponseLoadBlockedUsers response){
          List<ApiUserOutPeer> missingPeers=new ArrayList<>();
          final List<User> res=new ArrayList<>();
          for (          ApiUserOutPeer outPeer : response.getUserPeers()) {
            User u=users().getValue(outPeer.getUid());
            if (u != null) {
              res.add(u);
            }
 else {
              missingPeers.add(outPeer);
            }
          }
          if (missingPeers.size() > 0) {
            request(new RequestGetReferencedEntitites(missingPeers,new ArrayList<ApiGroupOutPeer>()),new RpcCallback<ResponseGetReferencedEntitites>(){
              @Override public void onResult(              final ResponseGetReferencedEntitites response){
                updates().executeRelatedResponse(response.getUsers(),response.getGroups(),new Runnable(){
                  @Override public void run(){
                    for (                    ApiUser usr : response.getUsers()) {
                      res.add(users().getValue(usr.getId()));
                    }
                    resolver.result(res);
                  }
                }
);
              }
              @Override public void onError(              RpcException e){
                resolver.error(e);
              }
            }
);
          }
 else {
            resolver.result(res);
          }
        }
        @Override public void onError(        RpcException e){
          resolver.error(e);
        }
      }
);
    }
  }
);
}
