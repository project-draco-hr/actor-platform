{
  final ValueModel<GroupAvatarState.StateHolder> state=GroupAvatarState.getGroupState(gid);
  state.change(new GroupAvatarState.StateHolder(GroupAvatarState.State.UPLOADING));
  final GroupModel groupModel=groups().get(gid);
  final long rid=RandomUtil.randomId();
  ask(requests().removeGroupAvatar(new GroupOutPeer(gid,groupModel.getAccessHash()),rid),new FutureCallback<ResponseSeqDate>(){
    @Override public void onResult(    ResponseSeqDate result){
      system().actorOf(SequenceActor.sequence()).send(new SequenceActor.SeqUpdate(result.getSeq(),result.getState(),new UpdateGroupAvatarChanged(gid,rid,myUid(),null,result.getDate())));
      system().actorOf(SequenceActor.sequence()).send(new Runnable(){
        @Override public void run(){
          state.change(new GroupAvatarState.StateHolder(GroupAvatarState.State.NONE));
        }
      }
);
    }
    @Override public void onError(    Throwable throwable){
      AvatarChangeState.uploadingState().change(AvatarChangeState.State.ERROR);
      ToastActor.get().show("Unable to remove avatar");
    }
  }
);
}
