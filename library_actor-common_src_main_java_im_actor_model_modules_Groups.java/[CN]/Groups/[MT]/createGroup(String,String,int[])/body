{
  return new Command<Integer>(){
    @Override public void start(    final CommandCallback<Integer> callback){
      ArrayList<UserOutPeer> peers=new ArrayList<UserOutPeer>();
      for (      int u : uids) {
        User user=users().getValue(u);
        if (user != null) {
          peers.add(new UserOutPeer(u,user.getAccessHash()));
        }
      }
      final long rid=RandomUtils.nextRid();
      request(new RequestCreateGroup(rid,title,peers),new RpcCallback<ResponseCreateGroup>(){
        @Override public void onResult(        ResponseCreateGroup response){
          List<Member> members=new ArrayList<Member>();
          for (          int u : uids) {
            members.add(new Member(u,myUid(),response.getDate()));
          }
          im.actor.model.api.Group group=new im.actor.model.api.Group(response.getGroupPeer().getGroupId(),response.getGroupPeer().getAccessHash(),title,null,true,myUid(),members,response.getDate());
          ArrayList<im.actor.model.api.Group> groups=new ArrayList<im.actor.model.api.Group>();
          groups.add(group);
          if (avatarDescriptor != null) {
            changeAvatar(group.getId(),avatarDescriptor);
          }
          updates().onUpdateReceived(new FatSeqUpdate(response.getSeq(),response.getState(),UpdateGroupInvite.HEADER,new UpdateGroupInvite(response.getGroupPeer().getGroupId(),rid,myUid(),response.getDate()).toByteArray(),new ArrayList<im.actor.model.api.User>(),groups,new ArrayList<Phone>(),new ArrayList<Email>()));
          updates().onUpdateReceived(new GroupCreated(group,callback));
        }
        @Override public void onError(        final RpcException e){
          runOnUiThread(new Runnable(){
            @Override public void run(){
              callback.onError(e);
            }
          }
);
        }
      }
);
    }
  }
;
}
