{
  chatId=getArguments().getInt(EXTRA_CHAT_ID);
  groupInfo=groups().get(chatId);
  View res=inflater.inflate(R.layout.fragment_group,container,false);
  notMemberView=res.findViewById(R.id.notMember);
  bind(groupInfo.isMember(),new ValueChangedListener<Boolean>(){
    @Override public void onChanged(    Boolean val,    ValueModel<Boolean> valueModel){
      notMemberView.setVisibility(val ? View.GONE : View.VISIBLE);
      getActivity().invalidateOptionsMenu();
    }
  }
);
  listView=(ListView)res.findViewById(R.id.groupList);
  View header=inflater.inflate(R.layout.fragment_group_header,listView,false);
  avatarView=(CoverAvatarView)header.findViewById(R.id.avatar);
  bind(avatarView,groupInfo.getAvatar());
  avatarView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      startActivity(ViewAvatarActivity.viewGroupAvatar(chatId,getActivity()));
    }
  }
);
  bind((TextView)header.findViewById(R.id.title),groupInfo.getName());
  final TextView createdBy=(TextView)header.findViewById(R.id.createdBy);
  if (groupInfo.getCreatorId() == myUid()) {
    createdBy.setText(R.string.group_created_by_you);
  }
 else {
    UserVM admin=users().get(groupInfo.getCreatorId());
    bind(admin.getName(),new ValueChangedListener<String>(){
      @Override public void onChanged(      String val,      ValueModel<String> valueModel){
        createdBy.setText(getString(R.string.group_created_by).replace("{0}",val));
      }
    }
);
  }
  final SwitchCompat isNotificationsEnabled=(SwitchCompat)header.findViewById(R.id.enableNotifications);
  isNotificationsEnabled.setChecked(messenger().isNotificationsEnabled(Peer.group(chatId)));
  isNotificationsEnabled.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton buttonView,    boolean isChecked){
      messenger().changeNotificationsEnabled(Peer.group(chatId),isChecked);
    }
  }
);
  header.findViewById(R.id.notificationsCont).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      isNotificationsEnabled.setChecked(!isNotificationsEnabled.isChecked());
    }
  }
);
  ((TextView)header.findViewById(R.id.membersCount)).setText(getString(R.string.group_members_count).replace("{0}",groupInfo.getMembersCount() + "").replace("{1}","300"));
  listView.addHeaderView(header,null,false);
  View add=inflater.inflate(R.layout.fragment_group_add,listView,false);
  ((TextView)add.findViewById(R.id.name)).setTypeface(Fonts.medium());
  add.findViewById(R.id.addUser).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      startActivity(new Intent(getActivity(),AddMemberActivity.class).putExtra("GROUP_ID",chatId));
    }
  }
);
  listView.addFooterView(add,null,false);
  groupUserAdapter=new MembersAdapter(groupInfo.getMembers().get(),getActivity());
  bind(groupInfo.getMembers(),new ValueChangedListener<HashSet<GroupMember>>(){
    @Override public void onChanged(    HashSet<GroupMember> val,    ValueModel<HashSet<GroupMember>> valueModel){
      groupUserAdapter.updateUid(val);
    }
  }
);
  listView.setAdapter(groupUserAdapter);
  listView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      Object item=parent.getItemAtPosition(position);
      if (item != null && item instanceof GroupMember) {
        final GroupMember groupMember=(GroupMember)item;
        if (groupMember.getUid() == myUid()) {
          return;
        }
        final UserVM userVM=users().get(groupMember.getUid());
        if (userVM == null) {
          return;
        }
        new AlertDialog.Builder(getActivity()).setItems(new CharSequence[]{getString(R.string.group_context_message).replace("{0}",userVM.getName().get()),getString(R.string.group_context_call).replace("{0}",userVM.getName().get()),getString(R.string.group_context_view).replace("{0}",userVM.getName().get()),getString(R.string.group_context_remove).replace("{0}",userVM.getName().get())},new DialogInterface.OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            if (which == 0) {
              startActivity(Intents.openPrivateDialog(userVM.getId(),true,getActivity()));
            }
 else             if (which == 1) {
              final ArrayList<UserPhone> phones=userVM.getPhones().get();
              if (phones.size() == 0) {
                Toast.makeText(getActivity(),"No phones available",Toast.LENGTH_SHORT).show();
              }
 else               if (phones.size() == 1) {
                startActivity(Intents.call(phones.get(0).getPhone()));
              }
 else {
                CharSequence[] sequences=new CharSequence[phones.size()];
                for (int i=0; i < sequences.length; i++) {
                  try {
                    Phonenumber.PhoneNumber number=PhoneNumberUtil.getInstance().parse("+" + phones.get(i).getPhone(),"us");
                    sequences[i]=phones.get(which).getTitle() + ": " + PhoneNumberUtil.getInstance().format(number,PhoneNumberUtil.PhoneNumberFormat.INTERNATIONAL);
                  }
 catch (                  NumberParseException e) {
                    e.printStackTrace();
                    sequences[i]=phones.get(which).getTitle() + ": +" + phones.get(i).getPhone();
                  }
                }
                new AlertDialog.Builder(getActivity()).setItems(sequences,new DialogInterface.OnClickListener(){
                  @Override public void onClick(                  DialogInterface dialog,                  int which){
                    startActivity(Intents.call(phones.get(which).getPhone()));
                  }
                }
).show().setCanceledOnTouchOutside(true);
              }
            }
 else             if (which == 2) {
              startActivity(Intents.openProfile(userVM.getId(),getActivity()));
            }
 else             if (which == 3) {
              new AlertDialog.Builder(getActivity()).setMessage(getString(R.string.alert_group_remove_text).replace("{0}",userVM.getName().get())).setPositiveButton(R.string.alert_group_remove_yes,new DialogInterface.OnClickListener(){
                @Override public void onClick(                DialogInterface dialog2,                int which){
                  execute(messenger().kickMember(chatId,userVM.getId()),R.string.progress_common,new CommandCallback<Boolean>(){
                    @Override public void onResult(                    Boolean res){
                    }
                    @Override public void onError(                    Exception e){
                      Toast.makeText(getActivity(),R.string.toast_unable_kick,Toast.LENGTH_SHORT).show();
                    }
                  }
);
                }
              }
).setNegativeButton(R.string.dialog_cancel,null).show().setCanceledOnTouchOutside(true);
            }
          }
        }
).show().setCanceledOnTouchOutside(true);
      }
    }
  }
);
  listView.setOnScrollListener(new AbsListView.OnScrollListener(){
    @Override public void onScrollStateChanged(    AbsListView view,    int scrollState){
    }
    @Override public void onScroll(    AbsListView view,    int firstVisibleItem,    int visibleItemCount,    int totalItemCount){
      if (firstVisibleItem >= 1) {
        updateBar(Integer.MAX_VALUE);
      }
 else {
        View top=listView.getChildAt(0);
        if (top != null) {
          updateBar(-top.getTop());
        }
 else {
          updateBar(Integer.MAX_VALUE);
        }
      }
    }
  }
);
  return res;
}
