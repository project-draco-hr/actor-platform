{
  final int N=mAdapter.getCount();
  final int height=getClientHeight();
  final float marginOffset=height > 0 ? (float)mPageMargin / height : 0;
  if (oldCurInfo != null) {
    final int oldCurPosition=oldCurInfo.position;
    if (oldCurPosition < curItem.position) {
      int itemIndex=0;
      ItemInfo ii=null;
      float offset=oldCurInfo.offset + oldCurInfo.heightFactor + marginOffset;
      for (int pos=oldCurPosition + 1; pos <= curItem.position && itemIndex < mItems.size(); pos++) {
        ii=mItems.get(itemIndex);
        while (pos > ii.position && itemIndex < mItems.size() - 1) {
          itemIndex++;
          ii=mItems.get(itemIndex);
        }
        while (pos < ii.position) {
          offset+=mAdapter.getPageWidth(pos) + marginOffset;
          pos++;
        }
        ii.offset=offset;
        offset+=ii.heightFactor + marginOffset;
      }
    }
 else     if (oldCurPosition > curItem.position) {
      int itemIndex=mItems.size() - 1;
      ItemInfo ii=null;
      float offset=oldCurInfo.offset;
      for (int pos=oldCurPosition - 1; pos >= curItem.position && itemIndex >= 0; pos--) {
        ii=mItems.get(itemIndex);
        while (pos < ii.position && itemIndex > 0) {
          itemIndex--;
          ii=mItems.get(itemIndex);
        }
        while (pos > ii.position) {
          offset-=mAdapter.getPageWidth(pos) + marginOffset;
          pos--;
        }
        offset-=ii.heightFactor + marginOffset;
        ii.offset=offset;
      }
    }
  }
  final int itemCount=mItems.size();
  float offset=curItem.offset;
  int pos=curItem.position - 1;
  mFirstOffset=curItem.position == 0 ? curItem.offset : -Float.MAX_VALUE;
  mLastOffset=curItem.position == N - 1 ? curItem.offset + curItem.heightFactor - 1 : Float.MAX_VALUE;
  for (int i=curIndex - 1; i >= 0; i--, pos--) {
    final ItemInfo ii=mItems.get(i);
    while (pos > ii.position) {
      offset-=mAdapter.getPageWidth(pos--) + marginOffset;
    }
    offset-=ii.heightFactor + marginOffset;
    ii.offset=offset;
    if (ii.position == 0)     mFirstOffset=offset;
  }
  offset=curItem.offset + curItem.heightFactor + marginOffset;
  pos=curItem.position + 1;
  for (int i=curIndex + 1; i < itemCount; i++, pos++) {
    final ItemInfo ii=mItems.get(i);
    while (pos < ii.position) {
      offset+=mAdapter.getPageWidth(pos++) + marginOffset;
    }
    if (ii.position == N - 1) {
      mLastOffset=offset + ii.heightFactor - 1;
    }
    ii.offset=offset;
    offset+=ii.heightFactor + marginOffset;
  }
  mNeedCalculatePageOffsets=false;
}
