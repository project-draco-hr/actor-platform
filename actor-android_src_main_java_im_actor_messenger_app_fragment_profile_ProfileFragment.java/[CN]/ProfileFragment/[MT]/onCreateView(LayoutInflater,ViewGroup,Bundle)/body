{
  final int uid=getArguments().getInt(EXTRA_UID);
  final UserModel user=users().get(uid);
  baseColor=getResources().getColor(R.color.primary);
  View res=inflater.inflate(R.layout.fragment_profile,container,false);
  getBinder().bindText((TextView)res.findViewById(R.id.name),user.getNameModel());
  final TextView lastSeen=(TextView)res.findViewById(R.id.lastSeen);
  getBinder().bind(user.getPresence(),new Listener<UserPresence>(){
    @Override public void onUpdated(    UserPresence presence){
      String s=Formatter.formatPresence(presence,user.getRaw().getSex());
      if (s != null) {
        lastSeen.setVisibility(View.VISIBLE);
        lastSeen.setText(s);
      }
 else {
        lastSeen.setVisibility(View.GONE);
      }
    }
  }
);
  int docsCount=ListEngines.getDocuments(DialogUids.getDialogUid(DialogType.TYPE_USER,uid)).getCount();
  if (docsCount > 0) {
    res.findViewById(R.id.filesCont).setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        startActivity(Intents.openDocs(DialogType.TYPE_USER,uid,getActivity()));
      }
    }
);
    ((TextView)res.findViewById(R.id.documentCount)).setText(docsCount + "");
  }
 else {
    res.findViewById(R.id.filesCont).setVisibility(View.GONE);
    res.findViewById(R.id.sharedDiv).setVisibility(View.GONE);
    res.findViewById(R.id.sharedTitle).setVisibility(View.GONE);
  }
  ((TextView)res.findViewById(R.id.phone)).setText("+" + user.getPhone());
  res.findViewById(R.id.phoneContainer).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      final String phoneNumber;
      String phoneNumber1;
      try {
        Phonenumber.PhoneNumber number=PhoneNumberUtil.getInstance().parse("+" + user.getPhone(),"us");
        phoneNumber1=PhoneNumberUtil.getInstance().format(number,PhoneNumberUtil.PhoneNumberFormat.INTERNATIONAL);
      }
 catch (      NumberParseException e) {
        e.printStackTrace();
        phoneNumber1="+" + user.getPhone();
      }
      phoneNumber=phoneNumber1;
      new AlertDialog.Builder(getActivity()).setItems(new CharSequence[]{getString(R.string.phone_menu_call).replace("{0}",phoneNumber),getString(R.string.phone_menu_sms).replace("{0}",phoneNumber),getString(R.string.phone_menu_share).replace("{0}",phoneNumber),getString(R.string.phone_menu_copy)},new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int which){
          if (which == 0) {
            startActivity(new Intent(Intent.ACTION_DIAL).setData(Uri.parse("tel:+" + user.getPhone())));
          }
 else           if (which == 1) {
            startActivity(new Intent(Intent.ACTION_VIEW).setData(Uri.parse("sms:+" + user.getPhone())));
          }
 else           if (which == 2) {
            startActivity(new Intent(Intent.ACTION_SEND).setType("text/plain").putExtra(Intent.EXTRA_TEXT,getString(R.string.settings_share_text).replace("{0}",phoneNumber).replace("{1}",user.getName())));
          }
 else           if (which == 3) {
            android.content.ClipboardManager clipboard=(android.content.ClipboardManager)getActivity().getSystemService(Context.CLIPBOARD_SERVICE);
            android.content.ClipData clip=android.content.ClipData.newPlainText("Phone number",phoneNumber);
            clipboard.setPrimaryClip(clip);
            Toast.makeText(getActivity(),R.string.toast_phone_copied,Toast.LENGTH_SHORT).show();
          }
        }
      }
).show().setCanceledOnTouchOutside(true);
    }
  }
);
  res.findViewById(R.id.phoneContainer).setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      android.content.ClipboardManager clipboard=(android.content.ClipboardManager)getActivity().getSystemService(Context.CLIPBOARD_SERVICE);
      android.content.ClipData clip=android.content.ClipData.newPlainText("Phone number","+" + user.getPhone());
      clipboard.setPrimaryClip(clip);
      Toast.makeText(getActivity(),R.string.toast_phone_copied,Toast.LENGTH_SHORT).show();
      return true;
    }
  }
);
  res.findViewById(R.id.profileAction).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      startActivity(Intents.openPrivateDialog(uid,true,getActivity()));
    }
  }
);
  avatarView=(CoverAvatarView)res.findViewById(R.id.avatar);
  getBinder().bind(user.getAvatar(),new Listener<Avatar>(){
    @Override public void onUpdated(    Avatar avatar){
      if (avatar != null) {
        avatarView.request(avatar);
      }
 else {
        avatarView.clear();
      }
    }
  }
);
  avatarView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      startActivity(ViewAvatarActivity.viewAvatar(uid,getActivity()));
    }
  }
);
  View notificationContainter=res.findViewById(R.id.notificationsCont);
  SwitchCompat notificationEnable=(SwitchCompat)res.findViewById(R.id.enableNotifications);
  getBinder().bindChecked(notificationEnable,NotificationSettings.getInstance().convValue(DialogUids.getDialogUid(0,uid)));
  getBinder().bindOnClick(notificationContainter,NotificationSettings.getInstance().convValue(DialogUids.getDialogUid(0,uid)));
  getBinder().bindOnClick(notificationEnable,NotificationSettings.getInstance().convValue(DialogUids.getDialogUid(0,uid)));
  final ScrollView scrollView=((ScrollView)res.findViewById(R.id.scrollContainer));
  scrollView.getViewTreeObserver().addOnScrollChangedListener(new ViewTreeObserver.OnScrollChangedListener(){
    @Override public void onScrollChanged(){
      updateBar(scrollView.getScrollY());
    }
  }
);
  updateBar(scrollView.getScrollY());
  return res;
}
