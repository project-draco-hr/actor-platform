{
  byte[] aesKey;
  try {
    aesKey=rsaCipher.doFinal(encryptedAesKey);
  }
 catch (  BadPaddingException e) {
    throw new DecryptException(e);
  }
catch (  IllegalBlockSizeException e) {
    throw new DecryptException(e);
  }
  if (aesKey.length < 32 + 16) {
    throw new DecryptException("Too short aes key");
  }
  byte[] key=substring(aesKey,aesKey.length - 16 - 32,32);
  byte[] iv=substring(aesKey,aesKey.length - 16,16);
  IvParameterSpec ivSpec=new IvParameterSpec(iv);
  SecretKeySpec keySpec=new SecretKeySpec(key,"AES");
  byte[] res;
  try {
    aesCipher.init(Cipher.DECRYPT_MODE,keySpec,ivSpec);
    res=aesCipher.doFinal(encrypted);
  }
 catch (  InvalidKeyException e) {
    throw new DecryptException(e);
  }
catch (  InvalidAlgorithmParameterException e) {
    throw new DecryptException(e);
  }
catch (  BadPaddingException e) {
    throw new DecryptException(e);
  }
catch (  IllegalBlockSizeException e) {
    throw new DecryptException(e);
  }
  int len=Utils.readInt(res,0);
  if (len <= 0) {
    throw new DecryptException("Incorrect package size");
  }
  if (len >= Config.MAX_PACKAGE_SIZE) {
    throw new DecryptException("Too big package size");
  }
  if (len > res.length - 4) {
    throw new DecryptException("Encrypted size are bigger than size");
  }
  res=substring(res,4,len);
  return res;
}
