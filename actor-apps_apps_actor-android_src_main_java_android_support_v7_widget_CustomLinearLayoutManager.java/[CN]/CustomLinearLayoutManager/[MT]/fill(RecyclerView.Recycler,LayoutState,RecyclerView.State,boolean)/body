{
  final int start=layoutState.mAvailable;
  if (layoutState.mScrollingOffset != LayoutState.SCOLLING_OFFSET_NaN) {
    if (layoutState.mAvailable < 0) {
      layoutState.mScrollingOffset+=layoutState.mAvailable;
    }
    recycleByLayoutState(recycler,layoutState);
  }
  int remainingSpace=layoutState.mAvailable + layoutState.mExtra;
  LayoutChunkResult layoutChunkResult=new LayoutChunkResult();
  while (remainingSpace > 0 && layoutState.hasMore(state)) {
    layoutChunkResult.resetInternal();
    layoutChunk(recycler,state,layoutState,layoutChunkResult);
    if (layoutChunkResult.mFinished) {
      break;
    }
    layoutState.mOffset+=layoutChunkResult.mConsumed * layoutState.mLayoutDirection;
    if (!layoutChunkResult.mIgnoreConsumed || mLayoutState.mScrapList != null || !state.isPreLayout()) {
      layoutState.mAvailable-=layoutChunkResult.mConsumed;
      remainingSpace-=layoutChunkResult.mConsumed;
    }
    if (layoutState.mScrollingOffset != LayoutState.SCOLLING_OFFSET_NaN) {
      layoutState.mScrollingOffset+=layoutChunkResult.mConsumed;
      if (layoutState.mAvailable < 0) {
        layoutState.mScrollingOffset+=layoutState.mAvailable;
      }
      recycleByLayoutState(recycler,layoutState);
    }
    if (stopOnFocusable && layoutChunkResult.mFocusable) {
      break;
    }
  }
  if (DEBUG) {
    validateChildOrder();
  }
  return start - layoutState.mAvailable;
}
