{
  final NotificationCompat.Builder builder=new NotificationCompat.Builder(context);
  builder.setAutoCancel(true);
  builder.setSmallIcon(R.drawable.ic_app_notify);
  builder.setPriority(NotificationCompat.PRIORITY_DEFAULT);
  builder.setCategory(NotificationCompat.CATEGORY_MESSAGE);
  int defaults=NotificationCompat.DEFAULT_LIGHTS;
  if (messenger.isNotificationSoundEnabled()) {
    defaults|=NotificationCompat.DEFAULT_SOUND;
  }
  if (messenger.isNotificationVibrationEnabled()) {
    defaults|=NotificationCompat.DEFAULT_VIBRATE;
  }
  builder.setDefaults(defaults);
  final Notification topNotification=topNotifications.get(0);
  android.app.Notification result;
  if (messagesCount == 1) {
    final String sender=getNotificationSender(topNotification);
    final CharSequence text=messenger.getFormatter().formatNotificationText(topNotification);
    visiblePeer=topNotification.getPeer();
    Avatar avatar=null;
    int id=0;
    String avatarTitle="";
switch (visiblePeer.getPeerType()) {
case PRIVATE:
      avatar=users().get(visiblePeer.getPeerId()).getAvatar().get();
    id=users().get(visiblePeer.getPeerId()).getId();
  avatarTitle=users().get(visiblePeer.getPeerId()).getName().get();
break;
case GROUP:
avatar=groups().get(visiblePeer.getPeerId()).getAvatar().get();
id=groups().get(visiblePeer.getPeerId()).getId();
avatarTitle=groups().get(visiblePeer.getPeerId()).getName().get();
break;
}
Drawable avatarDrawable=new AvatarPlaceholderDrawable(avatarTitle,id,18,context);
result=buildSingleMessageNotification(avatarDrawable,builder,sender,text,topNotification);
final NotificationManager manager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
manager.notify(NOTIFICATION_ID,result);
if (avatar != null && avatar.getSmallImage() != null && avatar.getSmallImage().getFileReference() != null) {
messenger.bindFile(avatar.getSmallImage().getFileReference(),true,new FileVMCallback(){
@Override public void onNotDownloaded(){
}
@Override public void onDownloading(float progress){
}
@Override public void onDownloaded(FileSystemReference reference){
RoundedBitmapDrawable d=getRoundedBitmapDrawable(reference);
android.app.Notification result=buildSingleMessageNotification(d,builder,sender,text,topNotification);
manager.notify(NOTIFICATION_ID,result);
}
}
);
}
 else {
manager.notify(NOTIFICATION_ID,result);
}
}
 else if (conversationsCount == 1) {
String sender=getNotificationSender(topNotification);
builder.setContentTitle(sender);
builder.setContentText(messagesCount + " messages");
visiblePeer=topNotification.getPeer();
builder.setContentIntent(PendingIntent.getActivity(context,0,Intents.openDialog(topNotification.getPeer(),false,context),PendingIntent.FLAG_UPDATE_CURRENT));
final NotificationCompat.InboxStyle inboxStyle=new NotificationCompat.InboxStyle();
for (Notification n : topNotifications) {
if (topNotification.getPeer().getPeerType() == PeerType.GROUP) {
inboxStyle.addLine(getNotificationTextFull(n,messenger));
}
 else {
inboxStyle.addLine(messenger.getFormatter().formatNotificationText(n));
}
}
inboxStyle.setSummaryText(messagesCount + " messages");
Avatar avatar=null;
int id=0;
String avatarTitle="";
switch (visiblePeer.getPeerType()) {
case PRIVATE:
avatar=users().get(visiblePeer.getPeerId()).getAvatar().get();
id=users().get(visiblePeer.getPeerId()).getId();
avatarTitle=users().get(visiblePeer.getPeerId()).getName().get();
break;
case GROUP:
avatar=groups().get(visiblePeer.getPeerId()).getAvatar().get();
id=groups().get(visiblePeer.getPeerId()).getId();
avatarTitle=groups().get(visiblePeer.getPeerId()).getName().get();
break;
}
Drawable avatarDrawable=new AvatarPlaceholderDrawable(avatarTitle,id,18,context);
result=buildSingleConversationNotification(builder,inboxStyle,avatarDrawable);
final NotificationManager manager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
manager.notify(NOTIFICATION_ID,result);
if (avatar != null && avatar.getSmallImage() != null && avatar.getSmallImage().getFileReference() != null) {
messenger.bindFile(avatar.getSmallImage().getFileReference(),true,new FileVMCallback(){
@Override public void onNotDownloaded(){
}
@Override public void onDownloading(float progress){
}
@Override public void onDownloaded(FileSystemReference reference){
RoundedBitmapDrawable d=getRoundedBitmapDrawable(reference);
android.app.Notification result=buildSingleConversationNotification(builder,inboxStyle,d);
manager.notify(NOTIFICATION_ID,result);
}
}
);
}
 else {
manager.notify(NOTIFICATION_ID,result);
}
}
 else {
builder.setContentTitle(context.getString(R.string.app_name));
builder.setContentText(messagesCount + " messages in " + conversationsCount+ " chats");
visiblePeer=null;
builder.setContentIntent(PendingIntent.getActivity(context,0,new Intent(context,ActorMainActivity.class),PendingIntent.FLAG_UPDATE_CURRENT));
NotificationCompat.InboxStyle inboxStyle=new NotificationCompat.InboxStyle();
for (Notification n : topNotifications) {
inboxStyle.addLine(getNotificationTextFull(n,messenger));
}
inboxStyle.setSummaryText(messagesCount + " messages in " + conversationsCount+ " chats");
result=builder.setStyle(inboxStyle).build();
NotificationManager manager=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);
manager.notify(NOTIFICATION_ID,result);
}
}
