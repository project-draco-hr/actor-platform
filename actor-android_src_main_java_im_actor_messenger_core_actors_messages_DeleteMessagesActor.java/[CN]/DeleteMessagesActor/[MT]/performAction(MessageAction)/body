{
  if (action.getChatType() != DialogType.TYPE_USER && action.getChatType() != DialogType.TYPE_GROUP) {
    onActionCompleted(action);
    return;
  }
  Logger.d(TAG,"Sending delete for #" + action.getRid());
  OutPeer peer;
  if (action.getChatType() == DialogType.TYPE_USER) {
    UserModel user=users().get(action.getChatId());
    if (user == null) {
      onActionCompleted(action);
      return;
    }
    peer=new OutPeer(PeerType.PRIVATE,user.getId(),user.getAccessHash());
  }
 else {
    GroupModel group=groups().get(action.getChatId());
    if (group == null) {
      onActionCompleted(action);
      return;
    }
    peer=new OutPeer(PeerType.GROUP,group.getChatId(),group.getAccessHash());
  }
  ArrayList<Long> delete=new ArrayList<Long>();
  delete.add(action.getRid());
  ask(requests().deleteMessage(peer,delete),new FutureCallback<ResponseVoid>(){
    @Override public void onResult(    ResponseVoid result){
      Logger.d(TAG,"Message Deleted #" + action.getRid());
      onActionCompleted(action);
    }
    @Override public void onError(    Throwable throwable){
      Logger.d(TAG,"Message Deleted error #" + action.getRid() + " "+ throwable);
      onActionCompleted(action);
    }
  }
);
}
