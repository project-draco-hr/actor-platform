{
  generator.appendLn("@Override");
  generator.appendLn("public void serialize(BserWriter writer) throws IOException {");
  generator.increaseDepth();
  for (  SchemeAttribute attribute : container.getAttributes()) {
    if (attribute.getType() instanceof SchemePrimitiveType) {
      SchemePrimitiveType primitiveType=(SchemePrimitiveType)attribute.getType();
      if (primitiveType.getName().equals("int32")) {
        generator.appendLn("writer.writeInt(" + attribute.getId() + ", this."+ attribute.getName()+ ");");
      }
 else       if (primitiveType.getName().equals("int64")) {
        generator.appendLn("writer.writeLong(" + attribute.getId() + ", this."+ attribute.getName()+ ");");
      }
 else       if (primitiveType.getName().equals("bool")) {
        generator.appendLn("writer.writeBool(" + attribute.getId() + ", this."+ attribute.getName()+ ");");
      }
 else       if (primitiveType.getName().equals("bytes")) {
        generator.appendLn("if (this." + attribute.getName() + " == null) {");
        generator.increaseDepth();
        generator.appendLn("throw new IOException();");
        generator.decreaseDepth();
        generator.appendLn("}");
        generator.appendLn("writer.writeBytes(" + attribute.getId() + ", this."+ attribute.getName()+ ");");
      }
 else       if (primitiveType.getName().equals("string")) {
        generator.appendLn("if (this." + attribute.getName() + " == null) {");
        generator.increaseDepth();
        generator.appendLn("throw new IOException();");
        generator.decreaseDepth();
        generator.appendLn("}");
        generator.appendLn("writer.writeString(" + attribute.getId() + ", this."+ attribute.getName()+ ");");
      }
 else       if (primitiveType.getName().equals("double")) {
        generator.appendLn("writer.writeDouble(" + attribute.getId() + ", this."+ attribute.getName()+ ");");
      }
 else {
        throw new IOException();
      }
    }
 else     if (attribute.getType() instanceof SchemeStructType) {
      generator.appendLn("if (this." + attribute.getName() + " == null) {");
      generator.increaseDepth();
      generator.appendLn("throw new IOException();");
      generator.decreaseDepth();
      generator.appendLn("}");
      generator.appendLn("writer.writeObject(" + attribute.getId() + ", this."+ attribute.getName()+ ");");
    }
 else     if (attribute.getType() instanceof SchemeEnumType) {
      SchemeEnumType e=(SchemeEnumType)attribute.getType();
      generator.appendLn("if (this." + attribute.getName() + " == null) {");
      generator.increaseDepth();
      generator.appendLn("throw new IOException();");
      generator.decreaseDepth();
      generator.appendLn("}");
      generator.appendLn("writer.writeInt(" + attribute.getId() + ", this."+ attribute.getName()+ ".getValue());");
    }
 else     if (attribute.getType() instanceof SchemeOptionalType) {
      SchemeOptionalType optType=(SchemeOptionalType)attribute.getType();
      if (optType.getType() instanceof SchemePrimitiveType) {
        SchemePrimitiveType primitiveType=(SchemePrimitiveType)optType.getType();
        if (primitiveType.getName().equals("int32")) {
          generator.appendLn("if (this." + attribute.getName() + " != null) {");
          generator.increaseDepth();
          generator.appendLn("writer.writeInt(" + attribute.getId() + ", this."+ attribute.getName()+ ");");
          generator.decreaseDepth();
          generator.appendLn("}");
        }
 else         if (primitiveType.getName().equals("int64")) {
          generator.appendLn("if (this." + attribute.getName() + " != null) {");
          generator.increaseDepth();
          generator.appendLn("writer.writeLong(" + attribute.getId() + ", this."+ attribute.getName()+ ");");
          generator.decreaseDepth();
          generator.appendLn("}");
        }
 else         if (primitiveType.getName().equals("bool")) {
          generator.appendLn("if (this." + attribute.getName() + " != null) {");
          generator.increaseDepth();
          generator.appendLn("writer.writeBool(" + attribute.getId() + ", this."+ attribute.getName()+ ");");
          generator.decreaseDepth();
          generator.appendLn("}");
        }
 else         if (primitiveType.getName().equals("bytes")) {
          generator.appendLn("if (this." + attribute.getName() + " != null) {");
          generator.increaseDepth();
          generator.appendLn("writer.writeBytes(" + attribute.getId() + ", this."+ attribute.getName()+ ");");
          generator.decreaseDepth();
          generator.appendLn("}");
        }
 else         if (primitiveType.getName().equals("string")) {
          generator.appendLn("if (this." + attribute.getName() + " != null) {");
          generator.increaseDepth();
          generator.appendLn("writer.writeString(" + attribute.getId() + ", this."+ attribute.getName()+ ");");
          generator.decreaseDepth();
          generator.appendLn("}");
        }
 else         if (primitiveType.getName().equals("double")) {
          generator.appendLn("if (this." + attribute.getName() + " != null) {");
          generator.increaseDepth();
          generator.appendLn("writer.writeDouble(" + attribute.getId() + ", this."+ attribute.getName()+ ");");
          generator.decreaseDepth();
          generator.appendLn("}");
        }
 else {
          throw new IOException();
        }
      }
 else       if (optType.getType() instanceof SchemeStructType) {
        generator.appendLn("if (this." + attribute.getName() + " != null) {");
        generator.increaseDepth();
        generator.appendLn("writer.writeObject(" + attribute.getId() + ", this."+ attribute.getName()+ ");");
        generator.decreaseDepth();
        generator.appendLn("}");
      }
 else       if (optType.getType() instanceof SchemeEnumType) {
        generator.appendLn("if (this." + attribute.getName() + " != null) {");
        generator.increaseDepth();
        generator.appendLn("writer.writeInt(" + attribute.getId() + ", this."+ attribute.getName()+ ".getValue());");
        generator.decreaseDepth();
        generator.appendLn("}");
      }
 else {
        throw new IOException();
      }
    }
 else     if (attribute.getType() instanceof SchemeListType) {
      SchemeListType listType=(SchemeListType)attribute.getType();
      if (listType.getType() instanceof SchemePrimitiveType) {
        SchemePrimitiveType primitiveType=(SchemePrimitiveType)listType.getType();
        if (primitiveType.getName().equals("int32")) {
          generator.appendLn("writer.writeRepeatedInt(" + attribute.getId() + ", this."+ attribute.getName()+ ");");
        }
 else         if (primitiveType.getName().equals("int64")) {
          generator.appendLn("writer.writeRepeatedLong(" + attribute.getId() + ", this."+ attribute.getName()+ ");");
        }
 else         if (primitiveType.getName().equals("bool")) {
          generator.appendLn("writer.writeRepeatedBool(" + attribute.getId() + ", this."+ attribute.getName()+ ");");
        }
 else         if (primitiveType.getName().equals("bytes")) {
          generator.appendLn("writer.writeRepeatedBytes(" + attribute.getId() + ", this."+ attribute.getName()+ ");");
        }
 else         if (primitiveType.getName().equals("string")) {
          generator.appendLn("writer.writeRepeatedString(" + attribute.getId() + ", this."+ attribute.getName()+ ");");
        }
 else         if (primitiveType.getName().equals("double")) {
          generator.appendLn("writer.writeRepeatedDouble(" + attribute.getId() + ", this."+ attribute.getName()+ ");");
        }
 else {
          throw new IOException();
        }
      }
 else       if (listType.getType() instanceof SchemeStructType) {
        generator.appendLn("writer.writeRepeatedObj(" + attribute.getId() + ", this."+ attribute.getName()+ ");");
      }
 else {
        throw new IOException();
      }
    }
 else {
      throw new IOException();
    }
  }
  generator.decreaseDepth();
  generator.appendLn("}");
  generator.appendLn();
}
