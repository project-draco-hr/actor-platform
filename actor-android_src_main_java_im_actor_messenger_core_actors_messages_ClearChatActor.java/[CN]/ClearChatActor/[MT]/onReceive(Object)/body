{
  if (message instanceof PerformDeletion) {
    PerformDeletion delete=((PerformDeletion)message);
    final long uid=DialogUids.getDialogUid(delete.chatType,delete.chatId);
    Logger.d(TAG,"Performing Deletion " + uid + ", isDelete: "+ delete.isDeletion);
    OutPeer peer;
    final Peer fPeer;
    if (delete.chatType == DialogType.TYPE_USER) {
      UserModel userModel=users().get(delete.chatId);
      if (userModel == null) {
        deletions.remove(uid);
        return;
      }
      peer=new OutPeer(PeerType.PRIVATE,delete.chatId,userModel.getAccessHash());
      fPeer=new Peer(PeerType.PRIVATE,delete.chatId);
    }
 else     if (delete.chatType == DialogType.TYPE_GROUP) {
      GroupModel groupModel=groups().get(delete.chatId);
      if (groupModel == null) {
        deletions.remove(uid);
        return;
      }
      peer=new OutPeer(PeerType.GROUP,delete.chatId,groupModel.getAccessHash());
      fPeer=new Peer(PeerType.GROUP,delete.chatId);
    }
 else {
      deletions.remove(uid);
      return;
    }
    if (delete.isDeletion) {
      ask(requests().deleteChat(peer),new FutureCallback<ResponseSeq>(){
        @Override public void onResult(        ResponseSeq result){
          system().actorOf(SequenceActor.sequence()).send(new SequenceActor.SeqUpdate(result.getSeq(),result.getState(),new UpdateChatDelete(fPeer)));
          deletions.remove(uid);
        }
        @Override public void onError(        Throwable throwable){
          throwable.printStackTrace();
        }
      }
);
    }
 else {
      ask(requests().clearChat(peer),new FutureCallback<ResponseSeq>(){
        @Override public void onResult(        ResponseSeq result){
          system().actorOf(SequenceActor.sequence()).send(new SequenceActor.SeqUpdate(result.getSeq(),result.getState(),new UpdateChatClear(fPeer)));
          deletions.remove(uid);
        }
        @Override public void onError(        Throwable throwable){
          throwable.printStackTrace();
        }
      }
);
    }
  }
 else   if (message instanceof DeleteChat) {
    DeleteChat delete=((DeleteChat)message);
    long uid=DialogUids.getDialogUid(delete.chatType,delete.chatId);
    if (deletions.containsKey(uid)) {
      return;
    }
    deletions.put(uid,true);
    self().send(new PerformDeletion(delete.chatType,delete.chatId,true));
  }
 else   if (message instanceof ClearChat) {
    ClearChat clear=((ClearChat)message);
    long uid=DialogUids.getDialogUid(clear.chatType,clear.chatId);
    if (deletions.containsKey(uid)) {
      return;
    }
    deletions.put(uid,false);
    self().send(new PerformDeletion(clear.chatType,clear.chatId,false));
  }
}
