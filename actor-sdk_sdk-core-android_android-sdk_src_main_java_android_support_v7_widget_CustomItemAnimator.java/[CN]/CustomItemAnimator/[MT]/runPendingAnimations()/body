{
  boolean removalsPending=!mPendingRemovals.isEmpty();
  boolean movesPending=!mPendingMoves.isEmpty();
  boolean changesPending=!mPendingChanges.isEmpty();
  boolean additionsPending=!mPendingAdditions.isEmpty();
  if (!removalsPending && !movesPending && !additionsPending&& !changesPending) {
    return;
  }
  for (  ViewHolder holder : mPendingRemovals) {
    animateRemoveImpl(holder);
  }
  mPendingRemovals.clear();
  if (movesPending) {
    final ArrayList<MoveInfo> moves=new ArrayList<>();
    moves.addAll(mPendingMoves);
    mMovesList.add(moves);
    mPendingMoves.clear();
    Runnable mover=new Runnable(){
      @Override public void run(){
        for (        MoveInfo moveInfo : moves) {
          animateMoveImpl(moveInfo.holder,moveInfo.fromX,moveInfo.fromY,moveInfo.toX,moveInfo.toY);
        }
        moves.clear();
        mMovesList.remove(moves);
      }
    }
;
    if (removalsPending) {
      View view=moves.get(0).holder.itemView;
      ViewCompat.postOnAnimationDelayed(view,mover,getRemoveDuration());
    }
 else {
      mover.run();
    }
  }
  if (changesPending) {
    final ArrayList<ChangeInfo> changes=new ArrayList<>();
    changes.addAll(mPendingChanges);
    mChangesList.add(changes);
    mPendingChanges.clear();
    Runnable changer=new Runnable(){
      @Override public void run(){
        for (        ChangeInfo change : changes) {
          animateChangeImpl(change);
        }
        changes.clear();
        mChangesList.remove(changes);
      }
    }
;
    if (removalsPending) {
      ViewHolder holder=changes.get(0).oldHolder;
      ViewCompat.postOnAnimationDelayed(holder.itemView,changer,getRemoveDuration());
    }
 else {
      changer.run();
    }
  }
  if (additionsPending) {
    final ArrayList<ViewHolder> additions=new ArrayList<>();
    additions.addAll(mPendingAdditions);
    mAdditionsList.add(additions);
    mPendingAdditions.clear();
    Runnable adder=new Runnable(){
      public void run(){
        for (        ViewHolder holder : additions) {
          animateAddImpl(holder);
        }
        additions.clear();
        mAdditionsList.remove(additions);
      }
    }
;
    if (removalsPending || movesPending || changesPending) {
      long removeDuration=removalsPending ? getRemoveDuration() : 0;
      long moveDuration=movesPending ? getMoveDuration() : 0;
      long changeDuration=changesPending ? getChangeDuration() : 0;
      long totalDelay=removeDuration + Math.max(moveDuration,changeDuration);
      View view=additions.get(0).itemView;
      ViewCompat.postOnAnimationDelayed(view,adder,totalDelay);
    }
 else {
      adder.run();
    }
  }
}
