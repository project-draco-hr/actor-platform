{
  if (!isValidated) {
    return;
  }
  isValidated=false;
  if (seq < 0) {
    Log.d(TAG,"Loading fresh state...");
    request(new RequestGetState(),new RpcCallback<ResponseSeq>(){
      @Override public void onResult(      ResponseSeq response){
        if (isValidated) {
          return;
        }
        seq=response.getSeq();
        state=response.getState();
        isValidated=true;
        preferences().putInt(KEY_SEQ,seq);
        preferences().putBytes(KEY_STATE,state);
        Log.d(TAG,"State loaded {seq=" + seq + "}");
        self().sendOnce(new ForceInvalidate(),24 * 60 * 60* 1000L);
        checkFuture();
      }
      @Override public void onError(      RpcException e){
        if (isValidated) {
          return;
        }
        isValidated=true;
        invalidate();
      }
    }
);
  }
 else {
    Log.d(TAG,"Loading difference...");
    request(new RequestGetDifference(seq,state),new RpcCallback<ResponseGetDifference>(){
      @Override public void onResult(      ResponseGetDifference response){
        if (isValidated) {
          return;
        }
        Log.d(TAG,"Difference loaded {seq=" + response.getSeq() + "}");
        processor.applyRelated(response.getUsers(),response.getGroups(),response.getContacts(),false);
        for (        DifferenceUpdate u : response.getUpdates()) {
          try {
            Update update=parser.read(u.getUpdateHeader(),u.getUpdate());
            processor.processUpdate(update);
          }
 catch (          IOException e) {
            e.printStackTrace();
            Log.d(TAG,"Broken update #" + u.getUpdateHeader() + ": ignoring");
          }
        }
        processor.applyRelated(response.getUsers(),response.getGroups(),response.getContacts(),true);
        seq=response.getSeq();
        state=response.getState();
        isValidated=true;
        preferences().putInt(KEY_SEQ,seq);
        preferences().putBytes(KEY_STATE,state);
        self().sendOnce(new ForceInvalidate(),24 * 60 * 60* 1000L);
        checkFuture();
        if (response.needMore()) {
          invalidate();
        }
      }
      @Override public void onError(      RpcException e){
        if (isValidated) {
          return;
        }
        isValidated=true;
        invalidate();
      }
    }
);
  }
}
