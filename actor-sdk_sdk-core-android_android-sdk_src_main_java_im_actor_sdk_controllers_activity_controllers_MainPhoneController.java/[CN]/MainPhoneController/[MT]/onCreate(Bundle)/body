{
  Intent intent=getIntent();
  if (intent != null) {
    if (intent.getAction() != null) {
      if (intent.getAction().equals(Intent.ACTION_VIEW) && intent.getData() != null) {
        joinGroupUrl=getIntent().getData().toString();
      }
 else       if (intent.getAction().equals(Intent.ACTION_SEND)) {
        if ("text/plain".equals(getIntent().getType())) {
          sendText=intent.getStringExtra(Intent.EXTRA_TEXT);
        }
 else {
          sendUriString=intent.getParcelableExtra(Intent.EXTRA_STREAM).toString();
        }
      }
 else       if (intent.getAction().equals(Intent.ACTION_SEND_MULTIPLE)) {
        ArrayList<Uri> imageUris=intent.getParcelableArrayListExtra(Intent.EXTRA_STREAM);
        if (imageUris != null) {
          for (          Uri u : imageUris) {
            sendUriMultiple.add(u.toString());
          }
        }
      }
    }
    if (intent.getExtras() != null) {
      Bundle extras=getIntent().getExtras();
      if (extras.containsKey("share_user")) {
        shareUser=extras.getInt("share_user");
      }
 else       if (extras.containsKey("forward_text")) {
        forwardText=extras.getString("forward_text");
        forwardTextRaw=extras.getString("forward_text_raw");
      }
 else       if (extras.containsKey("forward_doc_descriptor")) {
        forwardDocDescriptor=extras.getString("forward_doc_descriptor");
        forwardDocIsDoc=extras.getBoolean("forward_doc_is_doc");
      }
    }
  }
  setContentView(R.layout.actor_activity_main);
  getActivity().setSupportActionBar(((Toolbar)findViewById(R.id.toolbar)));
  syncInProgressView=findViewById(R.id.syncInProgress);
  emptyContactsView=findViewById(R.id.emptyContacts);
  ((TextView)findViewById(R.id.addContactButtonText)).setTypeface(Fonts.medium());
  ((TextView)findViewById(R.id.inviteButtonText)).setTypeface(Fonts.medium());
  isFabVisible=false;
  fabContent=findViewById(R.id.fabContainer);
  fabRoot=(FloatingActionButton)findViewById(R.id.rootFab);
  if (ActorSDK.sharedActor().style.fabColor != 0) {
    fabRoot.setColorNormal(ActorSDK.sharedActor().style.fabColor);
  }
  if (ActorSDK.sharedActor().style.fabColorPressed != 0) {
    fabRoot.setColorPressed(ActorSDK.sharedActor().style.fabColorPressed);
  }
  fabRoot.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      showFab();
    }
  }
);
  fabContent.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      goneFab();
    }
  }
);
  searchList=(RecyclerView)findViewById(R.id.searchList);
  searchList.setLayoutManager(new ChatLinearLayoutManager(getActivity()));
  searchContainer=findViewById(R.id.searchCont);
  searchEmptyView=findViewById(R.id.empty);
  searchHintView=findViewById(R.id.searchHint);
  searchHintView.setVisibility(View.GONE);
  searchEmptyView.setVisibility(View.GONE);
  pager=(ViewPager)findViewById(R.id.vp_pager);
  pager.setOffscreenPageLimit(2);
  homePagerAdapter=new HomePagerAdapter(getFragmentManager());
  pager.setAdapter(homePagerAdapter);
  pager.setCurrentItem(0);
  pager.setOnPageChangeListener(new ViewPager.OnPageChangeListener(){
    private int prevPage=-1;
    @Override public void onPageScrolled(    int position,    float positionOffset,    int positionOffsetPixels){
    }
    @Override public void onPageSelected(    int position){
      if (position == 0) {
        if (position != prevPage) {
        }
        if (prevPage == 1) {
        }
        prevPage=position;
      }
 else       if (position == 1) {
        if (position != prevPage) {
        }
        if (prevPage == 0) {
        }
        prevPage=position;
      }
    }
    @Override public void onPageScrollStateChanged(    int state){
    }
  }
);
  Style style=ActorSDK.sharedActor().style;
  com.getbase.floatingactionbutton.FloatingActionButton fabCompose=(FloatingActionButton)findViewById(R.id.composeContainer);
  if (style.fabColor != 0) {
    fabCompose.setColorNormal(style.fabColor);
  }
  if (style.fabColorPressed != 0) {
    fabCompose.setColorPressed(style.fabColorPressed);
  }
  fabCompose.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      goneFab();
      startActivity(new Intent(getActivity(),ComposeActivity.class));
    }
  }
);
  com.getbase.floatingactionbutton.FloatingActionButton fabCreateGroup=(FloatingActionButton)findViewById(R.id.createGroupContainer);
  if (style.fabColor != 0) {
    fabCreateGroup.setColorNormal(style.fabColor);
  }
  if (style.fabColorPressed != 0) {
    fabCreateGroup.setColorPressed(style.fabColorPressed);
  }
  fabCreateGroup.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      goneFab();
      startActivity(new Intent(getActivity(),CreateGroupActivity.class));
    }
  }
);
  com.getbase.floatingactionbutton.FloatingActionButton fabAddContact=(FloatingActionButton)findViewById(R.id.addContactContainer);
  if (style.fabColor != 0) {
    fabAddContact.setColorNormal(style.fabColor);
  }
  if (style.fabColorPressed != 0) {
    fabAddContact.setColorPressed(style.fabColorPressed);
  }
  fabAddContact.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      goneFab();
      startActivity(new Intent(getActivity(),AddContactActivity.class));
    }
  }
);
  findViewById(R.id.addContactButton).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      startActivity(new Intent(getActivity(),AddContactActivity.class));
    }
  }
);
  findViewById(R.id.inviteButton).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      String inviteMessage=getResources().getString(R.string.invite_message);
      Intent sendIntent=new Intent(Intent.ACTION_SEND);
      sendIntent.putExtra(Intent.EXTRA_TEXT,inviteMessage);
      sendIntent.setType("text/plain");
      startActivity(sendIntent);
    }
  }
);
}
