{
  super.update(data,position,isUpdated,context);
  this.fileMessage=(DocumentContent)data.getContent();
  if (data.getSenderId() == myUid()) {
    messageBubble.setBackgroundResource(R.drawable.conv_bubble_media_out);
  }
 else {
    messageBubble.setBackgroundResource(R.drawable.conv_bubble_media_in);
  }
  if (data.getSenderId() == myUid()) {
    stateIcon.setVisibility(View.VISIBLE);
switch (data.getMessageState()) {
case ERROR:
      stateIcon.setResource(R.drawable.msg_error);
    stateIcon.setTint(errorColor);
  break;
default :
case PENDING:
stateIcon.setResource(R.drawable.msg_clock);
stateIcon.setTint(pendingColor);
break;
case READ:
stateIcon.setResource(R.drawable.msg_check_2);
stateIcon.setTint(readColor);
break;
case RECEIVED:
stateIcon.setResource(R.drawable.msg_check_2);
stateIcon.setTint(receivedColor);
break;
case SENT:
stateIcon.setResource(R.drawable.msg_check_1);
stateIcon.setTint(sentColor);
break;
}
}
 else {
stateIcon.setVisibility(View.GONE);
}
int w, h;
if (data.getContent() instanceof PhotoContent) {
w=((PhotoContent)data.getContent()).getW();
h=((PhotoContent)data.getContent()).getH();
duration.setVisibility(View.GONE);
}
 else if (data.getContent() instanceof VideoContent) {
w=((VideoContent)data.getContent()).getW();
h=((VideoContent)data.getContent()).getH();
duration.setVisibility(View.VISIBLE);
duration.setText(Formatter.duration(((VideoContent)data.getContent()).getDuration()));
}
 else {
throw new RuntimeException("Unsupported content");
}
int maxHeight=context.getResources().getDisplayMetrics().heightPixels - Screen.dp(96 + 32);
maxHeight=Math.min(Screen.dp(360),maxHeight);
int maxWidth=context.getResources().getDisplayMetrics().widthPixels - Screen.dp(32 + 48);
maxWidth=Math.min(Screen.dp(360),maxWidth);
float scale=Math.min(maxWidth / (float)w,maxHeight / (float)h);
int bubbleW=(int)(scale * w);
int bubbleH=(int)(scale * h);
imageKitView.setLayoutParams(new FrameLayout.LayoutParams(bubbleW,bubbleH));
overlay.setLayoutParams(new FrameLayout.LayoutParams(bubbleW,bubbleH));
time.setText(TextUtils.formatTime(data.getDate()));
if (isUpdated) {
imageKitView.setSrc(null);
if (removeFileVM != null) {
removeFileVM.detach();
removeFileVM=null;
}
if (fileMessage.getSource() instanceof FileRemoteSource) {
final DocumentContent doc=fileMessage;
FileRemoteSource remoteSource=(FileRemoteSource)fileMessage.getSource();
removeFileVM=new FileVM(remoteSource.getFileLocation(),false,messenger()){
private boolean isFastThumbLoaded=false;
private void loadFastThumb(){
if (isFastThumbLoaded) {
return;
}
if (doc.getFastThumb() != null) {
try {
post(ImageLoading.loadBitmap(doc.getFastThumb().getImage()));
}
 catch (ImageLoadException e) {
e.printStackTrace();
}
}
isFastThumbLoaded=true;
}
@Override protected void onObjectReceived(Object obj){
if (obj instanceof Bitmap) {
imageKitView.setSrc((Bitmap)obj);
}
 else if (obj instanceof DownloadProgress) {
showProgress((int)(100 * ((DownloadProgress)obj).getProgress()));
}
 else if (obj instanceof DownloadStopped) {
showIcon(R.drawable.conv_media_download);
}
 else if (obj instanceof DownloadCompleted) {
hideProgress(true);
}
}
@Override public void onNotDownloaded(){
loadFastThumb();
post(new DownloadStopped());
}
@Override public void onDownloading(float progress){
loadFastThumb();
post(new DownloadProgress(progress));
}
@Override public void onDownloaded(FileReference reference){
post(new DownloadCompleted());
}
}
;
}
}
 else {
}
}
