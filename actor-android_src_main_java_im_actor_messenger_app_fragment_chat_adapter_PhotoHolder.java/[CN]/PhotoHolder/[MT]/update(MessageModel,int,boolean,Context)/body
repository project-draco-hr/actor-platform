{
  super.update(data,position,isUpdated,context);
  this.message=data;
  this.fileMessage=(AbsFileMessage)data.getContent();
  if (data.getRaw().getSenderId() == myUid()) {
    messageBubble.setBackgroundResource(R.drawable.conv_bubble_media_out);
  }
 else {
    messageBubble.setBackgroundResource(R.drawable.conv_bubble_media_in);
  }
  if (data.getRaw().getSenderId() == myUid()) {
    stateIcon.setVisibility(View.VISIBLE);
switch (data.getRaw().getMessageState()) {
case ERROR:
      stateIcon.setResource(R.drawable.msg_error);
    stateIcon.setTint(errorColor);
  break;
default :
case PENDING:
stateIcon.setResource(R.drawable.msg_clock);
stateIcon.setTint(pendingColor);
break;
case READ:
stateIcon.setResource(R.drawable.msg_check_2);
stateIcon.setTint(readColor);
break;
case RECEIVED:
stateIcon.setResource(R.drawable.msg_check_2);
stateIcon.setTint(receivedColor);
break;
case SENT:
stateIcon.setResource(R.drawable.msg_check_1);
stateIcon.setTint(sentColor);
break;
}
}
 else {
stateIcon.setVisibility(View.GONE);
}
int w, h;
FastThumb thumb;
if (data.getContent() instanceof PhotoMessage) {
w=((PhotoMessage)data.getContent()).getW();
h=((PhotoMessage)data.getContent()).getH();
thumb=((PhotoMessage)data.getContent()).getFastThumb();
duration.setVisibility(View.GONE);
}
 else if (data.getContent() instanceof VideoMessage) {
w=((VideoMessage)data.getContent()).getW();
h=((VideoMessage)data.getContent()).getH();
thumb=((VideoMessage)data.getContent()).getFastThumb();
duration.setVisibility(View.VISIBLE);
duration.setText(Formatter.duration(((VideoMessage)data.getContent()).getDuration()));
}
 else {
return;
}
int maxHeight=context.getResources().getDisplayMetrics().heightPixels - Screen.dp(96 + 32);
maxHeight=Math.min(Screen.dp(360),maxHeight);
int maxWidth=context.getResources().getDisplayMetrics().widthPixels - Screen.dp(32 + 48);
maxWidth=Math.min(Screen.dp(360),maxWidth);
float scale=Math.min(maxWidth / (float)w,maxHeight / (float)h);
int bubbleW=(int)(scale * w);
int bubbleH=(int)(scale * h);
imageKitView.setLayoutParams(new FrameLayout.LayoutParams(bubbleW,bubbleH));
overlay.setLayoutParams(new FrameLayout.LayoutParams(bubbleW,bubbleH));
time.setText(TextUtils.formatTime(data.getRaw().getTime()));
if (isUpdated) {
if (thumb != null) {
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
try {
imageKitView.setSrc(ImageLoading.loadReuse(thumb.getImage(),smallPreview).getRes());
}
 catch (ImageLoadException e) {
e.printStackTrace();
imageKitView.setSrc(null);
}
}
 else {
try {
imageKitView.setSrc(ImageLoading.loadBitmap(thumb.getImage()));
}
 catch (ImageLoadException e) {
e.printStackTrace();
imageKitView.setSrc(null);
}
}
}
 else {
imageKitView.setSrc(null);
}
imageKitView.clear();
isInitialBind=true;
hideProgress(false);
isInitialBind=false;
}
isInitialBind=true;
if (fileMessage.getUploadPath() != null) {
if (message.getContent() instanceof PhotoMessage) {
imageKitView.requestPhoto(fileMessage.getUploadPath());
}
 else if (message.getContent() instanceof VideoMessage) {
imageKitView.requestVideo(fileMessage.getUploadPath());
}
UploadModel.uploadState(message.getRid()).addUiSubscriber(uploadStateListener);
}
 else {
if (fileMessage.isDownloaded()) {
if (message.getContent() instanceof PhotoMessage) {
imageKitView.requestPhoto(type,id,message.getRaw());
hideProgress(true);
}
 else if (message.getContent() instanceof VideoMessage) {
imageKitView.requestVideo(type,id,message.getRaw());
showIcon(R.drawable.conv_video_play);
}
}
 else {
DownloadModel.downloadState(fileMessage.getLocation().getFileId()).addUiSubscriber(downloadStateListener);
}
}
isInitialBind=false;
}
