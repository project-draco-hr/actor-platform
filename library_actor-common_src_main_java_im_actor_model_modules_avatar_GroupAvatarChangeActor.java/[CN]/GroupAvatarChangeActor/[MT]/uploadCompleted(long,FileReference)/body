{
  if (!tasksMap.containsKey(rid)) {
    return;
  }
  final int gid=tasksMap.get(rid);
  long accessHash=getGroup(gid).getAccessHash();
  if (currentTasks.get(gid) != rid) {
    return;
  }
  request(new RequestEditGroupAvatar(new GroupOutPeer(gid,accessHash),rid,new FileLocation(fileReference.getFileId(),fileReference.getAccessHash())),new RpcCallback<ResponseEditGroupAvatar>(){
    @Override public void onResult(    ResponseEditGroupAvatar response){
      updates().onUpdateReceived(new SeqUpdate(response.getSeq(),response.getState(),UpdateGroupAvatarChanged.HEADER,new UpdateGroupAvatarChanged(gid,rid,myUid(),response.getAvatar(),response.getDate()).toByteArray()));
      updates().onUpdateReceived(new ExecuteAfter(response.getSeq(),new Runnable(){
        @Override public void run(){
          self().send(new AvatarChanged(gid,rid));
        }
      }
));
    }
    @Override public void onError(    RpcException e){
      modules().getGroupsModule().getAvatarVM(gid).getUploadState().change(new AvatarUploadState(null,false));
    }
  }
);
}
