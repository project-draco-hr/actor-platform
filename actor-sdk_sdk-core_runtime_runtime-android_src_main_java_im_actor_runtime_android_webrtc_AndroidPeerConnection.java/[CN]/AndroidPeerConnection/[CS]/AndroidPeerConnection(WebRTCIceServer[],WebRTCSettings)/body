{
  if (LIBJINGLE_LOGS) {
    Logging.enableTracing("logcat:",EnumSet.of(Logging.TraceLevel.TRACE_ALL),Logging.Severity.LS_SENSITIVE);
  }
  final ArrayList<PeerConnection.IceServer> servers=new ArrayList<>();
  PeerConnection.IceServer ice;
  for (  WebRTCIceServer webRTCIceServer : webRTCIceServers) {
    if (webRTCIceServer.getUsername() != null) {
      ice=new PeerConnection.IceServer(webRTCIceServer.getUrl(),webRTCIceServer.getUsername(),webRTCIceServer.getCredential() == null ? "" : webRTCIceServer.getCredential());
    }
 else {
      ice=new PeerConnection.IceServer(webRTCIceServer.getUrl());
    }
    servers.add(ice);
  }
  AndroidWebRTCRuntimeProvider.postToHandler(new Runnable(){
    @Override public void run(){
      AndroidPeerConnection.this.peerConnection=AndroidWebRTCRuntimeProvider.FACTORY.createPeerConnection(servers,getMediaConstraints(),new PeerConnection.Observer(){
        @Override public void onSignalingChange(        PeerConnection.SignalingState signalingState){
        }
        @Override public void onIceConnectionChange(        PeerConnection.IceConnectionState iceConnectionState){
        }
        @Override public void onIceConnectionReceivingChange(        boolean b){
        }
        @Override public void onIceGatheringChange(        PeerConnection.IceGatheringState iceGatheringState){
        }
        @Override public void onIceCandidate(        IceCandidate candidate){
          for (          WebRTCPeerConnectionCallback c : callbacks) {
            c.onCandidate(candidate.sdpMLineIndex,candidate.sdpMid,candidate.sdp);
          }
        }
        @Override public void onAddStream(        MediaStream stream){
          AndroidMediaStream stream1=new AndroidMediaStream(stream);
          streams.put(stream,stream1);
          if (mediaStreamCallback != null && !stream1.isLocal()) {
            mediaStreamCallback.onRemoteStreamAdd(stream1);
          }
          for (          WebRTCPeerConnectionCallback c : callbacks) {
            c.onStreamAdded(stream1);
          }
        }
        @Override public void onRemoveStream(        MediaStream stream){
          AndroidMediaStream stream1=streams.get(stream);
          if (stream1 != null) {
            for (            WebRTCPeerConnectionCallback c : callbacks) {
              c.onStreamRemoved(stream1);
            }
          }
          if (mediaStreamCallback != null) {
            mediaStreamCallback.onRemoteStreamRemove(stream1);
          }
          try {
            stream.videoTracks.get(0).dispose();
          }
 catch (          Exception e) {
          }
        }
        @Override public void onDataChannel(        DataChannel dataChannel){
        }
        @Override public void onRenegotiationNeeded(){
          for (          WebRTCPeerConnectionCallback c : callbacks) {
            c.onRenegotiationNeeded();
          }
        }
      }
);
    }
  }
);
}
