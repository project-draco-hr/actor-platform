{
  int keyLen=key.length;
  if (keyLen < 16 || keyLen > 32 || (keyLen & 7) != 0) {
    throw new IllegalArgumentException("Key length not 128/192/256 bits.");
  }
  int KC=keyLen >>> 2;
  ROUNDS=KC + 6;
  int[][] W=new int[ROUNDS + 1][4];
switch (KC) {
case 4:
{
      int t0=Pack.littleEndianToInt(key,0);
      W[0][0]=t0;
      int t1=Pack.littleEndianToInt(key,4);
      W[0][1]=t1;
      int t2=Pack.littleEndianToInt(key,8);
      W[0][2]=t2;
      int t3=Pack.littleEndianToInt(key,12);
      W[0][3]=t3;
      for (int i=1; i <= 10; ++i) {
        int u=subWord(shift(t3,8)) ^ rcon[i - 1];
        t0^=u;
        W[i][0]=t0;
        t1^=t0;
        W[i][1]=t1;
        t2^=t1;
        W[i][2]=t2;
        t3^=t2;
        W[i][3]=t3;
      }
      break;
    }
case 6:
{
    int t0=Pack.littleEndianToInt(key,0);
    W[0][0]=t0;
    int t1=Pack.littleEndianToInt(key,4);
    W[0][1]=t1;
    int t2=Pack.littleEndianToInt(key,8);
    W[0][2]=t2;
    int t3=Pack.littleEndianToInt(key,12);
    W[0][3]=t3;
    int t4=Pack.littleEndianToInt(key,16);
    W[1][0]=t4;
    int t5=Pack.littleEndianToInt(key,20);
    W[1][1]=t5;
    int rcon=1;
    int u=subWord(shift(t5,8)) ^ rcon;
    rcon<<=1;
    t0^=u;
    W[1][2]=t0;
    t1^=t0;
    W[1][3]=t1;
    t2^=t1;
    W[2][0]=t2;
    t3^=t2;
    W[2][1]=t3;
    t4^=t3;
    W[2][2]=t4;
    t5^=t4;
    W[2][3]=t5;
    for (int i=3; i < 12; i+=3) {
      u=subWord(shift(t5,8)) ^ rcon;
      rcon<<=1;
      t0^=u;
      W[i][0]=t0;
      t1^=t0;
      W[i][1]=t1;
      t2^=t1;
      W[i][2]=t2;
      t3^=t2;
      W[i][3]=t3;
      t4^=t3;
      W[i + 1][0]=t4;
      t5^=t4;
      W[i + 1][1]=t5;
      u=subWord(shift(t5,8)) ^ rcon;
      rcon<<=1;
      t0^=u;
      W[i + 1][2]=t0;
      t1^=t0;
      W[i + 1][3]=t1;
      t2^=t1;
      W[i + 2][0]=t2;
      t3^=t2;
      W[i + 2][1]=t3;
      t4^=t3;
      W[i + 2][2]=t4;
      t5^=t4;
      W[i + 2][3]=t5;
    }
    u=subWord(shift(t5,8)) ^ rcon;
    t0^=u;
    W[12][0]=t0;
    t1^=t0;
    W[12][1]=t1;
    t2^=t1;
    W[12][2]=t2;
    t3^=t2;
    W[12][3]=t3;
    break;
  }
case 8:
{
  int t0=Pack.littleEndianToInt(key,0);
  W[0][0]=t0;
  int t1=Pack.littleEndianToInt(key,4);
  W[0][1]=t1;
  int t2=Pack.littleEndianToInt(key,8);
  W[0][2]=t2;
  int t3=Pack.littleEndianToInt(key,12);
  W[0][3]=t3;
  int t4=Pack.littleEndianToInt(key,16);
  W[1][0]=t4;
  int t5=Pack.littleEndianToInt(key,20);
  W[1][1]=t5;
  int t6=Pack.littleEndianToInt(key,24);
  W[1][2]=t6;
  int t7=Pack.littleEndianToInt(key,28);
  W[1][3]=t7;
  int u, rcon=1;
  for (int i=2; i < 14; i+=2) {
    u=subWord(shift(t7,8)) ^ rcon;
    rcon<<=1;
    t0^=u;
    W[i][0]=t0;
    t1^=t0;
    W[i][1]=t1;
    t2^=t1;
    W[i][2]=t2;
    t3^=t2;
    W[i][3]=t3;
    u=subWord(t3);
    t4^=u;
    W[i + 1][0]=t4;
    t5^=t4;
    W[i + 1][1]=t5;
    t6^=t5;
    W[i + 1][2]=t6;
    t7^=t6;
    W[i + 1][3]=t7;
  }
  u=subWord(shift(t7,8)) ^ rcon;
  t0^=u;
  W[14][0]=t0;
  t1^=t0;
  W[14][1]=t1;
  t2^=t1;
  W[14][2]=t2;
  t3^=t2;
  W[14][3]=t3;
  break;
}
default :
{
throw new IllegalStateException("Should never get here");
}
}
if (!forEncryption) {
for (int j=1; j < ROUNDS; j++) {
for (int i=0; i < 4; i++) {
W[j][i]=inv_mcol(W[j][i]);
}
}
}
return W;
}
