{
  applyRelated(users,groups,false);
  context().getMessagesModule().getOwnReadActor().send(new OwnReadActor.StartGetDifference());
  CombinedDifference combinedDifference=GetDiffCombiner.buildDiff(updates);
  for (  Peer peer : combinedDifference.getReceived().keySet()) {
    long time=combinedDifference.getReceived().get(peer);
    messagesProcessor.onMessageReceived(buildApiPeer(peer),time);
  }
  for (  Peer peer : combinedDifference.getRead().keySet()) {
    long time=combinedDifference.getRead().get(peer);
    messagesProcessor.onMessageRead(buildApiPeer(peer),time);
  }
  for (  Peer peer : combinedDifference.getReadByMe().keySet()) {
    long time=combinedDifference.getReadByMe().get(peer);
    messagesProcessor.onMessageReadByMe(buildApiPeer(peer),time);
  }
  for (  Peer peer : combinedDifference.getMessages().keySet()) {
    messagesProcessor.onMessages(buildApiPeer(peer),combinedDifference.getMessages().get(peer));
  }
  for (  Update u : combinedDifference.getOtherUpdates()) {
    processUpdate(u);
  }
  if (combinedDifference.getCounters() != null) {
    messagesProcessor.onCountersChanged(combinedDifference.getCounters());
  }
  context().getMessagesModule().getOwnReadActor().send(new OwnReadActor.StopGetDifference());
  applyRelated(users,groups,true);
}
