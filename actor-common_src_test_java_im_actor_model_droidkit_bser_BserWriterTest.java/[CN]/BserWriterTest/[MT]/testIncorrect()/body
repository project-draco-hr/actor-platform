{
  try {
    new BserWriter(null);
    throw new AssertionError();
  }
 catch (  Exception e) {
  }
  try {
    new MockSerialization(){
      @Override protected void perform(      BserWriter writer) throws IOException {
        writer.writeInt(0,0);
      }
    }
.buildArray();
    throw new AssertionError();
  }
 catch (  Exception e) {
  }
  try {
    new MockSerialization(){
      @Override protected void perform(      BserWriter writer) throws IOException {
        writer.writeBytes(1,null);
      }
    }
.buildArray();
    throw new AssertionError();
  }
 catch (  Exception e) {
  }
  try {
    new MockSerialization(){
      @Override protected void perform(      BserWriter writer) throws IOException {
        writer.writeString(1,null);
      }
    }
.buildArray();
    throw new AssertionError();
  }
 catch (  Exception e) {
  }
  try {
    new MockSerialization(){
      @Override protected void perform(      BserWriter writer) throws IOException {
        writer.writeRepeatedLong(1,null);
      }
    }
.buildArray();
    throw new AssertionError();
  }
 catch (  Exception e) {
  }
  try {
    new MockSerialization(){
      @Override protected void perform(      BserWriter writer) throws IOException {
        writer.writeRepeatedInt(1,null);
      }
    }
.buildArray();
    throw new AssertionError();
  }
 catch (  Exception e) {
  }
  try {
    new MockSerialization(){
      @Override protected void perform(      BserWriter writer) throws IOException {
        writer.writeRepeatedBool(1,null);
      }
    }
.buildArray();
    throw new AssertionError();
  }
 catch (  Exception e) {
  }
  try {
    new MockSerialization(){
      @Override protected void perform(      BserWriter writer) throws IOException {
        writer.writeRepeatedObj(1,null);
      }
    }
.buildArray();
    throw new AssertionError();
  }
 catch (  Exception e) {
  }
  try {
    new MockSerialization(){
      @Override protected void perform(      BserWriter writer) throws IOException {
        writer.writeObject(1,null);
      }
    }
.buildArray();
    throw new AssertionError();
  }
 catch (  Exception e) {
  }
  try {
    new MockSerialization(){
      @Override protected void perform(      BserWriter writer) throws IOException {
        writer.writeRaw(null);
      }
    }
.buildArray();
    throw new AssertionError();
  }
 catch (  Exception e) {
  }
  try {
    new MockSerialization(){
      @Override protected void perform(      BserWriter writer) throws IOException {
        List list=new ArrayList();
        for (int i=0; i < 2000; i++) {
          list.add(null);
        }
        writer.writeRepeatedLong(1,list);
      }
    }
.buildArray();
    throw new AssertionError();
  }
 catch (  Exception e) {
  }
  try {
    new MockSerialization(){
      @Override protected void perform(      BserWriter writer) throws IOException {
        List list=new ArrayList();
        for (int i=0; i < 2000; i++) {
          list.add(null);
        }
        writer.writeRepeatedInt(1,list);
      }
    }
.buildArray();
    throw new AssertionError();
  }
 catch (  Exception e) {
  }
  try {
    new MockSerialization(){
      @Override protected void perform(      BserWriter writer) throws IOException {
        List list=new ArrayList();
        for (int i=0; i < 2000; i++) {
          list.add(null);
        }
        writer.writeRepeatedObj(1,list);
      }
    }
.buildArray();
    throw new AssertionError();
  }
 catch (  Exception e) {
  }
  try {
    new MockSerialization(){
      @Override protected void perform(      BserWriter writer) throws IOException {
        List list=new ArrayList();
        for (int i=0; i < 2000; i++) {
          list.add(null);
        }
        writer.writeRepeatedBool(1,list);
      }
    }
.buildArray();
    throw new AssertionError();
  }
 catch (  Exception e) {
  }
  try {
    new MockSerialization(){
      @Override protected void perform(      BserWriter writer) throws IOException {
        writer.writeBytes(1,new byte[2048 * 2048 + 1]);
      }
    }
.buildArray();
    throw new AssertionError();
  }
 catch (  Exception e) {
  }
}
