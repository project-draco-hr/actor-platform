{
  controller.answerCall();
  Log.d(TAG,"onIncomingCall");
  pendingCandidates=new ArrayList<>();
  isReady=false;
  JsArray<JsIceServer> servers=JsArray.createArray().cast();
  servers.push(JsIceServer.create("stun:62.4.22.219:3478"));
  servers.push(JsIceServer.create("turn:62.4.22.219:3478?transport=tcp","actor","password"));
  servers.push(JsIceServer.create("turn:62.4.22.219:3478?transport=udp","actor","password"));
  peerConnection=JsPeerConnection.create(JsPeerConnectionConfig.create(servers));
  peerConnection.setListener(new JsPeerConnectionListener(){
    @Override public void onIceCandidate(    JsRTCIceCandidate candidate){
      Log.d(TAG,"onIceCandidate: " + JsonUtils.stringify(candidate));
      if (candidate != null) {
        controller.sendSignaling(new CandidateSignal(candidate.getId(),candidate.getLabel(),candidate.getSDP()));
      }
    }
    @Override public void onStreamAdded(    JsMediaStream stream){
      Log.d(TAG,"onStreamAdded: " + JsonUtils.stringify(stream));
      JsAudio.playStream(stream);
    }
  }
);
  JsStreaming.getUserAudio().then(new Consumer<JsMediaStream>(){
    @Override public void apply(    JsMediaStream jsMediaStream){
      Log.d(TAG,"Audio is created");
      peerConnection.addStream(jsMediaStream);
    }
  }
).failure(new Consumer<Exception>(){
    @Override public void apply(    Exception e){
      Log.d(TAG,"Audio failured");
    }
  }
);
}
