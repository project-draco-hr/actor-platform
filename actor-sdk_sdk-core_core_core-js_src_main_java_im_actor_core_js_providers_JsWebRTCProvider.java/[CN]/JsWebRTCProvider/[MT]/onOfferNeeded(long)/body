{
  Log.d(TAG,"onOfferNeeded");
  createPeerConnection(callId);
  createAudioStream(callId,"nothing").mapPromise(new Function<String,Promise<JsSessionDescription>>(){
    @Override public Promise<JsSessionDescription> apply(    String mediaStream){
      return peerConnection.createOffer();
    }
  }
).mapPromise(new Function<JsSessionDescription,Promise<JsSessionDescription>>(){
    @Override public Promise<JsSessionDescription> apply(    JsSessionDescription description){
      if (runningCallId == callId) {
        return peerConnection.setLocalDescription(description);
      }
 else {
        throw new RuntimeException("Obsolete connection");
      }
    }
  }
).then(new Consumer<JsSessionDescription>(){
    @Override public void apply(    JsSessionDescription jsSessionDescription){
      if (runningCallId == callId) {
        controller.sendOffer(jsSessionDescription.getSDP());
      }
    }
  }
).failure(new Consumer<Exception>(){
    @Override public void apply(    Exception e){
      if (runningCallId == callId) {
        Log.w(TAG,"Unable to create offer");
        controller.endCall();
      }
    }
  }
).done(JsScheduller.scheduller());
}
