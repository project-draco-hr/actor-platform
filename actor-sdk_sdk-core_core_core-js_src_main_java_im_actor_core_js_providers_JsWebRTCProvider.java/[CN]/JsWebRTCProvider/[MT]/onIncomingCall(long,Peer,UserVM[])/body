{
  runningCallId=callId;
  controller.answerCall();
  Log.d(TAG,"onIncomingCall");
  pendingCandidates=new ArrayList<>();
  isReady=false;
  JsArray<JsIceServer> servers=JsArray.createArray().cast();
  servers.push(JsIceServer.create("stun:62.4.22.219:3478"));
  servers.push(JsIceServer.create("turn:62.4.22.219:3478?transport=tcp","actor","password"));
  servers.push(JsIceServer.create("turn:62.4.22.219:3478?transport=udp","actor","password"));
  peerConnection=JsPeerConnection.create(JsPeerConnectionConfig.create(servers));
  peerConnection.setListener(new JsPeerConnectionListener(){
    @Override public void onIceCandidate(    JsRTCIceCandidate candidate){
      if (runningCallId != callId) {
        return;
      }
      controller.sendSignaling(new CandidateSignal(candidate.getId(),candidate.getLabel(),candidate.getSDP()));
    }
    @Override public void onIceCandidatesEnded(){
      if (runningCallId != callId) {
        return;
      }
    }
    @Override public void onStreamAdded(    JsMediaStream stream){
      if (runningCallId != callId) {
        return;
      }
      voicePlayback=JsAudio.create();
      voicePlayback.setStream(stream);
      voicePlayback.play();
    }
  }
);
  JsStreaming.getUserAudio().then(new Consumer<JsMediaStream>(){
    @Override public void apply(    JsMediaStream jsMediaStream){
      if (runningCallId != callId) {
        jsMediaStream.stopAll();
        return;
      }
      Log.d(TAG,"Audio is created");
      voiceCapture=jsMediaStream;
      peerConnection.addStream(voiceCapture);
    }
  }
).failure(new Consumer<Exception>(){
    @Override public void apply(    Exception e){
      if (runningCallId != callId) {
        return;
      }
      Log.d(TAG,"Audio failured");
    }
  }
);
}
