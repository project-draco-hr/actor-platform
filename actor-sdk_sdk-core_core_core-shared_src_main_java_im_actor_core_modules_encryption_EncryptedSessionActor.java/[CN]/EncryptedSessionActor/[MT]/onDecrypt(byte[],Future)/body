{
  Log.d(TAG,"onDecrypt");
  Log.d(TAG,"onDecrypt: " + Hex.toHex(data));
  final int ownKeyGroupId=ByteStrings.bytesToInt(data,0);
  final long ownEphermalKey0Id=ByteStrings.bytesToLong(data,4);
  final long theirEphermalKey0Id=ByteStrings.bytesToLong(data,12);
  final byte[] ownEphermalKey=ByteStrings.substring(data,20,32);
  final byte[] theirEphermalKey=ByteStrings.substring(data,52,32);
  final int messageIndex=ByteStrings.bytesToInt(data,84);
  Log.d(TAG,"ownEphermalKey0Id: " + ownEphermalKey0Id);
  Log.d(TAG,"theirEphermalKey0Id: " + theirEphermalKey0Id);
  ask(context().getEncryption().getKeyManager(),new KeyManagerActor.FetchEphemeralPrivateKey(theirEphermalKey),new AskCallback(){
    @Override public void onResult(    Object obj){
      final KeyManagerActor.FetchEphemeralPrivateKeyRes theirEphermalKey=(KeyManagerActor.FetchEphemeralPrivateKeyRes)obj;
      ask(context().getEncryption().getKeyManager(),new KeyManagerActor.FetchEphemeralPrivateKeyById(theirEphermalKey0Id),new AskCallback(){
        @Override public void onResult(        Object obj){
          final KeyManagerActor.FetchEphemeralPrivateKeyRes theirEphermalKey0=(KeyManagerActor.FetchEphemeralPrivateKeyRes)obj;
          Log.d(TAG,"theirEphermalKey0: " + Hex.toHex(Curve25519.keyGenPublic(theirEphermalKey0.getPrivateKey())));
          ArrayList<Long> keys=new ArrayList<Long>();
          keys.add(ownEphermalKey0Id);
          request(new RequestLoadPublicKey(new ApiUserOutPeer(uid,getUser(uid).getAccessHash()),encryptionKeyGroup.getKeyGroupId(),keys),new RpcCallback<ResponsePublicKeys>(){
            @Override public void onResult(            ResponsePublicKeys response){
              byte[] ownEphermalKey0=response.getPublicKey().get(0).getKeyMaterial();
              Log.d(TAG,"ownEphermalKey0: " + Hex.toHex(ownEphermalKey0));
              onDecrypt(data,ownEphermalKey0,ownEphermalKey,theirEphermalKey0.getPrivateKey(),theirEphermalKey.getPrivateKey(),messageIndex,future);
            }
            @Override public void onError(            RpcException e){
              Log.d(TAG,"onDecrypt:RequestLoadPublicKey:onError");
              future.onError(e);
            }
          }
);
        }
        @Override public void onError(        Exception e){
          Log.d(TAG,"onDecrypt:onResultPrivate:onError");
          future.onError(e);
        }
      }
);
    }
    @Override public void onError(    Exception e){
      Log.d(TAG,"onDecrypt:onResultEphermal:onError");
      future.onError(e);
    }
  }
);
}
