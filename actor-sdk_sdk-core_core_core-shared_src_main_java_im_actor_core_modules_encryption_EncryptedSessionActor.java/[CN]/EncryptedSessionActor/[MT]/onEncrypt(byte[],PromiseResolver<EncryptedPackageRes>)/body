{
  if (session == null) {
    if (isFailured) {
      future.error(new RuntimeException("Session is not available"));
    }
 else {
      stash();
    }
    return;
  }
  Log.w(TAG,"onEncrypt");
  keyManager.getEphemeralKey(latestTheirEphemeralKey,uid,theirKeyGroup).map(new Function<byte[],EncryptedSessionChain>(){
    @Override public EncryptedSessionChain apply(    byte[] bytes){
      return pickEncryptChain(bytes);
    }
  }
).map(new Function<EncryptedSessionChain,EncryptedPackageRes>(){
    @Override public EncryptedPackageRes apply(    EncryptedSessionChain encryptedSessionChain){
      return encrypt(encryptedSessionChain,data);
    }
  }
).pipeTo(future).done(self());
}
