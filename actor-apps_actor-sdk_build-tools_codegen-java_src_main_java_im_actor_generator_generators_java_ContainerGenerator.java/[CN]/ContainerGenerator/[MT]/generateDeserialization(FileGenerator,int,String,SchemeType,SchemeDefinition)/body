{
  type=JavaConfig.reduceAlias(type,definition);
  if (type instanceof SchemePrimitiveType) {
    SchemePrimitiveType primitiveType=(SchemePrimitiveType)type;
    if (primitiveType.getName().equals("int32")) {
      generator.appendLn("this." + attributeName + " = values.getInt("+ attributeId+ ");");
    }
 else     if (primitiveType.getName().equals("int64")) {
      generator.appendLn("this." + attributeName + " = values.getLong("+ attributeId+ ");");
    }
 else     if (primitiveType.getName().equals("bool")) {
      generator.appendLn("this." + attributeName + " = values.getBool("+ attributeId+ ");");
    }
 else     if (primitiveType.getName().equals("bytes")) {
      generator.appendLn("this." + attributeName + " = values.getBytes("+ attributeId+ ");");
    }
 else     if (primitiveType.getName().equals("string")) {
      generator.appendLn("this." + attributeName + " = values.getString("+ attributeId+ ");");
    }
 else     if (primitiveType.getName().equals("double")) {
      generator.appendLn("this." + attributeName + " = values.getDouble("+ attributeId+ ");");
    }
 else {
      throw new IOException();
    }
  }
 else   if (type instanceof SchemeStructType) {
    generator.appendLn("this." + attributeName + " = values.getObj("+ attributeId+ ", "+ "new "+ JavaConfig.getStructName(((SchemeStructType)type).getType())+ "());");
  }
 else   if (type instanceof SchemeEnumType) {
    SchemeEnumType e=(SchemeEnumType)type;
    generator.appendLn("this." + attributeName + " = "+ JavaConfig.getEnumName(e.getName())+ ".parse(values.getInt("+ attributeId+ "));");
  }
 else   if (type instanceof SchemeOptionalType) {
    SchemeOptionalType optType=(SchemeOptionalType)type;
    SchemeType childType=JavaConfig.reduceAlias(optType.getType(),definition);
    if (childType instanceof SchemePrimitiveType) {
      SchemePrimitiveType primitiveType=(SchemePrimitiveType)childType;
      if (primitiveType.getName().equals("int32")) {
        generator.appendLn("this." + attributeName + " = values.optInt("+ attributeId+ ");");
      }
 else       if (primitiveType.getName().equals("int64")) {
        generator.appendLn("this." + attributeName + " = values.optLong("+ attributeId+ ");");
      }
 else       if (primitiveType.getName().equals("bool")) {
        generator.appendLn("this." + attributeName + " = values.optBool("+ attributeId+ ");");
      }
 else       if (primitiveType.getName().equals("bytes")) {
        generator.appendLn("this." + attributeName + " = values.optBytes("+ attributeId+ ");");
      }
 else       if (primitiveType.getName().equals("string")) {
        generator.appendLn("this." + attributeName + " = values.optString("+ attributeId+ ");");
      }
 else       if (primitiveType.getName().equals("double")) {
        generator.appendLn("this." + attributeName + " = values.optDouble("+ attributeId+ ");");
      }
 else {
        throw new IOException();
      }
    }
 else     if (childType instanceof SchemeStructType) {
      generator.appendLn("this." + attributeName + " = values.optObj("+ attributeId+ ", "+ "new "+ JavaConfig.getStructName(((SchemeStructType)childType).getType())+ "());");
    }
 else     if (childType instanceof SchemeEnumType) {
      generator.appendLn("int val_" + attributeName + " = values.getInt("+ attributeId+ ", 0);");
      generator.appendLn("if (val_" + attributeName + " != 0) {");
      generator.increaseDepth();
      generator.appendLn("this." + attributeName + " = "+ JavaConfig.getEnumName(((SchemeEnumType)childType).getName())+ ".parse(val_"+ attributeName+ ");");
      generator.decreaseDepth();
      generator.appendLn("}");
    }
 else     if (childType instanceof SchemeTraitType) {
      generator.appendLn("if (values.optBytes(" + attributeId + ") != null) {");
      generator.increaseDepth();
      String traitName=((SchemeTraitType)childType).getTraitName();
      SchemeTrait trait=definition.getTrait(traitName);
      if (trait.isContainer()) {
        generator.appendLn("this." + attributeName + " = "+ JavaConfig.getStructName(traitName)+ ".fromBytes(values.getBytes("+ attributeId+ "));");
      }
 else {
        generator.appendLn("this." + attributeName + " = "+ JavaConfig.getStructName(traitName)+ ".fromBytes(values.getInt("+ (attributeId - 1)+ "), values.getBytes("+ attributeId+ "));");
      }
      generator.decreaseDepth();
      generator.appendLn("}");
    }
 else {
      throw new IOException();
    }
  }
 else   if (type instanceof SchemeListType) {
    SchemeListType listType=(SchemeListType)type;
    SchemeType childType=JavaConfig.reduceAlias(listType.getType(),definition);
    if (childType instanceof SchemePrimitiveType) {
      SchemePrimitiveType primitiveType=(SchemePrimitiveType)childType;
      if (primitiveType.getName().equals("int32")) {
        generator.appendLn("this." + attributeName + " = values.getRepeatedInt("+ attributeId+ ");");
      }
 else       if (primitiveType.getName().equals("int64")) {
        generator.appendLn("this." + attributeName + " = values.getRepeatedLong("+ attributeId+ ");");
      }
 else       if (primitiveType.getName().equals("bool")) {
        generator.appendLn("this." + attributeName + " = values.getRepeatedBool("+ attributeId+ ");");
      }
 else       if (primitiveType.getName().equals("bytes")) {
        generator.appendLn("this." + attributeName + " = values.getRepeatedBytes("+ attributeId+ ");");
      }
 else       if (primitiveType.getName().equals("string")) {
        generator.appendLn("this." + attributeName + " = values.getRepeatedString("+ attributeId+ ");");
      }
 else       if (primitiveType.getName().equals("double")) {
        generator.appendLn("this." + attributeName + " = values.getRepeatedDouble("+ attributeId+ ");");
      }
 else {
        throw new IOException();
      }
    }
 else     if (childType instanceof SchemeStructType) {
      String typeName=JavaConfig.getStructName(((SchemeStructType)childType).getType());
      generator.appendLn("List<" + typeName + "> _"+ attributeName+ " = new ArrayList<"+ typeName+ ">();");
      generator.appendLn("for (int i = 0; i < values.getRepeatedCount(" + attributeId + "); i ++) {");
      generator.increaseDepth();
      generator.appendLn("_" + attributeName + ".add(new "+ typeName+ "());");
      generator.decreaseDepth();
      generator.appendLn("}");
      generator.appendLn("this." + attributeName + " = values.getRepeatedObj("+ attributeId+ ", "+ "_"+ attributeName+ ");");
    }
 else     if (childType instanceof SchemeTraitType) {
      SchemeTraitType traitType=(SchemeTraitType)childType;
      String typeName=JavaConfig.getStructName(traitType.getTraitName());
      generator.appendLn("this." + attributeName + " = new ArrayList<"+ typeName+ ">();");
      generator.appendLn("for (byte[] b : values.getRepeatedBytes(" + attributeId + ")) {");
      generator.increaseDepth();
      generator.appendLn(attributeName + ".add(" + typeName+ ".fromBytes(b));");
      generator.decreaseDepth();
      generator.appendLn("}");
    }
 else {
      throw new IOException();
    }
  }
 else   if (type instanceof SchemeTraitType) {
    String traitName=((SchemeTraitType)type).getTraitName();
    SchemeTrait trait=definition.getTrait(traitName);
    if (trait.isContainer()) {
      generator.appendLn("this." + attributeName + " = "+ JavaConfig.getStructName(traitName)+ ".fromBytes(values.getBytes("+ attributeId+ "));");
    }
 else {
      generator.appendLn("this." + attributeName + " = "+ JavaConfig.getStructName(traitName)+ ".fromBytes(values.getInt("+ (attributeId - 1)+ "), values.getBytes("+ attributeId+ "));");
    }
  }
 else {
    throw new IOException();
  }
}
