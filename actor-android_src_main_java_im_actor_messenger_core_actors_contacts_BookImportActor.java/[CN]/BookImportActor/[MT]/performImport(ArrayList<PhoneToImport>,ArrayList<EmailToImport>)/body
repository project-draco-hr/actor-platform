{
  final PhoneToImport[] phones=phoneToImportsPart.toArray(new PhoneToImport[0]);
  final EmailToImport[] emailToImports=emailToImportsPart.toArray(new EmailToImport[0]);
  ask(requests().importContacts((java.util.List<PhoneToImport>)phoneToImportsPart.clone(),(java.util.List<EmailToImport>)emailToImportsPart.clone()),new FutureCallback<ResponseImportContacts>(){
    @Override public void onResult(    ResponseImportContacts result){
      for (      PhoneToImport phoneToImport : phones) {
        importedPhones.add(phoneToImport.getPhoneNumber());
        importingPhones.remove(phoneToImport.getPhoneNumber());
      }
      for (      EmailToImport emailToImport : emailToImports) {
        importedEmails.add(emailToImport.getEmail());
        importingEmails.remove(emailToImport.getEmail());
      }
      checkImport();
      if (result.getUsers().size() == 0) {
        Logger.d(TAG,"Import success: empty");
        return;
      }
      ProfileSyncState.onContactsNotEmpty();
      Logger.d(TAG,"Import success: " + result.getUsers().size());
      ArrayList<Integer> uids=new ArrayList<Integer>();
      for (      User u : result.getUsers()) {
        uids.add(u.getId());
      }
      SequenceActor.SeqFatUpdate seqFatUpdate=new SequenceActor.SeqFatUpdate(result.getSeq(),result.getState(),new UpdateContactsAdded(uids),result.getUsers(),new ArrayList<Group>());
      system().actorOf(SequenceActor.sequence()).send(seqFatUpdate);
    }
    @Override public void onError(    Throwable throwable){
      Logger.d(TAG,"Import failure");
      throwable.printStackTrace();
    }
  }
);
}
