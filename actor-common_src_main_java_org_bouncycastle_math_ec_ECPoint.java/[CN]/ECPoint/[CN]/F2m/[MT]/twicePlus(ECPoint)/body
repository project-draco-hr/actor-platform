{
  if (this.isInfinity()) {
    return b;
  }
  if (b.isInfinity()) {
    return twice();
  }
  ECCurve curve=this.getCurve();
  ECFieldElement X1=this.x;
  if (X1.isZero()) {
    return b;
  }
  int coord=curve.getCoordinateSystem();
switch (coord) {
case ECCurve.COORD_LAMBDA_PROJECTIVE:
{
      ECFieldElement X2=b.x, Z2=b.zs[0];
      if (X2.isZero() || !Z2.isOne()) {
        return twice().add(b);
      }
      ECFieldElement L1=this.y, Z1=this.zs[0];
      ECFieldElement L2=b.y;
      ECFieldElement X1Sq=X1.square();
      ECFieldElement L1Sq=L1.square();
      ECFieldElement Z1Sq=Z1.square();
      ECFieldElement L1Z1=L1.multiply(Z1);
      ECFieldElement T=curve.getA().multiply(Z1Sq).add(L1Sq).add(L1Z1);
      ECFieldElement L2plus1=L2.addOne();
      ECFieldElement A=curve.getA().add(L2plus1).multiply(Z1Sq).add(L1Sq).multiplyPlusProduct(T,X1Sq,Z1Sq);
      ECFieldElement X2Z1Sq=X2.multiply(Z1Sq);
      ECFieldElement B=X2Z1Sq.add(T).square();
      if (B.isZero()) {
        if (A.isZero()) {
          return b.twice();
        }
        return curve.getInfinity();
      }
      if (A.isZero()) {
        return new ECPoint.F2m(curve,A,curve.getB().sqrt(),withCompression);
      }
      ECFieldElement X3=A.square().multiply(X2Z1Sq);
      ECFieldElement Z3=A.multiply(B).multiply(Z1Sq);
      ECFieldElement L3=A.add(B).square().multiplyPlusProduct(T,L2plus1,Z3);
      return new ECPoint.F2m(curve,X3,L3,new ECFieldElement[]{Z3},this.withCompression);
    }
default :
{
    return twice().add(b);
  }
}
}
