{
  if (this.isInfinity()) {
    return b;
  }
  if (b.isInfinity()) {
    return this;
  }
  ECCurve curve=this.getCurve();
  int coord=curve.getCoordinateSystem();
  ECFieldElement X1=this.x;
  ECFieldElement X2=b.x;
switch (coord) {
case ECCurve.COORD_AFFINE:
{
      ECFieldElement Y1=this.y;
      ECFieldElement Y2=b.y;
      ECFieldElement dx=X1.add(X2), dy=Y1.add(Y2);
      if (dx.isZero()) {
        if (dy.isZero()) {
          return (ECPoint.F2m)twice();
        }
        return (ECPoint.F2m)curve.getInfinity();
      }
      ECFieldElement L=dy.divide(dx);
      ECFieldElement X3=L.square().add(L).add(dx).add(curve.getA());
      ECFieldElement Y3=L.multiply(X1.add(X3)).add(X3).add(Y1);
      return new ECPoint.F2m(curve,X3,Y3,this.withCompression);
    }
case ECCurve.COORD_HOMOGENEOUS:
{
    ECFieldElement Y1=this.y, Z1=this.zs[0];
    ECFieldElement Y2=b.y, Z2=b.zs[0];
    boolean Z2IsOne=Z2.isOne();
    ECFieldElement U1=Z1.multiply(Y2);
    ECFieldElement U2=Z2IsOne ? Y1 : Y1.multiply(Z2);
    ECFieldElement U=U1.add(U2);
    ECFieldElement V1=Z1.multiply(X2);
    ECFieldElement V2=Z2IsOne ? X1 : X1.multiply(Z2);
    ECFieldElement V=V1.add(V2);
    if (V.isZero()) {
      if (U.isZero()) {
        return (ECPoint.F2m)twice();
      }
      return (ECPoint.F2m)curve.getInfinity();
    }
    ECFieldElement VSq=V.square();
    ECFieldElement VCu=VSq.multiply(V);
    ECFieldElement W=Z2IsOne ? Z1 : Z1.multiply(Z2);
    ECFieldElement uv=U.add(V);
    ECFieldElement A=uv.multiplyPlusProduct(U,VSq,curve.getA()).multiply(W).add(VCu);
    ECFieldElement X3=V.multiply(A);
    ECFieldElement VSqZ2=Z2IsOne ? VSq : VSq.multiply(Z2);
    ECFieldElement Y3=U.multiplyPlusProduct(X1,V,Y1).multiplyPlusProduct(VSqZ2,uv,A);
    ECFieldElement Z3=VCu.multiply(W);
    return new ECPoint.F2m(curve,X3,Y3,new ECFieldElement[]{Z3},this.withCompression);
  }
case ECCurve.COORD_LAMBDA_PROJECTIVE:
{
  if (X1.isZero()) {
    if (X2.isZero()) {
      return (ECPoint.F2m)curve.getInfinity();
    }
    return b.addSimple(this);
  }
  ECFieldElement L1=this.y, Z1=this.zs[0];
  ECFieldElement L2=b.y, Z2=b.zs[0];
  boolean Z1IsOne=Z1.isOne();
  ECFieldElement U2=X2, S2=L2;
  if (!Z1IsOne) {
    U2=U2.multiply(Z1);
    S2=S2.multiply(Z1);
  }
  boolean Z2IsOne=Z2.isOne();
  ECFieldElement U1=X1, S1=L1;
  if (!Z2IsOne) {
    U1=U1.multiply(Z2);
    S1=S1.multiply(Z2);
  }
  ECFieldElement A=S1.add(S2);
  ECFieldElement B=U1.add(U2);
  if (B.isZero()) {
    if (A.isZero()) {
      return (ECPoint.F2m)twice();
    }
    return (ECPoint.F2m)curve.getInfinity();
  }
  ECFieldElement X3, L3, Z3;
  if (X2.isZero()) {
    ECPoint p=this.normalize();
    X1=p.getXCoord();
    ECFieldElement Y1=p.getYCoord();
    ECFieldElement Y2=L2;
    ECFieldElement L=Y1.add(Y2).divide(X1);
    X3=L.square().add(L).add(X1).add(curve.getA());
    if (X3.isZero()) {
      return new ECPoint.F2m(curve,X3,curve.getB().sqrt(),this.withCompression);
    }
    ECFieldElement Y3=L.multiply(X1.add(X3)).add(X3).add(Y1);
    L3=Y3.divide(X3).add(X3);
    Z3=curve.fromBigInteger(ECConstants.ONE);
  }
 else {
    B=B.square();
    ECFieldElement AU1=A.multiply(U1);
    ECFieldElement AU2=A.multiply(U2);
    X3=AU1.multiply(AU2);
    if (X3.isZero()) {
      return new ECPoint.F2m(curve,X3,curve.getB().sqrt(),this.withCompression);
    }
    ECFieldElement ABZ2=A.multiply(B);
    if (!Z2IsOne) {
      ABZ2=ABZ2.multiply(Z2);
    }
    L3=AU2.add(B).squarePlusProduct(ABZ2,L1.add(Z1));
    Z3=ABZ2;
    if (!Z1IsOne) {
      Z3=Z3.multiply(Z1);
    }
  }
  return new ECPoint.F2m(curve,X3,L3,new ECFieldElement[]{Z3},this.withCompression);
}
default :
{
throw new IllegalStateException("unsupported coordinate system");
}
}
}
