{
  if (!users.containsKey(uid)) {
    final UserVM userVM=context().getUsersModule().getUsers().get(uid);
    final JsBindedValue<JsUser> value=new JsBindedValue<>(JsUser.fromUserVM(userVM,messenger));
    userVM.subscribe(new ModelChangedListener<UserVM>(){
      @Override public void onChanged(      UserVM model){
        value.changeValue(JsUser.fromUserVM(userVM,messenger));
      }
    }
,false);
    userVM.isContact().subscribe(new ValueChangedListener<Boolean>(){
      @Override public void onChanged(      Boolean val,      Value<Boolean> valueModel){
        value.changeValue(JsUser.fromUserVM(userVM,messenger));
      }
    }
);
    userVM.getIsBlocked().subscribe(new ValueChangedListener<Boolean>(){
      @Override public void onChanged(      Boolean val,      Value<Boolean> valueModel){
        value.changeValue(JsUser.fromUserVM(userVM,messenger));
      }
    }
);
    users.put(uid,value);
  }
  return users.get(uid);
}
