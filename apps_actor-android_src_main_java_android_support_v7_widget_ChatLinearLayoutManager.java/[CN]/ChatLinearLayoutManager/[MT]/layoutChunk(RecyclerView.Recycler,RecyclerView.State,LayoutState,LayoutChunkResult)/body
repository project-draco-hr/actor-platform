{
  View view=layoutState.next(recycler);
  if (view == null) {
    if (DEBUG && layoutState.mScrapList == null) {
      throw new RuntimeException("received null view when unexpected");
    }
    result.mFinished=true;
    return;
  }
  RecyclerView.LayoutParams params=(RecyclerView.LayoutParams)view.getLayoutParams();
  if (layoutState.mScrapList == null) {
    if (mShouldReverseLayout == (layoutState.mLayoutDirection == LayoutState.LAYOUT_START)) {
      addView(view);
    }
 else {
      addView(view,0);
    }
  }
 else {
    if (mShouldReverseLayout == (layoutState.mLayoutDirection == LayoutState.LAYOUT_START)) {
      addDisappearingView(view);
    }
 else {
      addDisappearingView(view,0);
    }
  }
  measureChildWithMargins(view,0,0);
  result.mConsumed=mOrientationHelper.getDecoratedMeasurement(view);
  int left, top, right, bottom;
  if (mOrientation == VERTICAL) {
    if (isLayoutRTL()) {
      right=getWidth() - getPaddingRight();
      left=right - mOrientationHelper.getDecoratedMeasurementInOther(view);
    }
 else {
      left=getPaddingLeft();
      right=left + mOrientationHelper.getDecoratedMeasurementInOther(view);
    }
    if (layoutState.mLayoutDirection == LayoutState.LAYOUT_START) {
      bottom=layoutState.mOffset;
      top=layoutState.mOffset - result.mConsumed;
    }
 else {
      top=layoutState.mOffset;
      bottom=layoutState.mOffset + result.mConsumed;
    }
  }
 else {
    top=getPaddingTop();
    bottom=top + mOrientationHelper.getDecoratedMeasurementInOther(view);
    if (layoutState.mLayoutDirection == LayoutState.LAYOUT_START) {
      right=layoutState.mOffset;
      left=layoutState.mOffset - result.mConsumed;
    }
 else {
      left=layoutState.mOffset;
      right=layoutState.mOffset + result.mConsumed;
    }
  }
  layoutDecorated(view,left + params.leftMargin,top + params.topMargin,right - params.rightMargin,bottom - params.bottomMargin);
  if (DEBUG) {
    Log.d(TAG,"laid out child at position " + getPosition(view) + ", with l:"+ (left + params.leftMargin)+ ", t:"+ (top + params.topMargin)+ ", r:"+ (right - params.rightMargin)+ ", b:"+ (bottom - params.bottomMargin));
  }
  if (params.isItemRemoved() || params.isItemChanged()) {
    result.mIgnoreConsumed=true;
  }
  result.mFocusable=view.isFocusable();
}
