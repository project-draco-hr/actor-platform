{
  int n=k.bitLength();
  int s=k.getLowestSetBit();
  BigInteger Uh=ECConstants.ONE;
  BigInteger Vl=ECConstants.TWO;
  BigInteger Vh=P;
  BigInteger Ql=ECConstants.ONE;
  BigInteger Qh=ECConstants.ONE;
  for (int j=n - 1; j >= s + 1; --j) {
    Ql=modMult(Ql,Qh);
    if (k.testBit(j)) {
      Qh=modMult(Ql,Q);
      Uh=modMult(Uh,Vh);
      Vl=modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));
      Vh=modReduce(Vh.multiply(Vh).subtract(Qh.shiftLeft(1)));
    }
 else {
      Qh=Ql;
      Uh=modReduce(Uh.multiply(Vl).subtract(Ql));
      Vh=modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));
      Vl=modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));
    }
  }
  Ql=modMult(Ql,Qh);
  Qh=modMult(Ql,Q);
  Uh=modReduce(Uh.multiply(Vl).subtract(Ql));
  Vl=modReduce(Vh.multiply(Vl).subtract(P.multiply(Ql)));
  Ql=modMult(Ql,Qh);
  for (int j=1; j <= s; ++j) {
    Uh=modMult(Uh,Vl);
    Vl=modReduce(Vl.multiply(Vl).subtract(Ql.shiftLeft(1)));
    Ql=modMult(Ql,Ql);
  }
  return new BigInteger[]{Uh,Vl};
}
