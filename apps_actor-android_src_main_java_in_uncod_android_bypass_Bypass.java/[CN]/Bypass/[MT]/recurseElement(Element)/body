{
  CharSequence[] spans=new CharSequence[element.size()];
  for (int i=0; i < element.size(); i++) {
    spans[i]=recurseElement(element.children[i]);
  }
  CharSequence concat=TextUtils.concat(spans);
  SpannableStringBuilder builder=new SpannableStringBuilder();
  String text=element.getText();
  if (element.size() == 0 && element.getParent().getType() != Type.BLOCK_CODE) {
  }
  if (element.getParent() != null && element.getParent().getType() == Type.LIST_ITEM && element.getType() == Type.LIST) {
  }
  if (element.getType() == Type.LIST_ITEM) {
    builder.append("\u2022");
  }
  builder.append(text);
  builder.append(concat);
  if (element.getType() == Type.LIST && element.getParent() != null) {
  }
 else   if (element.getType() == Type.LIST_ITEM) {
    if (element.size() > 0 && element.children[element.size() - 1].isBlockElement()) {
    }
 else {
    }
  }
 else   if (element.isBlockElement()) {
  }
  if (element.getType() == Type.HEADER) {
    String levelStr=element.getAttribute("level");
    int level=Integer.parseInt(levelStr);
    builder.setSpan(new RelativeSizeSpan(HEADER_SIZES[level]),0,builder.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    builder.setSpan(new StyleSpan(Typeface.BOLD),0,builder.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    builder.append("\n");
  }
 else   if (element.getType() == Type.LIST_ITEM && element.getParent().getParent() != null) {
    LeadingMarginSpan span=new LeadingMarginSpan.Standard(20);
    builder.setSpan(span,0,builder.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
 else   if (element.getType() == Type.EMPHASIS) {
    StyleSpan italicSpan=new StyleSpan(Typeface.ITALIC);
    builder.setSpan(italicSpan,0,builder.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
 else   if (element.getType() == Type.DOUBLE_EMPHASIS) {
    StyleSpan boldSpan=new StyleSpan(Typeface.BOLD);
    builder.setSpan(boldSpan,0,builder.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
 else   if (element.getType() == Type.TRIPLE_EMPHASIS) {
    StyleSpan bolditalicSpan=new StyleSpan(Typeface.BOLD_ITALIC);
    builder.setSpan(bolditalicSpan,0,builder.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
 else   if (element.getType() == Type.CODE_SPAN) {
    TypefaceSpan monoSpan=new TypefaceSpan("monospace");
    builder.setSpan(monoSpan,0,builder.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
 else   if (element.getType() == Type.LINK) {
  }
 else   if (element.getType() == Type.BLOCK_QUOTE) {
    QuoteSpan quoteSpan=new QuoteSpan();
    builder.setSpan(quoteSpan,0,builder.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    StyleSpan italicSpan=new StyleSpan(Typeface.ITALIC);
    builder.setSpan(italicSpan,0,builder.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
  }
 else   if (element.getType() == Type.TABLE) {
    builder.clear();
    builder.append("Table...");
  }
 else   if (element.getType() == Type.TABLE_ROW | element.getType() == Type.TABLE_CELL) {
    builder.clear();
  }
  return builder;
}
