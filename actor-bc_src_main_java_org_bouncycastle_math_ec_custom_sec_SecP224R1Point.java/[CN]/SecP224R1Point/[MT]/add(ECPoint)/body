{
  if (this.isInfinity()) {
    return b;
  }
  if (b.isInfinity()) {
    return this;
  }
  if (this == b) {
    return twice();
  }
  ECCurve curve=this.getCurve();
  SecP224R1FieldElement X1=(SecP224R1FieldElement)this.x, Y1=(SecP224R1FieldElement)this.y;
  SecP224R1FieldElement X2=(SecP224R1FieldElement)b.getXCoord(), Y2=(SecP224R1FieldElement)b.getYCoord();
  SecP224R1FieldElement Z1=(SecP224R1FieldElement)this.zs[0];
  SecP224R1FieldElement Z2=(SecP224R1FieldElement)b.getZCoord(0);
  int c;
  int[] tt1=Nat224.createExt();
  int[] t2=Nat224.create();
  int[] t3=Nat224.create();
  int[] t4=Nat224.create();
  boolean Z1IsOne=Z1.isOne();
  int[] U2, S2;
  if (Z1IsOne) {
    U2=X2.x;
    S2=Y2.x;
  }
 else {
    S2=t3;
    SecP224R1Field.square(Z1.x,S2);
    U2=t2;
    SecP224R1Field.multiply(S2,X2.x,U2);
    SecP224R1Field.multiply(S2,Z1.x,S2);
    SecP224R1Field.multiply(S2,Y2.x,S2);
  }
  boolean Z2IsOne=Z2.isOne();
  int[] U1, S1;
  if (Z2IsOne) {
    U1=X1.x;
    S1=Y1.x;
  }
 else {
    S1=t4;
    SecP224R1Field.square(Z2.x,S1);
    U1=tt1;
    SecP224R1Field.multiply(S1,X1.x,U1);
    SecP224R1Field.multiply(S1,Z2.x,S1);
    SecP224R1Field.multiply(S1,Y1.x,S1);
  }
  int[] H=Nat224.create();
  SecP224R1Field.subtract(U1,U2,H);
  int[] R=t2;
  SecP224R1Field.subtract(S1,S2,R);
  if (Nat224.isZero(H)) {
    if (Nat224.isZero(R)) {
      return this.twice();
    }
    return curve.getInfinity();
  }
  int[] HSquared=t3;
  SecP224R1Field.square(H,HSquared);
  int[] G=Nat224.create();
  SecP224R1Field.multiply(HSquared,H,G);
  int[] V=t3;
  SecP224R1Field.multiply(HSquared,U1,V);
  SecP224R1Field.negate(G,G);
  Nat224.mul(S1,G,tt1);
  c=Nat224.addBothTo(V,V,G);
  SecP224R1Field.reduce32(c,G);
  SecP224R1FieldElement X3=new SecP224R1FieldElement(t4);
  SecP224R1Field.square(R,X3.x);
  SecP224R1Field.subtract(X3.x,G,X3.x);
  SecP224R1FieldElement Y3=new SecP224R1FieldElement(G);
  SecP224R1Field.subtract(V,X3.x,Y3.x);
  SecP224R1Field.multiplyAddToExt(Y3.x,R,tt1);
  SecP224R1Field.reduce(tt1,Y3.x);
  SecP224R1FieldElement Z3=new SecP224R1FieldElement(H);
  if (!Z1IsOne) {
    SecP224R1Field.multiply(Z3.x,Z1.x,Z3.x);
  }
  if (!Z2IsOne) {
    SecP224R1Field.multiply(Z3.x,Z2.x,Z3.x);
  }
  ECFieldElement[] zs=new ECFieldElement[]{Z3};
  return new SecP224R1Point(curve,X3,Y3,zs,this.withCompression);
}
