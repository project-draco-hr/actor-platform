{
  Log.d(TAG,"Requesting AuthId");
  final boolean[] isFinished=new boolean[1];
  isFinished[0]=false;
  networkProvider.createConnection(0,endpoints.fetchEndpoint(),new ConnectionCallback(){
    @Override public void onMessage(    byte[] data,    int offset,    int len){
      if (isFinished[0]) {
        return;
      }
      try {
        DataInput dataInput=new DataInput(data,offset,len);
        long pAuthId=dataInput.readLong();
        long pSessionId=dataInput.readLong();
        long messageId=dataInput.readLong();
        byte[] payload=dataInput.readProtoBytes();
        DataInput msg=new DataInput(payload,0,payload.length);
        int header=msg.readByte();
        long authId=msg.readLong();
        if (!isFinished[0]) {
          isFinished[0]=true;
          callback.onSuccess(authId);
          Log.d(TAG,"Auth Id loaded: " + authId);
          return;
        }
      }
 catch (      Exception e) {
        Log.d(TAG,"Error during parsing auth id response");
        e.printStackTrace();
      }
      throw new RuntimeException();
    }
    @Override public void onConnectionDie(){
      if (!isFinished[0]) {
        isFinished[0]=true;
        callback.onFailure();
        Log.d(TAG,"Connection dies");
      }
    }
  }
,new CreateConnectionCallback(){
    @Override public void onConnectionCreated(    Connection connection){
      if (isFinished[0]) {
        return;
      }
      Log.d(TAG,"Connection created");
      try {
        DataOutput output=new DataOutput();
        output.writeLong(0);
        output.writeLong(0);
        output.writeLong(0);
        output.writeVarInt(1);
        output.writeByte(0xF0);
        byte[] data=output.toByteArray();
        connection.post(data,0,data.length);
      }
 catch (      Exception e) {
        Log.d(TAG,"Error during requesting auth id");
        e.printStackTrace();
        if (!isFinished[0]) {
          isFinished[0]=true;
          callback.onFailure();
        }
      }
    }
    @Override public void onConnectionCreateError(){
      if (!isFinished[0]) {
        isFinished[0]=true;
        callback.onFailure();
        Log.d(TAG,"Unable to create connection");
      }
    }
  }
);
}
