{
  int A0, A1, A2, A3, T0, T1, T2, T3;
  unpackBlock(data,offset);
  C0=C0 ^ key[9][0];
  C1=C1 ^ key[9][1];
  C2=C2 ^ key[9][2];
  C3=C3 ^ key[9][3];
  for (int i=8; i >= 0; i--) {
    T0=(0 + (((C0 >> 24) & 0xFF) << 4)) << 2;
    T1=(1 + (((C0 >> 16) & 0xFF) << 4)) << 2;
    T2=(2 + (((C0 >> 8) & 0xFF) << 4)) << 2;
    T3=(3 + (((C0 >> 0) & 0xFF) << 4)) << 2;
    A0=gf256resInv[T0 + 0] ^ gf256resInv[T1 + 0] ^ gf256resInv[T2 + 0]^ gf256resInv[T3 + 0];
    A1=gf256resInv[T0 + 1] ^ gf256resInv[T1 + 1] ^ gf256resInv[T2 + 1]^ gf256resInv[T3 + 1];
    A2=gf256resInv[T0 + 2] ^ gf256resInv[T1 + 2] ^ gf256resInv[T2 + 2]^ gf256resInv[T3 + 2];
    A3=gf256resInv[T0 + 3] ^ gf256resInv[T1 + 3] ^ gf256resInv[T2 + 3]^ gf256resInv[T3 + 3];
    T0=(4 + (((C1 >> 24) & 0xFF) << 4)) << 2;
    T1=(5 + (((C1 >> 16) & 0xFF) << 4)) << 2;
    T2=(6 + (((C1 >> 8) & 0xFF) << 4)) << 2;
    T3=(7 + (((C1 >> 0) & 0xFF) << 4)) << 2;
    A0=A0 ^ gf256resInv[T0 + 0] ^ gf256resInv[T1 + 0]^ gf256resInv[T2 + 0]^ gf256resInv[T3 + 0];
    A1=A1 ^ gf256resInv[T0 + 1] ^ gf256resInv[T1 + 1]^ gf256resInv[T2 + 1]^ gf256resInv[T3 + 1];
    A2=A2 ^ gf256resInv[T0 + 2] ^ gf256resInv[T1 + 2]^ gf256resInv[T2 + 2]^ gf256resInv[T3 + 2];
    A3=A3 ^ gf256resInv[T0 + 3] ^ gf256resInv[T1 + 3]^ gf256resInv[T2 + 3]^ gf256resInv[T3 + 3];
    T0=(8 + (((C2 >> 24) & 0xFF) << 4)) << 2;
    T1=(9 + (((C2 >> 16) & 0xFF) << 4)) << 2;
    T2=(10 + (((C2 >> 8) & 0xFF) << 4)) << 2;
    T3=(11 + (((C2 >> 0) & 0xFF) << 4)) << 2;
    A0=A0 ^ gf256resInv[T0 + 0] ^ gf256resInv[T1 + 0]^ gf256resInv[T2 + 0]^ gf256resInv[T3 + 0];
    A1=A1 ^ gf256resInv[T0 + 1] ^ gf256resInv[T1 + 1]^ gf256resInv[T2 + 1]^ gf256resInv[T3 + 1];
    A2=A2 ^ gf256resInv[T0 + 2] ^ gf256resInv[T1 + 2]^ gf256resInv[T2 + 2]^ gf256resInv[T3 + 2];
    A3=A3 ^ gf256resInv[T0 + 3] ^ gf256resInv[T1 + 3]^ gf256resInv[T2 + 3]^ gf256resInv[T3 + 3];
    T0=(12 + (((C3 >> 24) & 0xFF) << 4)) << 2;
    T1=(13 + (((C3 >> 16) & 0xFF) << 4)) << 2;
    T2=(14 + (((C3 >> 8) & 0xFF) << 4)) << 2;
    T3=(15 + (((C3 >> 0) & 0xFF) << 4)) << 2;
    C0=A0 ^ gf256resInv[T0 + 0] ^ gf256resInv[T1 + 0]^ gf256resInv[T2 + 0]^ gf256resInv[T3 + 0];
    C1=A1 ^ gf256resInv[T0 + 1] ^ gf256resInv[T1 + 1]^ gf256resInv[T2 + 1]^ gf256resInv[T3 + 1];
    C2=A2 ^ gf256resInv[T0 + 2] ^ gf256resInv[T1 + 2]^ gf256resInv[T2 + 2]^ gf256resInv[T3 + 2];
    C3=A3 ^ gf256resInv[T0 + 3] ^ gf256resInv[T1 + 3]^ gf256resInv[T2 + 3]^ gf256resInv[T3 + 3];
    C0=(kuz_pi_inv[C0 & 0xFF] & 0xFF) + ((kuz_pi_inv[(C0 >> 8) & 0xFF] & 0xFF) << 8) + ((kuz_pi_inv[(C0 >> 16) & 0xFF] & 0xFF) << 16)+ ((kuz_pi_inv[(C0 >> 24) & 0xFF] & 0xFF) << 24);
    C1=(kuz_pi_inv[C1 & 0xFF] & 0xFF) + ((kuz_pi_inv[(C1 >> 8) & 0xFF] & 0xFF) << 8) + ((kuz_pi_inv[(C1 >> 16) & 0xFF] & 0xFF) << 16)+ ((kuz_pi_inv[(C1 >> 24) & 0xFF] & 0xFF) << 24);
    C2=(kuz_pi_inv[C2 & 0xFF] & 0xFF) + ((kuz_pi_inv[(C2 >> 8) & 0xFF] & 0xFF) << 8) + ((kuz_pi_inv[(C2 >> 16) & 0xFF] & 0xFF) << 16)+ ((kuz_pi_inv[(C2 >> 24) & 0xFF] & 0xFF) << 24);
    C3=(kuz_pi_inv[C3 & 0xFF] & 0xFF) + ((kuz_pi_inv[(C3 >> 8) & 0xFF] & 0xFF) << 8) + ((kuz_pi_inv[(C3 >> 16) & 0xFF] & 0xFF) << 16)+ ((kuz_pi_inv[(C3 >> 24) & 0xFF] & 0xFF) << 24);
    C0=C0 ^ key[i][0];
    C1=C1 ^ key[i][1];
    C2=C2 ^ key[i][2];
    C3=C3 ^ key[i][3];
  }
  packBlock(dest,destOffset);
}
