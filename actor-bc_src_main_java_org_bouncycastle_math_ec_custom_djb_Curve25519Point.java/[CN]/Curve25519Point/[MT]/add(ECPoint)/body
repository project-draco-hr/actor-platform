{
  if (this.isInfinity()) {
    return b;
  }
  if (b.isInfinity()) {
    return this;
  }
  if (this == b) {
    return twice();
  }
  ECCurve curve=this.getCurve();
  Curve25519FieldElement X1=(Curve25519FieldElement)this.x, Y1=(Curve25519FieldElement)this.y, Z1=(Curve25519FieldElement)this.zs[0];
  Curve25519FieldElement X2=(Curve25519FieldElement)b.getXCoord(), Y2=(Curve25519FieldElement)b.getYCoord(), Z2=(Curve25519FieldElement)b.getZCoord(0);
  int c;
  int[] tt1=Nat256.createExt();
  int[] t2=Nat256.create();
  int[] t3=Nat256.create();
  int[] t4=Nat256.create();
  boolean Z1IsOne=Z1.isOne();
  int[] U2, S2;
  if (Z1IsOne) {
    U2=X2.x;
    S2=Y2.x;
  }
 else {
    S2=t3;
    Curve25519Field.square(Z1.x,S2);
    U2=t2;
    Curve25519Field.multiply(S2,X2.x,U2);
    Curve25519Field.multiply(S2,Z1.x,S2);
    Curve25519Field.multiply(S2,Y2.x,S2);
  }
  boolean Z2IsOne=Z2.isOne();
  int[] U1, S1;
  if (Z2IsOne) {
    U1=X1.x;
    S1=Y1.x;
  }
 else {
    S1=t4;
    Curve25519Field.square(Z2.x,S1);
    U1=tt1;
    Curve25519Field.multiply(S1,X1.x,U1);
    Curve25519Field.multiply(S1,Z2.x,S1);
    Curve25519Field.multiply(S1,Y1.x,S1);
  }
  int[] H=Nat256.create();
  Curve25519Field.subtract(U1,U2,H);
  int[] R=t2;
  Curve25519Field.subtract(S1,S2,R);
  if (Nat256.isZero(H)) {
    if (Nat256.isZero(R)) {
      return this.twice();
    }
    return curve.getInfinity();
  }
  int[] HSquared=Nat256.create();
  Curve25519Field.square(H,HSquared);
  int[] G=Nat256.create();
  Curve25519Field.multiply(HSquared,H,G);
  int[] V=t3;
  Curve25519Field.multiply(HSquared,U1,V);
  Curve25519Field.negate(G,G);
  Nat256.mul(S1,G,tt1);
  c=Nat256.addBothTo(V,V,G);
  Curve25519Field.reduce27(c,G);
  Curve25519FieldElement X3=new Curve25519FieldElement(t4);
  Curve25519Field.square(R,X3.x);
  Curve25519Field.subtract(X3.x,G,X3.x);
  Curve25519FieldElement Y3=new Curve25519FieldElement(G);
  Curve25519Field.subtract(V,X3.x,Y3.x);
  Curve25519Field.multiplyAddToExt(Y3.x,R,tt1);
  Curve25519Field.reduce(tt1,Y3.x);
  Curve25519FieldElement Z3=new Curve25519FieldElement(H);
  if (!Z1IsOne) {
    Curve25519Field.multiply(Z3.x,Z1.x,Z3.x);
  }
  if (!Z2IsOne) {
    Curve25519Field.multiply(Z3.x,Z2.x,Z3.x);
  }
  int[] Z3Squared=(Z1IsOne && Z2IsOne) ? HSquared : null;
  Curve25519FieldElement W3=calculateJacobianModifiedW((Curve25519FieldElement)Z3,Z3Squared);
  ECFieldElement[] zs=new ECFieldElement[]{Z3,W3};
  return new Curve25519Point(curve,X3,Y3,zs,this.withCompression);
}
