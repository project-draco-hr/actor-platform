{
  CharSequence spannedText;
  if (getPeer().getPeerType() == PeerType.GROUP && message.getSenderId() != myUid()) {
    String name;
    UserVM userModel=users().get(message.getSenderId());
    if (userModel != null) {
      name=userModel.getName().get();
    }
 else {
      name="???";
    }
    SpannableStringBuilder builder=new SpannableStringBuilder();
    builder.append(name);
    builder.setSpan(new ForegroundColorSpan(colors[Math.abs(message.getSenderId()) % colors.length]),0,name.length(),Spanned.SPAN_INCLUSIVE_EXCLUSIVE);
    builder.append("\n");
    builder.append(bypass.markdownToSpannable(((TextContent)message.getContent()).getText(),false));
    spannedText=builder;
  }
 else {
    spannedText=bypass.markdownToSpannable(((TextContent)message.getContent()).getText(),false);
  }
  Editable spannedTextEditable=new SpannableStringBuilder(spannedText);
  URLSpan[] urlSpans=spannedTextEditable.getSpans(0,spannedTextEditable.length(),URLSpan.class);
  if (urlSpans.length > 0) {
    int start;
    int end;
    int prevEnd=0;
    Spannable toLinkyfy;
    for (int i=0; i < urlSpans.length; i++) {
      start=spannedTextEditable.getSpanStart(urlSpans[i]);
      end=spannedTextEditable.getSpanEnd(urlSpans[i]);
      if (start > spannedText.length() - 1)       continue;
      toLinkyfy=(Spannable)spannedText.subSequence(prevEnd,start);
      Linkify.addLinks(toLinkyfy,Linkify.EMAIL_ADDRESSES | Linkify.PHONE_NUMBERS | Linkify.WEB_URLS);
      spannedTextEditable.replace(prevEnd,start,toLinkyfy);
      prevEnd=end;
    }
    toLinkyfy=(Spannable)spannedText.subSequence(prevEnd,spannedTextEditable.length());
    Linkify.addLinks(toLinkyfy,Linkify.EMAIL_ADDRESSES | Linkify.PHONE_NUMBERS | Linkify.WEB_URLS);
    spannedTextEditable.replace(prevEnd,spannedTextEditable.length(),toLinkyfy);
    spannedText=spannedTextEditable;
  }
 else {
    spannedText=spannedTextEditable;
    Linkify.addLinks((Spannable)spannedText,Linkify.EMAIL_ADDRESSES | Linkify.PHONE_NUMBERS | Linkify.WEB_URLS);
  }
  if (emoji().containsEmoji(spannedText)) {
    if (emoji().isLoaded()) {
      spannedText=emoji().processEmojiCompatMutable(spannedText,SmileProcessor.CONFIGURATION_BUBBLES);
    }
 else {
      final CharSequence finalSpannedText=spannedText;
      if (smilesListener != null) {
        emoji().unregisterListener(smilesListener);
      }
      smilesListener=new SmilesListener(){
        @Override public void onSmilesUpdated(        boolean completed){
          text.setText(emoji().processEmojiCompatMutable(finalSpannedText,SmileProcessor.CONFIGURATION_BUBBLES));
          emoji().unregisterListener(this);
        }
      }
;
      emoji().registerListener(smilesListener);
    }
  }
  bindRawText(spannedText,message,false);
}
