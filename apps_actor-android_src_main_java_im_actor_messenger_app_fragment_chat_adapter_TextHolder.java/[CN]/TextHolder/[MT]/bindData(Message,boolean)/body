{
  if (message.getSenderId() == myUid()) {
    messageBubble.setBackgroundResource(R.drawable.bubble_text_out);
  }
 else {
    messageBubble.setBackgroundResource(R.drawable.bubble_text_in);
  }
  CharSequence spannedText;
  Bypass bypass=new Bypass();
  if (getPeer().getPeerType() == PeerType.GROUP && message.getSenderId() != myUid()) {
    String name;
    UserVM userModel=users().get(message.getSenderId());
    if (userModel != null) {
      name=userModel.getName().get();
    }
 else {
      name="???";
    }
    SpannableStringBuilder builder=new SpannableStringBuilder();
    builder.append(name);
    builder.setSpan(new ForegroundColorSpan(colors[Math.abs(message.getSenderId()) % colors.length]),0,name.length(),Spanned.SPAN_INCLUSIVE_EXCLUSIVE);
    builder.append("\n");
    builder.append(bypass.markdownToSpannable(((TextContent)message.getContent()).getText()));
    spannedText=builder;
  }
 else {
    spannedText=bypass.markdownToSpannable(((TextContent)message.getContent()).getText());
  }
  if (emoji().containsEmoji(spannedText)) {
    if (emoji().isLoaded()) {
      spannedText=emoji().processEmojiCompatMutable(spannedText,SmileProcessor.CONFIGURATION_BUBBLES);
    }
 else {
      final CharSequence finalSpannedText=spannedText;
      if (smilesListener != null) {
        emoji().unregisterListener(smilesListener);
      }
      smilesListener=new SmilesListener(){
        @Override public void onSmilesUpdated(        boolean completed){
          text.setText(emoji().processEmojiCompatMutable(finalSpannedText,SmileProcessor.CONFIGURATION_BUBBLES));
          emoji().unregisterListener(this);
        }
      }
;
      emoji().registerListener(smilesListener);
    }
  }
  text.setText(spannedText);
  text.setMovementMethod(LinkMovementMethod.getInstance());
  Linkify.addLinks(text,Linkify.EMAIL_ADDRESSES | Linkify.PHONE_NUMBERS | Linkify.WEB_URLS);
  if (message.getSenderId() == myUid()) {
    status.setVisibility(View.VISIBLE);
switch (message.getMessageState()) {
case SENT:
      status.setResource(R.drawable.msg_check_1);
    status.setTint(sentColor);
  break;
case RECEIVED:
status.setResource(R.drawable.msg_check_2);
status.setTint(deliveredColor);
break;
case READ:
status.setResource(R.drawable.msg_check_2);
status.setTint(readColor);
break;
default :
case PENDING:
status.setResource(R.drawable.msg_clock);
status.setTint(waitColor);
break;
case ERROR:
status.setResource(R.drawable.msg_error);
status.setTint(errorColor);
break;
}
}
 else {
status.setVisibility(View.GONE);
}
time.setText(TextUtils.formatTime(message.getDate()));
}
