{
  if (data == null) {
    return;
  }
  if (data.getSenderId() == myUid()) {
    messageBubble.setBackgroundResource(R.drawable.bubble_text_out);
  }
 else {
    messageBubble.setBackgroundResource(R.drawable.bubble_text_in);
  }
  if (peer.getPeerType() == PeerType.GROUP && data.getSenderId() != myUid()) {
    String name;
    UserModel userModel=users().get(data.getSenderId());
    if (userModel != null) {
      name=userModel.getName();
    }
 else {
      name="???";
    }
    SpannableStringBuilder builder=new SpannableStringBuilder();
    builder.append(name);
    builder.setSpan(new ForegroundColorSpan(colors[Math.abs(data.getSenderId()) % colors.length]),0,name.length(),Spanned.SPAN_INCLUSIVE_EXCLUSIVE);
    builder.append("\n");
    builder.append(((TextContent)data.getContent()).getText());
    text.setText(builder);
  }
 else {
    text.setText(((TextContent)data.getContent()).getText());
  }
  Linkify.addLinks(text,Linkify.EMAIL_ADDRESSES | Linkify.PHONE_NUMBERS | Linkify.WEB_URLS);
  if (data.getSenderId() == myUid()) {
    status.setVisibility(View.VISIBLE);
switch (data.getMessageState()) {
case SENT:
      status.setResource(R.drawable.msg_check_1);
    status.setTint(sentColor);
  break;
case RECEIVED:
status.setResource(R.drawable.msg_check_2);
status.setTint(deliveredColor);
break;
case READ:
status.setResource(R.drawable.msg_check_2);
status.setTint(readColor);
break;
default :
case PENDING:
status.setResource(R.drawable.msg_clock);
status.setTint(waitColor);
break;
case ERROR:
status.setResource(R.drawable.msg_error);
status.setTint(errorColor);
break;
}
}
 else {
status.setVisibility(View.GONE);
}
time.setText(TextUtils.formatTime(data.getDate()));
super.update(data,position,isUpdated,context);
}
