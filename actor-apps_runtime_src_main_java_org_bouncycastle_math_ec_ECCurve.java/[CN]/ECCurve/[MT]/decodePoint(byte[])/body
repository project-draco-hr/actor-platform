{
  ECPoint p=null;
  int expectedLength=(getFieldSize() + 7) / 8;
  byte type=encoded[0];
switch (type) {
case 0x00:
{
      if (encoded.length != 1) {
        throw new IllegalArgumentException("Incorrect length for infinity encoding");
      }
      p=getInfinity();
      break;
    }
case 0x02:
case 0x03:
{
    if (encoded.length != (expectedLength + 1)) {
      throw new IllegalArgumentException("Incorrect length for compressed encoding");
    }
    int yTilde=type & 1;
    BigInteger X=BigIntegers.fromUnsignedByteArray(encoded,1,expectedLength);
    p=decompressPoint(yTilde,X);
    if (!p.satisfiesCofactor()) {
      throw new IllegalArgumentException("Invalid point");
    }
    break;
  }
case 0x04:
{
  if (encoded.length != (2 * expectedLength + 1)) {
    throw new IllegalArgumentException("Incorrect length for uncompressed encoding");
  }
  BigInteger X=BigIntegers.fromUnsignedByteArray(encoded,1,expectedLength);
  BigInteger Y=BigIntegers.fromUnsignedByteArray(encoded,1 + expectedLength,expectedLength);
  p=validatePoint(X,Y);
  break;
}
case 0x06:
case 0x07:
{
if (encoded.length != (2 * expectedLength + 1)) {
  throw new IllegalArgumentException("Incorrect length for hybrid encoding");
}
BigInteger X=BigIntegers.fromUnsignedByteArray(encoded,1,expectedLength);
BigInteger Y=BigIntegers.fromUnsignedByteArray(encoded,1 + expectedLength,expectedLength);
if (Y.testBit(0) != (type == 0x07)) {
  throw new IllegalArgumentException("Inconsistent Y coordinate in hybrid encoding");
}
p=validatePoint(X,Y);
break;
}
default :
throw new IllegalArgumentException("Invalid point encoding 0x" + Integer.toString(type,16));
}
if (type != 0x00 && p.isInfinity()) {
throw new IllegalArgumentException("Invalid infinity encoding");
}
return p;
}
