{
  int tag=_in.read();
  if (tag == -1) {
    return null;
  }
  set00Check(false);
  int tagNo=ASN1InputStream.readTagNumber(_in,tag);
  boolean isConstructed=(tag & BERTags.CONSTRUCTED) != 0;
  int length=ASN1InputStream.readLength(_in,_limit);
  if (length < 0) {
    if (!isConstructed) {
      throw new IOException("indefinite length primitive encoding encountered");
    }
    IndefiniteLengthInputStream indIn=new IndefiniteLengthInputStream(_in,_limit);
    ASN1StreamParser sp=new ASN1StreamParser(indIn,_limit);
    if ((tag & BERTags.APPLICATION) != 0) {
      return new BERApplicationSpecificParser(tagNo,sp);
    }
    if ((tag & BERTags.TAGGED) != 0) {
      return new BERTaggedObjectParser(true,tagNo,sp);
    }
    return sp.readIndef(tagNo);
  }
 else {
    DefiniteLengthInputStream defIn=new DefiniteLengthInputStream(_in,length);
    if ((tag & BERTags.APPLICATION) != 0) {
      return new DERApplicationSpecific(isConstructed,tagNo,defIn.toByteArray());
    }
    if ((tag & BERTags.TAGGED) != 0) {
      return new BERTaggedObjectParser(isConstructed,tagNo,new ASN1StreamParser(defIn));
    }
    if (isConstructed) {
switch (tagNo) {
case BERTags.OCTET_STRING:
        return new BEROctetStringParser(new ASN1StreamParser(defIn));
case BERTags.SEQUENCE:
      return new DERSequenceParser(new ASN1StreamParser(defIn));
case BERTags.SET:
    return new DERSetParser(new ASN1StreamParser(defIn));
case BERTags.EXTERNAL:
  return new DERExternalParser(new ASN1StreamParser(defIn));
default :
throw new IOException("unknown tag " + tagNo + " encountered");
}
}
switch (tagNo) {
case BERTags.OCTET_STRING:
return new DEROctetStringParser(defIn);
}
try {
return ASN1InputStream.createPrimitiveDERObject(tagNo,defIn,tmpBuffers);
}
 catch (IllegalArgumentException e) {
throw new ASN1Exception("corrupted stream detected",e);
}
}
}
