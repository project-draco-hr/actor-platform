{
  Log.d(TAG,"onOffer(" + sessionId + ")");
  if (state != PeerConnectionState.WAITING_HANDSHAKE) {
    return;
  }
  if (this.sessionId != -1) {
    return;
  }
  isReady=false;
  peerConnection.setRemoteDescription(new WebRTCSessionDescription("offer",sdp)).flatMap(new Function<WebRTCSessionDescription,Promise<WebRTCSessionDescription>>(){
    @Override public Promise<WebRTCSessionDescription> apply(    WebRTCSessionDescription description){
      return peerConnection.createAnswer();
    }
  }
).flatMap(new Function<WebRTCSessionDescription,Promise<WebRTCSessionDescription>>(){
    @Override public Promise<WebRTCSessionDescription> apply(    WebRTCSessionDescription webRTCSessionDescription){
      return peerConnection.setLocalDescription(webRTCSessionDescription);
    }
  }
).then(new Consumer<WebRTCSessionDescription>(){
    @Override public void apply(    WebRTCSessionDescription webRTCSessionDescription){
      callback.onAnswer(sessionId,webRTCSessionDescription.getSdp());
      PeerConnectionActor.this.sessionId=sessionId;
      onHandShakeCompleted(sessionId);
      onReady();
    }
  }
).failure(new Consumer<Exception>(){
    @Override public void apply(    Exception e){
      e.printStackTrace();
      onHandshakeFailure();
    }
  }
);
}
