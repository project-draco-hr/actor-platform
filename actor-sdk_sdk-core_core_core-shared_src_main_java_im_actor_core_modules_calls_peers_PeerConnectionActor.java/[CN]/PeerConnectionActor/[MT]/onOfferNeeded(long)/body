{
  Log.d(TAG,"onOfferNeeded(" + sessionId + ")");
  if (state != PeerConnectionState.WAITING_HANDSHAKE) {
    return;
  }
  if (this.sessionId != -1) {
    return;
  }
  isReady=false;
  peerConnection.createOffer().flatMap(new Function<WebRTCSessionDescription,Promise<WebRTCSessionDescription>>(){
    @Override public Promise<WebRTCSessionDescription> apply(    WebRTCSessionDescription webRTCSessionDescription){
      return peerConnection.setLocalDescription(webRTCSessionDescription);
    }
  }
).then(new Consumer<WebRTCSessionDescription>(){
    @Override public void apply(    WebRTCSessionDescription webRTCSessionDescription){
      PeerConnectionActor.this.sessionId=sessionId;
      PeerConnectionActor.this.state=PeerConnectionState.WAITING_ANSWER;
      callback.onOffer(sessionId,webRTCSessionDescription.getSdp());
      onReady();
    }
  }
).failure(new Consumer<Exception>(){
    @Override public void apply(    Exception e){
      e.printStackTrace();
      onHandshakeFailure();
    }
  }
);
}
