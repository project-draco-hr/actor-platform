{
  return new PromisesArray<R>(new Promise<>(new PromiseFunc<Promise<R>[]>(){
    @Override public void exec(    @NotNull PromiseResolver<Promise<R>[]> resolver){
      promises.then(new Consumer<Promise<T>[]>(){
        @Override public void apply(        final Promise<T>[] sourcePromises){
          final Object[] res=new Object[sourcePromises.length];
          final Boolean[] ended=new Boolean[sourcePromises.length];
          for (int i=0; i < sourcePromises.length; i++) {
            final int finalI=i;
            sourcePromises[i].then(new Consumer<T>(){
              @Override public void apply(              T t){
                res[finalI]=t;
                ended[finalI]=true;
                for (int i1=0; i1 < sourcePromises.length; i1++) {
                  if (ended[i1] == null || !ended[i1]) {
                    return;
                  }
                }
                R[] resMap=fuc.apply((T[])res);
                ArrayList<Promise<R>> resultList=new ArrayList<>();
                for (                R r : resMap) {
                  resultList.add(Promises.success(r));
                }
                resolver.result(resultList.toArray(new Promise[0]));
              }
            }
);
            sourcePromises[i].failure(new Consumer<Exception>(){
              @Override public void apply(              Exception e){
                resolver.error(e);
              }
            }
);
          }
          if (sourcePromises.length == 0) {
            resolver.result(new Promise[0]);
          }
        }
      }
);
      promises.failure(new Consumer<Exception>(){
        @Override public void apply(        Exception e){
          resolver.error(e);
        }
      }
);
    }
  }
));
}
