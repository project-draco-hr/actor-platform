{
  return mapSourcePromises(new Function<Promise<T>,Promise<R>>(){
    @Override public Promise<R> apply(    final Promise<T> srcPromise){
      return new Promise<R>(new PromiseFunc<R>(){
        @Override public void exec(        @NotNull PromiseResolver<R> resolver){
          srcPromise.then(new Consumer<T>(){
            @Override public void apply(            T t){
              Promise<R> mapped=fun.apply(t);
              mapped.then(new Consumer<R>(){
                @Override public void apply(                R r){
                  resolver.result(r);
                }
              }
).failure(new Consumer<Exception>(){
                @Override public void apply(                Exception e){
                  resolver.error(e);
                }
              }
);
            }
          }
);
          srcPromise.failure(new Consumer<Exception>(){
            @Override public void apply(            Exception e){
              resolver.error(e);
            }
          }
);
        }
      }
);
    }
  }
);
}
