{
  try {
    while (!isClosed && !isInterrupted()) {
      if (socket.isClosed()) {
        Log.d(TAG,"Socket is closed");
        throw new IOException("Socket is closed");
      }
      if (!socket.isConnected()) {
        Log.d(TAG,"Socket is not connected");
        throw new IOException("Socket is not connected");
      }
      InputStream stream=socket.getInputStream();
      long start=System.currentTimeMillis();
      int pkgLen=readInt(stream);
      if (pkgLen < 0 || pkgLen > MAX_PACKAGE_SIZE) {
        Log.w(TAG,"Invalid package size: " + pkgLen);
        throw new IOException("Invalid package size");
      }
      int pkgIndex=readInt(stream);
      int expectedIndex=receivedPackets++;
      if (pkgIndex != expectedIndex) {
        Log.w(TAG,"Wrong seq. Expected " + expectedIndex + ", got "+ pkgIndex);
        throw new IOException("Wrong number of received packets");
      }
      byte[] pkg=readBytes(pkgLen - 8,stream);
      int pkgCrc=readInt(stream);
      CRC32 crc32=new CRC32();
      crc32.update(intToBytes(pkgLen));
      crc32.update(intToBytes(pkgIndex));
      crc32.update(pkg);
      int localCrc=(int)crc32.getValue();
      if (localCrc != pkgCrc) {
        Log.w(TAG,"Package crc32 expected: " + localCrc + ", got: "+ pkgCrc);
        throw new IOException("Wrong CRC");
      }
      callback.onMessage(pkg,0,pkg.length);
    }
  }
 catch (  final Throwable e) {
    Log.e(TAG,e);
    breakConnection();
  }
}
