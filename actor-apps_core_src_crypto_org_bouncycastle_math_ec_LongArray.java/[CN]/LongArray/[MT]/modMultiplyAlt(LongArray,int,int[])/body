{
  int aDeg=degree();
  if (aDeg == 0) {
    return this;
  }
  int bDeg=other.degree();
  if (bDeg == 0) {
    return other;
  }
  LongArray A=this, B=other;
  if (aDeg > bDeg) {
    A=other;
    B=this;
    int tmp=aDeg;
    aDeg=bDeg;
    bDeg=tmp;
  }
  int aLen=(aDeg + 63) >>> 6;
  int bLen=(bDeg + 63) >>> 6;
  int cLen=(aDeg + bDeg + 62) >>> 6;
  if (aLen == 1) {
    long a0=A.m_ints[0];
    if (a0 == 1L) {
      return B;
    }
    long[] c0=new long[cLen];
    multiplyWord(a0,B.m_ints,bLen,c0,0);
    return reduceResult(c0,0,cLen,m,ks);
  }
  int width, positions, top, banks;
  width=4;
  positions=16;
  top=64;
  banks=8;
  int shifts=top < 64 ? positions : positions - 1;
  int bMax=(bDeg + shifts + 63) >>> 6;
  int bTotal=bMax * banks, stride=width * banks;
  int[] ci=new int[1 << width];
  int cTotal=aLen;
{
    ci[0]=cTotal;
    cTotal+=bTotal;
    ci[1]=cTotal;
    for (int i=2; i < ci.length; ++i) {
      cTotal+=cLen;
      ci[i]=cTotal;
    }
    cTotal+=cLen;
  }
  ++cTotal;
  long[] c=new long[cTotal];
  interleave(A.m_ints,0,c,0,aLen,width);
{
    int bOff=aLen;
    System.arraycopy(B.m_ints,0,c,bOff,bLen);
    for (int bank=1; bank < banks; ++bank) {
      shiftUp(c,aLen,c,bOff+=bMax,bMax,bank);
    }
  }
  int MASK=(1 << width) - 1;
  int k=0;
  for (; ; ) {
    int aPos=0;
    do {
      long aVal=c[aPos] >>> k;
      int bank=0, bOff=aLen;
      for (; ; ) {
        int index=(int)(aVal) & MASK;
        if (index != 0) {
          add(c,aPos + ci[index],c,bOff,bMax);
        }
        if (++bank == banks) {
          break;
        }
        bOff+=bMax;
        aVal>>>=width;
      }
    }
 while (++aPos < aLen);
    if ((k+=stride) >= top) {
      if (k >= 64) {
        break;
      }
      k=64 - width;
      MASK&=MASK << (top - k);
    }
    shiftUp(c,aLen,bTotal,banks);
  }
  int ciPos=ci.length;
  while (--ciPos > 1) {
    if ((ciPos & 1L) == 0L) {
      addShiftedUp(c,ci[ciPos >>> 1],c,ci[ciPos],cLen,positions);
    }
 else {
      distribute(c,ci[ciPos],ci[ciPos - 1],ci[1],cLen);
    }
  }
  return reduceResult(c,ci[1],cLen,m,ks);
}
