{
  Log.d(TAG,"preStart");
  isReady=false;
  Promises.tuple(WebRTC.createPeerConnection(),WebRTC.getUserAudio()).map(new FunctionTupled2<WebRTCPeerConnection,WebRTCLocalStream,WebRTCPeerConnection>(){
    @Override public WebRTCPeerConnection apply(    WebRTCPeerConnection webRTCPeerConnection,    WebRTCLocalStream stream){
      webRTCPeerConnection.addOwnStream(stream);
      return webRTCPeerConnection;
    }
  }
).then(new Consumer<WebRTCPeerConnection>(){
    @Override public void apply(    WebRTCPeerConnection webRTCPeerConnection){
      Log.d(TAG,"preStart:then");
      PeerConnectionActor.this.peerConnection=webRTCPeerConnection;
      PeerConnectionActor.this.peerConnection.addCallback(new WebRTCPeerConnectionCallback(){
        @Override public void onCandidate(        int label,        String id,        String candidate){
        }
        @Override public void onCandidatesEnd(){
        }
        @Override public void onStreamAdded(        WebRTCRemoteStream stream){
        }
        @Override public void onStreamRemoved(        WebRTCRemoteStream stream){
        }
      }
);
      state=State.WAITING_HANDSHAKE;
      isReady=true;
      unstashAll();
    }
  }
).failure(new Consumer<Exception>(){
    @Override public void apply(    Exception e){
      e.printStackTrace();
      Log.d(TAG,"preStart:error");
    }
  }
).done(self());
}
