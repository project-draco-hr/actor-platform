{
  int[] x1=this.x;
  if (Nat192.isZero(x1) || Nat192.isOne(x1)) {
    return this;
  }
  int[] x2=Nat192.create();
  SecP192K1Field.square(x1,x2);
  SecP192K1Field.multiply(x2,x1,x2);
  int[] x3=Nat192.create();
  SecP192K1Field.square(x2,x3);
  SecP192K1Field.multiply(x3,x1,x3);
  int[] x6=Nat192.create();
  SecP192K1Field.squareN(x3,3,x6);
  SecP192K1Field.multiply(x6,x3,x6);
  int[] x8=x6;
  SecP192K1Field.squareN(x6,2,x8);
  SecP192K1Field.multiply(x8,x2,x8);
  int[] x16=x2;
  SecP192K1Field.squareN(x8,8,x16);
  SecP192K1Field.multiply(x16,x8,x16);
  int[] x19=x8;
  SecP192K1Field.squareN(x16,3,x19);
  SecP192K1Field.multiply(x19,x3,x19);
  int[] x35=Nat192.create();
  SecP192K1Field.squareN(x19,16,x35);
  SecP192K1Field.multiply(x35,x16,x35);
  int[] x70=x16;
  SecP192K1Field.squareN(x35,35,x70);
  SecP192K1Field.multiply(x70,x35,x70);
  int[] x140=x35;
  SecP192K1Field.squareN(x70,70,x140);
  SecP192K1Field.multiply(x140,x70,x140);
  int[] x159=x70;
  SecP192K1Field.squareN(x140,19,x159);
  SecP192K1Field.multiply(x159,x19,x159);
  int[] t1=x159;
  SecP192K1Field.squareN(t1,20,t1);
  SecP192K1Field.multiply(t1,x19,t1);
  SecP192K1Field.squareN(t1,4,t1);
  SecP192K1Field.multiply(t1,x3,t1);
  SecP192K1Field.squareN(t1,6,t1);
  SecP192K1Field.multiply(t1,x3,t1);
  SecP192K1Field.square(t1,t1);
  int[] t2=x3;
  SecP192K1Field.square(t1,t2);
  return Nat192.eq(x1,t2) ? new SecP192K1FieldElement(t1) : null;
}
