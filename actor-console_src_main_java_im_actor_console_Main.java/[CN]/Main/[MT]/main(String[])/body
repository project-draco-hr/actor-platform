{
  SwingTerminal terminal=TerminalFacade.createSwingTerminal();
  Screen screen=new Screen(terminal);
  gui=new GUIScreen(screen,new DefaultBackgroundRenderer());
  screen.startScreen();
  JavaInit.init();
  DB db=DBMaker.newFileDB(new File("prefs.db")).make();
  Configuration configuration=new Configuration();
  configuration.setEndpoints(new Endpoints(new ConnectionEndpoint[]{new ConnectionEndpoint("mtproto-api.actor.im",8080,ConnectionEndpoint.Type.TCP)}));
  configuration.setMainThread(new MainThread(){
    @Override public void runOnUiThread(    final Runnable runnable){
      gui.runInEventThread(new Action(){
        @Override public void doAction(){
          runnable.run();
        }
      }
);
    }
  }
);
  configuration.setPreferencesStorage(new MapDbPreferences(db));
  configuration.setEnginesFactory(new Storage(){
    @Override public KeyValueEngine<User> createUsersEngine(){
      return new MapDbKeyValueEngine<User>(DBMaker.newFileDB(new File("users.db")).make(),new MapDbKeyValueEngine.Serializer<User>(){
        @Override public byte[] serialize(        User user){
          return new UserEntity(user).toByteArray();
        }
        @Override public User deserialize(        byte[] v){
          try {
            return Bser.parse(new UserEntity(),v).getUser();
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
          return null;
        }
      }
);
    }
    @Override public ListEngine<Dialog> createDialogsEngine(){
      return new MemoryListEngine<Dialog>();
    }
    @Override public ListEngine<Message> createMessagesEngine(    Peer peer){
      return new MemoryListEngine<Message>();
    }
    @Override public KeyValueEngine<OutUnreadMessage> pendingMessages(    Peer peer){
      return null;
    }
  }
);
  messenger=new Messenger(configuration);
  updateMainUi();
}
