{
  if (mFakeDragging) {
    return true;
  }
  if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getEdgeFlags() != 0) {
    return false;
  }
  if (mAdapter == null || mAdapter.getCount() == 0) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
  boolean needsInvalidate=false;
switch (action & MotionEventCompat.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      mScroller.abortAnimation();
      mPopulatePending=false;
      populate();
      mLastMotionX=mInitialMotionX=ev.getX();
      mLastMotionY=mInitialMotionY=ev.getY();
      mActivePointerId=MotionEventCompat.getPointerId(ev,0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  if (!mIsBeingDragged) {
    final int pointerIndex=MotionEventCompat.findPointerIndex(ev,mActivePointerId);
    final float y=MotionEventCompat.getY(ev,pointerIndex);
    final float yDiff=Math.abs(y - mLastMotionY);
    final float x=MotionEventCompat.getX(ev,pointerIndex);
    final float xDiff=Math.abs(x - mLastMotionX);
    if (DEBUG)     Log.v(TAG,"Moved x to " + x + ","+ y+ " diff="+ xDiff+ ","+ yDiff);
    if (yDiff > mTouchSlop && yDiff > xDiff) {
      if (DEBUG)       Log.v(TAG,"Starting drag!");
      mIsBeingDragged=true;
      requestParentDisallowInterceptTouchEvent(true);
      mLastMotionY=y - mInitialMotionY > 0 ? mInitialMotionY + mTouchSlop : mInitialMotionY - mTouchSlop;
      mLastMotionX=x;
      setScrollState(SCROLL_STATE_DRAGGING);
      setScrollingCacheEnabled(true);
      ViewParent parent=getParent();
      if (parent != null) {
        parent.requestDisallowInterceptTouchEvent(true);
      }
    }
  }
if (mIsBeingDragged) {
  final int activePointerIndex=MotionEventCompat.findPointerIndex(ev,mActivePointerId);
  final float y=MotionEventCompat.getY(ev,activePointerIndex);
  needsInvalidate|=performDrag(y);
}
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
final VelocityTracker velocityTracker=mVelocityTracker;
velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
int initialVelocity=(int)VelocityTrackerCompat.getYVelocity(velocityTracker,mActivePointerId);
mPopulatePending=true;
final int height=getClientHeight();
final int scrollY=getScrollY();
final ItemInfo ii=infoForCurrentScrollPosition();
final int currentPage=ii.position;
final float pageOffset=(((float)scrollY / height) - ii.offset) / ii.heightFactor;
final int activePointerIndex=MotionEventCompat.findPointerIndex(ev,mActivePointerId);
final float y=MotionEventCompat.getY(ev,activePointerIndex);
final int totalDelta=(int)(y - mInitialMotionY);
int nextPage=determineTargetPage(currentPage,pageOffset,initialVelocity,totalDelta);
setCurrentItemInternal(nextPage,true,true,initialVelocity);
mActivePointerId=INVALID_POINTER;
endDrag();
needsInvalidate=mTopEdge.onRelease() | mBottomEdge.onRelease();
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged) {
scrollToItem(mCurItem,true,0,false);
mActivePointerId=INVALID_POINTER;
endDrag();
needsInvalidate=mTopEdge.onRelease() | mBottomEdge.onRelease();
}
break;
case MotionEventCompat.ACTION_POINTER_DOWN:
{
final int index=MotionEventCompat.getActionIndex(ev);
final float y=MotionEventCompat.getY(ev,index);
mLastMotionY=y;
mActivePointerId=MotionEventCompat.getPointerId(ev,index);
break;
}
case MotionEventCompat.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
mLastMotionY=MotionEventCompat.getY(ev,MotionEventCompat.findPointerIndex(ev,mActivePointerId));
break;
}
if (needsInvalidate) {
ViewCompat.postInvalidateOnAnimation(this);
}
return true;
}
