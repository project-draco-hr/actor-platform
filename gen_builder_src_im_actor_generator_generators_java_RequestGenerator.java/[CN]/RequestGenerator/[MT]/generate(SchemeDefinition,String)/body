{
  String destFolder=path + "/" + JavaConfig.PATH+ "/rpc/";
  new File(destFolder).mkdirs();
  for (  SchemeRpc u : definition.getAllRpc()) {
    String javaName=JavaConfig.getRequestName(u.getName());
    String responseJavaName;
    if (u.getResponse() instanceof SchemeRpc.RefResponse) {
      responseJavaName=JavaConfig.getResponseName(((SchemeRpc.RefResponse)u.getResponse()).getName());
    }
 else {
      responseJavaName=JavaConfig.getAnonymousResponseName(u.getName());
    }
    FileGenerator generator=new FileGenerator(destFolder + "/" + javaName+ ".java");
    generator.appendLn("package " + JavaConfig.PACKAGE + ".rpc;");
    for (    String im : JavaConfig.IMPORTS) {
      generator.appendLn("import " + im + ";");
    }
    generator.appendLn("import " + JavaConfig.PACKAGE + ".*;");
    generator.appendLn();
    generator.appendLn("public class " + javaName + " extends Request<"+ responseJavaName+ "> {");
    generator.increaseDepth();
    generator.appendLn();
    generator.appendLn("public static final int HEADER = 0x" + Integer.toHexString(u.getHeader()) + ";");
    generator.appendLn("public static " + javaName + " fromBytes(byte[] data) throws IOException {");
    generator.increaseDepth();
    generator.appendLn("return Bser.parse(" + javaName + ".class, data);");
    generator.decreaseDepth();
    generator.appendLn("}");
    generator.appendLn();
    ContainerGenerator.generateFields(generator,u);
    generator.appendLn();
    if (u.getAttributes().size() > 0) {
      ContainerGenerator.generateConstructor(generator,u,javaName);
    }
    generator.appendLn("public " + javaName + "() {");
    generator.appendLn();
    generator.appendLn("}");
    generator.appendLn();
    ContainerGenerator.generateGetters(generator,u);
    ContainerGenerator.generateSerialization(generator,u);
    ContainerGenerator.generateDeserialization(generator,u);
    generator.appendLn("@Override");
    generator.appendLn("public int getHeaderKey() {");
    generator.increaseDepth();
    generator.appendLn("return HEADER;");
    generator.decreaseDepth();
    generator.appendLn("}");
    generator.decreaseDepth();
    generator.appendLn("}");
    generator.close();
  }
  for (  SchemeBaseResponse u : definition.getAllResponses()) {
    String javaName;
    if (u instanceof SchemeResponse) {
      javaName=JavaConfig.getResponseName(((SchemeResponse)u).getName());
    }
 else {
      SchemeResponseAnonymous anonymous=(SchemeResponseAnonymous)u;
      javaName=JavaConfig.getAnonymousResponseName(anonymous.getRpc().getName());
    }
    FileGenerator generator=new FileGenerator(destFolder + "/" + javaName+ ".java");
    generator.appendLn("package " + JavaConfig.PACKAGE + ".rpc;");
    for (    String im : JavaConfig.IMPORTS) {
      generator.appendLn("import " + im + ";");
    }
    generator.appendLn("import " + JavaConfig.PACKAGE + ".*;");
    generator.appendLn();
    generator.appendLn("public class " + javaName + " extends Response {");
    generator.increaseDepth();
    generator.appendLn();
    generator.appendLn("public static final int HEADER = 0x" + Integer.toHexString(u.getHeader()) + ";");
    generator.appendLn("public static " + javaName + " fromBytes(byte[] data) throws IOException {");
    generator.increaseDepth();
    generator.appendLn("return Bser.parse(" + javaName + ".class, data);");
    generator.decreaseDepth();
    generator.appendLn("}");
    generator.appendLn();
    ContainerGenerator.generateFields(generator,u);
    generator.appendLn();
    if (u.getAttributes().size() > 0) {
      ContainerGenerator.generateConstructor(generator,u,javaName);
    }
    generator.appendLn("public " + javaName + "() {");
    generator.appendLn();
    generator.appendLn("}");
    generator.appendLn();
    ContainerGenerator.generateGetters(generator,u);
    ContainerGenerator.generateSerialization(generator,u);
    ContainerGenerator.generateDeserialization(generator,u);
    generator.appendLn("@Override");
    generator.appendLn("public int getHeaderKey() {");
    generator.increaseDepth();
    generator.appendLn("return HEADER;");
    generator.decreaseDepth();
    generator.appendLn("}");
    generator.decreaseDepth();
    generator.appendLn("}");
    generator.close();
  }
}
