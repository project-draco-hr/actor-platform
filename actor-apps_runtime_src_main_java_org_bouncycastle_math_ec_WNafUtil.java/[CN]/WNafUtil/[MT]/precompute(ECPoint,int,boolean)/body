{
  ECCurve c=p.getCurve();
  WNafPreCompInfo wnafPreCompInfo=getWNafPreCompInfo(c.getPreCompInfo(p,PRECOMP_NAME));
  ECPoint[] preComp=wnafPreCompInfo.getPreComp();
  if (preComp == null) {
    preComp=new ECPoint[]{p};
  }
  int preCompLen=preComp.length;
  int reqPreCompLen=1 << Math.max(0,width - 2);
  if (preCompLen < reqPreCompLen) {
    preComp=resizeTable(preComp,reqPreCompLen);
    if (reqPreCompLen == 2) {
      preComp[1]=preComp[0].threeTimes();
    }
 else {
      ECPoint twiceP=wnafPreCompInfo.getTwice();
      if (twiceP == null) {
        twiceP=preComp[0].twice();
        wnafPreCompInfo.setTwice(twiceP);
      }
      for (int i=preCompLen; i < reqPreCompLen; i++) {
        preComp[i]=twiceP.add(preComp[i - 1]);
      }
    }
    c.normalizeAll(preComp);
  }
  wnafPreCompInfo.setPreComp(preComp);
  if (includeNegated) {
    ECPoint[] preCompNeg=wnafPreCompInfo.getPreCompNeg();
    int pos;
    if (preCompNeg == null) {
      pos=0;
      preCompNeg=new ECPoint[reqPreCompLen];
    }
 else {
      pos=preCompNeg.length;
      if (pos < reqPreCompLen) {
        preCompNeg=resizeTable(preCompNeg,reqPreCompLen);
      }
    }
    while (pos < reqPreCompLen) {
      preCompNeg[pos]=preComp[pos].negate();
      ++pos;
    }
    wnafPreCompInfo.setPreCompNeg(preCompNeg);
  }
  c.setPreCompInfo(p,PRECOMP_NAME,wnafPreCompInfo);
  return wnafPreCompInfo;
}
