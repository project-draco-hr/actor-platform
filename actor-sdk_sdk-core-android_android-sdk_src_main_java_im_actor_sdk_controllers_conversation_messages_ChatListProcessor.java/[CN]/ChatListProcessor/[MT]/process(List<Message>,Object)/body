{
  if (mobileInvitePattern == null) {
    mobileInvitePattern=Pattern.compile("(actor:\\\\/\\\\/)(invite\\\\?token=)([0-9-a-z]{1,64})");
  }
  if (invitePattern == null) {
    invitePattern=Pattern.compile("(https:\\/\\/)(quit\\.email\\/join\\/)([0-9-a-z]{1,64})");
  }
  if (peoplePattern == null) {
    peoplePattern=Pattern.compile("(people:\\\\/\\\\/)([0-9]{1,20})");
  }
  if (mentionPattern == null) {
    mentionPattern=Pattern.compile("(@)([0-9a-zA-Z_]{5,32})");
  }
  ArrayList<PreprocessedData> preprocessedDatas=new ArrayList<PreprocessedData>();
  for (  Message msg : items) {
    messenger().getUser(msg.getSenderId());
    boolean isImage=msg.getContent() instanceof PhotoContent || msg.getContent() instanceof VideoContent || msg.getContent() instanceof LocationContent;
    boolean hasReactions=msg.getReactions() != null && msg.getReactions().size() > 0;
    Spannable reactions=null;
    if (hasReactions) {
      SpannableStringBuilder builder=new SpannableStringBuilder();
      SpannableString s;
      boolean hasMyReaction=false;
      for (      Reaction r : msg.getReactions()) {
        s=new SpannableString(Integer.toString(r.getUids().size()).concat(r.getCode()).concat("  "));
        for (        Integer uid : r.getUids()) {
          if (uid == myUid()) {
            hasMyReaction=true;
            break;
          }
        }
        s.setSpan(new ReactionSpan(r.getCode(),hasMyReaction,fragment.getPeer(),msg.getRid(),isImage ? Color.WHITE : ActorSDK.sharedActor().style.getConvTimeColor()),0,s.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        reactions=builder.append(s);
      }
    }
    if (msg.getContent() instanceof TextContent) {
      int updatedHash=msg.getContent().getUpdatedHash();
      if (!preprocessedTexts.containsKey(msg.getRid()) || !updatedTexts.contains(updatedHash)) {
        TextContent text=(TextContent)msg.getContent();
        Spannable spannableString=new SpannableString(text.getText());
        boolean hasSpannable=false;
        emoji().waitForEmoji();
        Spannable markdown=AndroidMarkdown.processText(text.getText());
        if (markdown != null) {
          spannableString=markdown;
          hasSpannable=true;
        }
        if (Linkify.addLinks(spannableString,Linkify.EMAIL_ADDRESSES | Linkify.PHONE_NUMBERS | Linkify.WEB_URLS)) {
          hasSpannable=true;
        }
        if (fixLinkifyCustomLinks(spannableString,mobileInvitePattern,false)) {
          hasSpannable=true;
        }
        if (fixLinkifyCustomLinks(spannableString,invitePattern,false)) {
          hasSpannable=true;
        }
        if (fixLinkifyCustomLinks(spannableString,peoplePattern,true)) {
          hasSpannable=true;
        }
        if (fixLinkifyCustomLinks(spannableString,mentionPattern,true)) {
          hasSpannable=true;
        }
        if (isGroup && msg.getSenderId() != myUid()) {
          String name;
          UserVM userModel=users().get(msg.getSenderId());
          if (userModel != null) {
            String userName=userModel.getName().get();
            if (userName.equals("Bot")) {
              name=group.getName().get();
            }
 else {
              name=userName;
            }
          }
 else {
            name="???";
          }
          SpannableStringBuilder builder=new SpannableStringBuilder();
          builder.append(name);
          builder.setSpan(new ForegroundColorSpan(colors[Math.abs(msg.getSenderId()) % colors.length]),0,name.length(),Spanned.SPAN_INCLUSIVE_EXCLUSIVE);
          builder.append("\n");
          spannableString=builder.append(spannableString);
          hasSpannable=true;
        }
        if (SmileProcessor.containsEmoji(spannableString)) {
          spannableString=emoji().processEmojiCompatMutable(spannableString,SmileProcessor.CONFIGURATION_BUBBLES);
          hasSpannable=true;
        }
        updatedTexts.add(updatedHash);
        preprocessedTexts.put(msg.getRid(),new PreprocessedTextData(reactions,text.getText(),hasSpannable ? spannableString : null));
      }
 else {
        PreprocessedTextData text=preprocessedTexts.get(msg.getRid());
        preprocessedTexts.put(msg.getRid(),new PreprocessedTextData(reactions,text.getText(),text.getSpannableString()));
      }
      preprocessedDatas.add(preprocessedTexts.get(msg.getRid()));
    }
 else     if (msg.getContent() instanceof ContactContent) {
      ContactContent contact=(ContactContent)msg.getContent();
      String text="";
      for (      String phone : contact.getPhones()) {
        text+="\n".concat(phone);
      }
      for (      String email : contact.getEmails()) {
        text+="\n".concat(email);
      }
      Spannable spannableString=new SpannableString(text);
      SpannableStringBuilder builder=new SpannableStringBuilder();
      String name;
      name=contact.getName();
      builder.append(name);
      builder.setSpan(new ForegroundColorSpan(colors[Math.abs(msg.getSenderId()) % colors.length]),0,name.length(),Spanned.SPAN_INCLUSIVE_EXCLUSIVE);
      spannableString=builder.append(spannableString);
      preprocessedTexts.put(msg.getRid(),new PreprocessedTextData(reactions,text,spannableString));
      preprocessedDatas.add(preprocessedTexts.get(msg.getRid()));
    }
 else {
      preprocessedDatas.add(new PreprocessedData(reactions));
    }
  }
  return new PreprocessedList(preprocessedDatas.toArray(new PreprocessedData[preprocessedDatas.size()]));
}
