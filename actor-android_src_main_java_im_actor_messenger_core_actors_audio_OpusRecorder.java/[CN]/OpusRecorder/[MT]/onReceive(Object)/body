{
  if (message instanceof StartRecord) {
    Logger.d(TAG,"Starting record");
    stopRecord();
    try {
      fileName=File.createTempFile("opus_",".opus",AppContext.getContext().getFilesDir()).getAbsolutePath();
    }
 catch (    IOException e) {
      return;
    }
    if (opusLib.startRecord(fileName) == 0) {
      return;
    }
    int minBufferSize=AudioRecord.getMinBufferSize(16000,AudioFormat.CHANNEL_IN_MONO,AudioFormat.ENCODING_PCM_16BIT);
    bufferSize=16 * minBufferSize;
    audioRecord=new AudioRecord(MediaRecorder.AudioSource.MIC,16000,AudioFormat.CHANNEL_IN_MONO,AudioFormat.ENCODING_PCM_16BIT,bufferSize);
    audioRecord.startRecording();
    isStarted=true;
    recordStartTime=SystemClock.uptimeMillis();
    self().sendOnce(new IterateRecord());
    vibrate();
  }
 else   if (message instanceof IterateRecord) {
    Logger.d(TAG,"Record iteration");
    if (!isStarted) {
      return;
    }
    int len=audioRecord.read(buffer,0,buffer.length);
    if (len > 0) {
      ByteBuffer finalBuffer=ByteBuffer.allocateDirect(len);
      finalBuffer.put(buffer,0,len);
      finalBuffer.rewind();
      boolean flush=false;
      while (finalBuffer.hasRemaining()) {
        int oldLimit=-1;
        if (finalBuffer.remaining() > fileBuffer.remaining()) {
          oldLimit=finalBuffer.limit();
          finalBuffer.limit(fileBuffer.remaining() + finalBuffer.position());
        }
        fileBuffer.put(finalBuffer);
        if (fileBuffer.position() == fileBuffer.limit() || flush) {
          int length=!flush ? fileBuffer.limit() : finalBuffer.position();
          if (opusLib.writeFrame(fileBuffer,length) != 0) {
            fileBuffer.rewind();
          }
        }
        if (oldLimit != -1) {
          finalBuffer.limit(oldLimit);
        }
      }
    }
    self().sendOnce(new IterateRecord());
  }
 else   if (message instanceof AbortRecord) {
    Logger.d(TAG,"Record abort");
    stopRecord();
  }
 else   if (message instanceof SendAudio) {
    Logger.d(TAG,"Record success");
    if (!isStarted) {
      return;
    }
    stopRecord();
    long duration=SystemClock.uptimeMillis() - recordStartTime;
    if (duration < 1000) {
      return;
    }
    SendAudio sendAudio=(SendAudio)message;
    MessageDeliveryActor.messageSender().sendOpus(sendAudio.getType(),sendAudio.getId(),fileName,(int)(duration / 1000));
  }
}
