{
  this.sticker=sticker;
  FileReference fileReference;
switch (size) {
default :
case STICKER_FULL:
    fileReference=sticker.getFileReference512();
  break;
case STICKER_BIG:
fileReference=sticker.getFileReference256();
break;
case STICKER_SMALL:
fileReference=sticker.getFileReference128();
break;
}
if (this.fileReference != null && this.fileReference.equals(fileReference)) {
return;
}
if (bindedFile != null) {
bindedFile.detach();
bindedFile=null;
}
setImageURI(null);
this.fileReference=fileReference;
bindedFile=messenger().bindFile(fileReference,true,new FileVMCallback(){
private boolean isFastThumbLoaded=false;
private void checkFastThumb(){
if (!isFastThumbLoaded) {
isFastThumbLoaded=true;
if (sticker.getThumb() != null) {
fastThumbLoader.request(sticker.getThumb());
}
}
}
@Override public void onNotDownloaded(){
checkFastThumb();
}
@Override public void onDownloading(float progress){
checkFastThumb();
}
@Override public void onDownloaded(FileSystemReference reference){
imageFile=new File(reference.getDescriptor());
ImageRequest request=ImageRequestBuilder.newBuilderWithSource(Uri.fromFile(imageFile)).setAutoRotateEnabled(true).build();
PipelineDraweeController controller=(PipelineDraweeController)Fresco.newDraweeControllerBuilder().setOldController(getController()).setImageRequest(request).build();
setController(controller);
loaded=true;
}
}
);
}
