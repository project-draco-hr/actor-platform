{
  final long id=RandomUtils.nextRid();
  new Promise<Object>(){
    @Override protected void exec(    @NotNull PromiseResolver<Object> executor){
      become(new Receiver(){
        @Override public void onReceive(        Object message){
          if (message instanceof AskIntResult) {
            AskIntResult askResult=((AskIntResult)message);
            if (askResult.getId() != id) {
              stash();
              return;
            }
            unbecome();
            unstashAll();
            if (callback != null) {
              callback.onResult(askResult.getResult());
            }
          }
 else           if (message instanceof AskIntError) {
            AskIntError error=((AskIntError)message);
            if (error.getId() != id) {
              stash();
              return;
            }
            unbecome();
            unstashAll();
            if (callback != null) {
              callback.onError(error.getException());
            }
          }
 else {
            stash();
          }
        }
      }
);
      dest.send(new AskIntRequest(message,executor));
    }
  }
.then(new Supplier<Object>(){
    @Override public void apply(    Object o){
      self().send(new AskIntResult(id,o));
    }
  }
).failure(new Supplier<Exception>(){
    @Override public void apply(    Exception e){
      self().send(new AskIntError(id,e));
    }
  }
).done(self());
}
