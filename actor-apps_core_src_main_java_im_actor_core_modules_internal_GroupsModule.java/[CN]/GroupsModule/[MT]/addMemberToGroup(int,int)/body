{
  return new Command<Boolean>(){
    @Override public void start(    final CommandCallback<Boolean> callback){
      GroupEntity group=getGroups().getValue(gid);
      UserEntity user=users().getValue(uid);
      if (group == null || user == null) {
        runOnUiThread(new Runnable(){
          @Override public void run(){
            callback.onError(new RpcInternalException());
          }
        }
);
        return;
      }
      final long rid=RandomUtils.nextRid();
      request(new RequestInviteUser(new GroupOutPeer(group.getGroupId(),group.getAccessHash()),rid,new UserOutPeer(uid,user.getAccessHash())),new RpcCallback<ResponseSeqDate>(){
        @Override public void onResult(        ResponseSeqDate response){
          updates().onSeqUpdateReceived(response.getSeq(),response.getState(),new UpdateGroupUserInvited(gid,rid,uid,myUid(),response.getDate()));
          updates().executeAfter(response.getSeq(),new Runnable(){
            @Override public void run(){
              runOnUiThread(new Runnable(){
                @Override public void run(){
                  callback.onResult(true);
                }
              }
);
            }
          }
);
        }
        @Override public void onError(        RpcException e){
          runOnUiThread(new Runnable(){
            @Override public void run(){
              callback.onError(new RpcInternalException());
            }
          }
);
        }
      }
);
    }
  }
;
}
