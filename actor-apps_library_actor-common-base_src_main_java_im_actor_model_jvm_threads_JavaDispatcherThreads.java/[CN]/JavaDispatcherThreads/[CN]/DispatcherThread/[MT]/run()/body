{
  while (!isClosed) {
    long time=currentTime();
synchronized (threads) {
      isChanged=false;
    }
    final DispatchResult action=getQueue().dispatch(time);
    if (!action.isResult()) {
      if (isChanged) {
        continue;
      }
synchronized (threads) {
        long delay=action.getDelay();
        action.recycle();
        try {
          if (delay > 0) {
            threads.wait(delay);
          }
          continue;
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
          return;
        }
      }
    }
    try {
      T actiondData=(T)action.getRes();
      action.recycle();
      dispatchMessage(actiondData);
    }
 catch (    Throwable t) {
      t.printStackTrace();
    }
  }
}
