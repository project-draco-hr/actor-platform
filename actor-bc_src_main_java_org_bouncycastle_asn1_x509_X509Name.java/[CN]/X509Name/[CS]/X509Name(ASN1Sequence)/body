{
  this.seq=seq;
  Enumeration e=seq.getObjects();
  while (e.hasMoreElements()) {
    ASN1Set set=ASN1Set.getInstance(((ASN1Encodable)e.nextElement()).toASN1Primitive());
    for (int i=0; i < set.size(); i++) {
      ASN1Sequence s=ASN1Sequence.getInstance(set.getObjectAt(i).toASN1Primitive());
      if (s.size() != 2) {
        throw new IllegalArgumentException("badly sized pair");
      }
      ordering.addElement(ASN1ObjectIdentifier.getInstance(s.getObjectAt(0)));
      ASN1Encodable value=s.getObjectAt(1);
      if (value instanceof ASN1String && !(value instanceof DERUniversalString)) {
        String v=((ASN1String)value).getString();
        if (v.length() > 0 && v.charAt(0) == '#') {
          values.addElement("\\" + v);
        }
 else {
          values.addElement(v);
        }
      }
 else {
        try {
          values.addElement("#" + bytesToString(Hex.encode(value.toASN1Primitive().getEncoded(ASN1Encoding.DER))));
        }
 catch (        IOException e1) {
          throw new IllegalArgumentException("cannot encode value");
        }
      }
      added.addElement((i != 0) ? TRUE : FALSE);
    }
  }
}
