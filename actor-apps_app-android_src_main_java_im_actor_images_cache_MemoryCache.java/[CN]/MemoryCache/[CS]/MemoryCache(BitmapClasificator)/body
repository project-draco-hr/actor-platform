{
  this.clasificator=clasificator;
  BitmapClasificator.CacheConfig[] configs=clasificator.getConfigs();
  for (  BitmapClasificator.CacheConfig config : configs) {
    LruCache<String,Bitmap> lruCache=null;
    LruCache<String,Bitmap> freeCache=null;
    if (config.isFreeEnabled()) {
      if (config.isUseSizeInBytes()) {
        freeCache=new LruCache<String,Bitmap>(config.getMaxFreeSize()){
          @Override protected int sizeOf(          String key,          Bitmap value){
            return ImageLoading.bitmapSize(value);
          }
        }
;
      }
 else {
        freeCache=new LruCache<String,Bitmap>(config.getMaxFreeSize());
      }
    }
    if (config.isLruEnabled()) {
      final LruCache<String,Bitmap> finalFreeCache=freeCache;
      if (config.isUseSizeInBytes()) {
        lruCache=new LruCache<String,Bitmap>(config.getMaxLruSize()){
          @Override protected int sizeOf(          String key,          Bitmap value){
            return ImageLoading.bitmapSize(value);
          }
          @Override protected void entryRemoved(          boolean evicted,          String key,          Bitmap oldValue,          Bitmap newValue){
            if (newValue == null) {
              return;
            }
            if (evicted) {
              if (finalFreeCache != null) {
                finalFreeCache.put(key,newValue);
              }
            }
          }
        }
;
      }
 else {
        lruCache=new LruCache<String,Bitmap>(config.getMaxLruSize()){
          @Override protected void entryRemoved(          boolean evicted,          String key,          Bitmap oldValue,          Bitmap newValue){
            if (newValue == null) {
              return;
            }
            if (evicted) {
              if (finalFreeCache != null) {
                finalFreeCache.put(key,newValue);
              }
            }
          }
        }
;
      }
    }
    categories.put(config.getCategory(),new CategoryHolder(config,lruCache,freeCache));
  }
}
