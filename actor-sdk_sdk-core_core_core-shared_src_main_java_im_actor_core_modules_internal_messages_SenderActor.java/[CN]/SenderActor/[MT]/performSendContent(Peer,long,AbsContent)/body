{
  final ApiOutPeer outPeer=buidOutPeer(peer);
  final ApiPeer apiPeer=buildApiPeer(peer);
  if (outPeer == null || apiPeer == null) {
    return;
  }
  ApiMessage message;
  if (content instanceof TextContent) {
    message=new ApiTextMessage(((TextContent)content).getText(),((TextContent)content).getMentions(),((TextContent)content).getTextMessageEx());
  }
 else   if (content instanceof DocumentContent) {
    DocumentContent documentContent=(DocumentContent)content;
    FileRemoteSource source=(FileRemoteSource)documentContent.getSource();
    ApiDocumentEx documentEx=null;
    if (content instanceof PhotoContent) {
      PhotoContent photoContent=(PhotoContent)content;
      documentEx=new ApiDocumentExPhoto(photoContent.getW(),photoContent.getH());
    }
 else     if (content instanceof VideoContent) {
      VideoContent videoContent=(VideoContent)content;
      documentEx=new ApiDocumentExVideo(videoContent.getW(),videoContent.getH(),videoContent.getDuration());
    }
 else     if (content instanceof VoiceContent) {
      VoiceContent voiceContent=(VoiceContent)content;
      documentEx=new ApiDocumentExVoice(voiceContent.getDuration());
    }
    ApiFastThumb fastThumb=null;
    if (documentContent.getFastThumb() != null) {
      fastThumb=new ApiFastThumb(documentContent.getFastThumb().getW(),documentContent.getFastThumb().getH(),documentContent.getFastThumb().getImage());
    }
    message=new ApiDocumentMessage(source.getFileReference().getFileId(),source.getFileReference().getAccessHash(),source.getFileReference().getFileSize(),source.getFileReference().getFileName(),documentContent.getMimeType(),fastThumb,documentEx);
  }
 else   if (content instanceof LocationContent) {
    message=new ApiJsonMessage(((LocationContent)content).getRawJson());
  }
 else   if (content instanceof ContactContent) {
    message=new ApiJsonMessage(((ContactContent)content).getRawJson());
  }
 else   if (content instanceof StickerContent) {
    Sticker sticker=((StickerContent)content).getSticker();
    message=new ApiStickerMessage(sticker.getStickerId(),null,sticker.getApiImageLocation512(),sticker.getApiImageLocation256(),sticker.getStickerCollectionId(),sticker.getCollectionAccessHash());
  }
 else {
    return;
  }
  request(new RequestSendMessage(outPeer,rid,message),new RpcCallback<ResponseSeqDate>(){
    @Override public void onResult(    ResponseSeqDate response){
      self().send(new MessageSent(peer,rid));
      updates().onUpdateReceived(new SeqUpdate(response.getSeq(),response.getState(),UpdateMessageSent.HEADER,new UpdateMessageSent(apiPeer,rid,response.getDate()).toByteArray()));
    }
    @Override public void onError(    RpcException e){
      self().send(new MessageError(peer,rid));
    }
  }
);
}
