{
  int uzDegree=degree();
  if (uzDegree == 0) {
    throw new IllegalStateException();
  }
  if (uzDegree == 1) {
    return this;
  }
  LongArray uz=(LongArray)clone();
  int t=(m + 63) >>> 6;
  LongArray vz=new LongArray(t);
  reduceBit(vz.m_ints,0,m,m,ks);
  LongArray g1z=new LongArray(t);
  g1z.m_ints[0]=1L;
  LongArray g2z=new LongArray(t);
  int[] uvDeg=new int[]{uzDegree,m + 1};
  LongArray[] uv=new LongArray[]{uz,vz};
  int[] ggDeg=new int[]{1,0};
  LongArray[] gg=new LongArray[]{g1z,g2z};
  int b=1;
  int duv1=uvDeg[b];
  int dgg1=ggDeg[b];
  int j=duv1 - uvDeg[1 - b];
  for (; ; ) {
    if (j < 0) {
      j=-j;
      uvDeg[b]=duv1;
      ggDeg[b]=dgg1;
      b=1 - b;
      duv1=uvDeg[b];
      dgg1=ggDeg[b];
    }
    uv[b].addShiftedByBitsSafe(uv[1 - b],uvDeg[1 - b],j);
    int duv2=uv[b].degreeFrom(duv1);
    if (duv2 == 0) {
      return gg[1 - b];
    }
{
      int dgg2=ggDeg[1 - b];
      gg[b].addShiftedByBitsSafe(gg[1 - b],dgg2,j);
      dgg2+=j;
      if (dgg2 > dgg1) {
        dgg1=dgg2;
      }
 else       if (dgg2 == dgg1) {
        dgg1=gg[b].degreeFrom(dgg1);
      }
    }
    j+=(duv2 - duv1);
    duv1=duv2;
  }
}
