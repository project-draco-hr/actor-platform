{
  float bitmapWidth=bitmap.getWidth();
  float bitmapHeight=bitmap.getHeight();
  float screenWidth=Screen.getWidth();
  float screenHeight=Screen.getHeight() + (Build.VERSION.SDK_INT >= 19 ? Screen.getNavbarHeight() : 0);
  if (bitmapHeight > screenHeight || bitmapWidth > screenWidth) {
    if (bitmapWidth / screenWidth < bitmapHeight / screenHeight) {
      bitmapWidth=bitmapWidth * (screenHeight / bitmapHeight);
      bitmapHeight=screenHeight;
    }
 else {
      bitmapHeight=bitmapHeight * (screenWidth / bitmapWidth);
      bitmapWidth=screenWidth;
    }
  }
  final float finishScaleWidth=(float)transitionWidth / bitmapWidth;
  final float finishScaleHeight=(float)transitionHeight / bitmapHeight;
  float endScale=1;
  float xPadding=0;
  float yPadding=0;
  if (bitmapWidth / screenWidth > bitmapHeight / screenHeight) {
    endScale=screenWidth / bitmapWidth;
    xPadding=(bitmapWidth * (endScale - 1) / 2);
    yPadding=screenHeight / 2 - (bitmapHeight / 2);
  }
 else {
    endScale=screenHeight / bitmapHeight;
    xPadding=screenWidth / 2 - (bitmapWidth / 2);
    yPadding=(bitmapHeight * (endScale - 1)) / 2;
  }
  final float finalBitmapWidth=bitmapWidth;
  final float finalBitmapHeight=bitmapHeight;
  final float finalXPadding=xPadding;
  final float finalYPadding=yPadding;
  AnimationSet animation=new AnimationSet(true);
  animation.setStartOffset(startDelay);
  animation.setInterpolator(new MaterialInterpolator());
  animation.setDuration(300 * animationMultiplier);
  TranslateAnimation translateAnimation=new TranslateAnimation(finalXPadding,transitionLeft + (finalBitmapWidth * (finishScaleWidth - 1) / 2),finalYPadding,transitionTop + (finalBitmapHeight * (finishScaleHeight - 1) / 2));
  ScaleAnimation scaleAnimation=new ScaleAnimation(endScale,finishScaleWidth,endScale,finishScaleHeight);
  animation.addAnimation(translateAnimation);
  animation.addAnimation(scaleAnimation);
  transitionView.startAnimation(animation);
}
