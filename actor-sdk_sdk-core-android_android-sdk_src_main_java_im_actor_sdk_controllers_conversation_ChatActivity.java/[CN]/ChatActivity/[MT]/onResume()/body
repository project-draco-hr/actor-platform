{
  checkIsBot();
  super.onResume();
  emojiKeyboard.setPeer(peer);
  voiceRecordActor=ActorSystem.system().actorOf(Props.create(new ActorCreator(){
    @Override public VoiceCaptureActor create(){
      return new VoiceCaptureActor(ChatActivity.this,new VoiceCaptureActor.VoiceCaptureCallback(){
        @Override public void onRecordProgress(        final long time){
          runOnUiThread(new Runnable(){
            @Override public void run(){
              audioTimer.setText(messenger().getFormatter().formatDuration((int)(time / 1000)));
            }
          }
);
        }
        @Override public void onRecordCrash(){
          runOnUiThread(new Runnable(){
            @Override public void run(){
              hideAudio(true);
            }
          }
);
        }
        @Override public void onRecordStop(        long progress){
          if (progress < 1200) {
          }
 else {
            messenger().sendVoice(peer,(int)progress,audioFile);
          }
        }
      }
);
    }
  }
).changeDispatcher("voice_capture_dispatcher"),"actor/voice_capture");
  if (isCompose) {
    messageEditText.requestFocus();
    keyboardUtils.setImeVisibility(messageEditText,true);
  }
  isCompose=false;
  isTypingDisabled=true;
  String text=messenger().loadDraft(peer);
  if (text != null) {
    Spannable spantext=AndroidMarkdown.processOnlyLinks(text);
    spantext=emoji().processEmojiCompatMutable(spantext,SmileProcessor.CONFIGURATION_BUBBLES);
    messageEditText.setText(spantext);
  }
 else {
    messageEditText.setText("");
  }
  messageEditText.setSelection(messageEditText.getText().length());
  isTypingDisabled=false;
  if (sendText != null && !sendText.isEmpty()) {
    messageEditText.setText(sendText);
    sendText="";
  }
  if (forwardTextRaw != null && !forwardTextRaw.isEmpty()) {
    addQuote(forwardText,forwardTextRaw);
    forwardText="";
    forwardTextRaw="";
  }
  if (forwardContent != null) {
    messenger().forwardContent(peer,forwardContent);
    forwardContent=null;
  }
  if (isBot) {
    emptyBotSend.setBackgroundColor(ActorSDK.sharedActor().style.getMainBackgroundColor());
    TextView emptyBotSendText=(TextView)emptyBotSend.findViewById(R.id.empty_bot_text);
    emptyBotSendText.setTextColor(ActorSDK.sharedActor().style.getMainColor());
    emptyBotSendText.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        messenger().sendMessage(peer,"/start");
      }
    }
);
    checkEmptyBot();
  }
  if (isShareVisible) {
    messenger().getGalleryScannerActor().send(new GalleryScannerActor.Show());
  }
}
