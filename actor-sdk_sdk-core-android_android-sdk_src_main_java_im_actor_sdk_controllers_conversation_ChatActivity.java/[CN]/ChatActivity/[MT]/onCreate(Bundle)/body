{
  intent=getIntent();
  peer=Peer.fromUniqueId(intent.getExtras().getLong(EXTRA_CHAT_PEER));
  checkIsBot();
  if (saveInstance == null) {
    isCompose=intent.getExtras().getBoolean(EXTRA_CHAT_COMPOSE,false);
  }
 else {
    pending_fileName=saveInstance.getString(STATE_FILE_NAME,null);
  }
  super.onCreate(saveInstance);
  onCreateToolbar();
  messageEditText.addTextChangedListener(new TextWatcherImp());
  messageEditText.setOnFocusChangeListener(new View.OnFocusChangeListener(){
    @Override public void onFocusChange(    View v,    boolean hasFocus){
      if (hasFocus) {
        hideShare();
      }
    }
  }
);
  SLIDE_LIMIT=(int)(Screen.getDensity() * 180);
  audioContainer=findViewById(R.id.audioContainer);
  audioTimer=(TextView)findViewById(R.id.audioTimer);
  audioSlide=findViewById(R.id.audioSlide);
  recordPoint=findViewById(R.id.record_point);
  audioButton=(ImageView)findViewById(R.id.record_btn);
  audioButton.setVisibility(View.VISIBLE);
  audioButton.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      if (event.getAction() == MotionEvent.ACTION_DOWN) {
        if (!isAudioVisible) {
          showAudio();
          slideStart=(int)event.getX();
        }
      }
 else       if (event.getAction() == MotionEvent.ACTION_UP) {
        if (isAudioVisible) {
          hideAudio(false);
        }
      }
 else       if (event.getAction() == MotionEvent.ACTION_MOVE) {
        if (isAudioVisible) {
          int slide=slideStart - (int)event.getX();
          if (slide < 0) {
            slide=0;
          }
          if (slide > SLIDE_LIMIT) {
            hideAudio(true);
          }
 else {
            slideAudio(slide);
          }
        }
      }
      return true;
    }
  }
);
  autocompleteList=(RecyclerListView)findViewById(R.id.mentionsList);
  autocompleteList.setBackgroundColor(ActorSDK.sharedActor().style.getMainBackgroundColor());
  quoteContainer=(FrameLayout)findViewById(R.id.quoteContainer);
  quoteContainer.setBackgroundColor(ActorSDK.sharedActor().style.getMainBackgroundColor());
  quoteText=(TextView)findViewById(R.id.quote_text);
  findViewById(R.id.ib_close_quote).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      goneView(quoteContainer);
      quoteText.setText("");
      currentQuote="";
      if (textEditing) {
        messageEditText.setText("");
      }
      textEditing=false;
      checkSendButton();
    }
  }
);
  TableLayout shareMenu=(TableLayout)findViewById(R.id.share_menu);
  shareMenu.setBackgroundColor(ActorSDK.sharedActor().style.getMainBackgroundColor());
  findViewById(R.id.fast_share).setBackgroundColor(ActorSDK.sharedActor().style.getMainBackgroundColor());
  shareMenuCaontainer=findViewById(R.id.share_container);
  shareMenuCaontainer.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
    }
  }
);
  shareContainer=findViewById(R.id.closeMenuLayout);
  shareContainer.setOnTouchListener(new View.OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      hideShare();
      return false;
    }
  }
);
  final TextView contactText=(TextView)findViewById(R.id.contact_text);
  final ImageView shareContact=(ImageView)findViewById(R.id.share_contact);
  findViewById(R.id.share_hide).setVisibility(View.GONE);
  View.OnClickListener shareMenuOCL=new View.OnClickListener(){
    @Override public void onClick(    View item){
      if (item.getId() == R.id.share_gallery) {
        Intent intent=new Intent(Intent.ACTION_PICK,MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
        intent.setType("image/* video/*");
        startActivityForResult(intent,REQUEST_GALLERY);
      }
 else       if (item.getId() == R.id.share_camera) {
        File externalFile=Environment.getExternalStorageDirectory();
        if (externalFile == null) {
          Toast.makeText(ChatActivity.this,R.string.toast_no_sdcard,Toast.LENGTH_LONG).show();
        }
 else {
          String externalPath=externalFile.getAbsolutePath();
          String exportPathBase=externalPath + "/" + ActorSDK.sharedActor().getAppName()+ "/"+ ActorSDK.sharedActor().getAppName()+ " images"+ "/";
          new File(exportPathBase).mkdirs();
          pending_fileName=exportPathBase + "capture_" + Randoms.randomId()+ ".jpg";
        }
        if (ContextCompat.checkSelfPermission(ChatActivity.this,Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
          Log.d("Permissions","camera - no permission :c");
          ActivityCompat.requestPermissions(ChatActivity.this,new String[]{Manifest.permission.CAMERA},PERMISSIONS_REQUEST_CAMERA);
        }
 else {
          startCamera();
        }
      }
 else       if (item.getId() == R.id.share_video) {
        File externalFile=Environment.getExternalStorageDirectory();
        if (externalFile == null) {
          Toast.makeText(ChatActivity.this,R.string.toast_no_sdcard,Toast.LENGTH_LONG).show();
        }
 else {
          String externalPath=externalFile.getAbsolutePath();
          String exportPathBase=externalPath + "/" + ActorSDK.sharedActor().getAppName()+ "/"+ ActorSDK.sharedActor().getAppName()+ " video"+ "/";
          new File(exportPathBase).mkdirs();
          pending_fileName=exportPathBase + "capture_" + Randoms.randomId()+ ".mp4";
          Intent i=new Intent(MediaStore.ACTION_VIDEO_CAPTURE).putExtra(MediaStore.EXTRA_OUTPUT,Uri.fromFile(new File(pending_fileName)));
          startActivityForResult(i,REQUEST_VIDEO);
        }
      }
 else       if (item.getId() == R.id.share_file) {
        startActivityForResult(Intents.pickFile(ChatActivity.this),REQUEST_DOC);
      }
 else       if (item.getId() == R.id.share_location) {
        startActivityForResult(Intents.pickLocation(ChatActivity.this),REQUEST_LOCATION);
      }
 else       if (item.getId() == R.id.share_contact) {
        Intent intent=new Intent(Intent.ACTION_PICK,ContactsContract.Contacts.CONTENT_URI);
        startActivityForResult(intent,REQUEST_CONTACT);
      }
 else       if (item.getId() == R.id.share_hide) {
      }
      hideShare();
    }
  }
;
  defaultSendOcl=shareMenuOCL;
  findViewById(R.id.share_gallery).setOnClickListener(shareMenuOCL);
  findViewById(R.id.share_video).setOnClickListener(shareMenuOCL);
  findViewById(R.id.share_camera).setOnClickListener(shareMenuOCL);
  shareContact.setOnClickListener(shareMenuOCL);
  findViewById(R.id.share_file).setOnClickListener(shareMenuOCL);
  findViewById(R.id.share_hide).setOnClickListener(shareMenuOCL);
  View shareLocation=findViewById(R.id.share_location);
  shareLocation.setOnClickListener(shareMenuOCL);
  ActorSDK.sharedActor().getDelegate().onShareMenuCreated(shareMenu);
  menuIconToChange=shareContact;
  menuTitleToChange=contactText;
  ArrayList<ShareMenuField> customFields=ActorSDK.sharedActor().getDelegate().addCustomShareMenuFields();
  if (customFields != null && customFields.size() > 0) {
    if (customFields.size() % 2 != 0) {
      customFields.add(new ShareMenuField(R.drawable.attach_hide2,Color.RED,"",new View.OnClickListener(){
        @Override public void onClick(        View v){
        }
      }
));
    }
    TableRow rowOne=(TableRow)shareMenu.findViewById(R.id.share_row_one);
    TableRow rowTwo=(TableRow)shareMenu.findViewById(R.id.share_row_two);
    boolean first=true;
    TableRow row;
    TableRow.LayoutParams params=new TableRow.LayoutParams(0,ViewGroup.LayoutParams.WRAP_CONTENT,1);
    for (int i=0; i < customFields.size(); i++) {
      ShareMenuField f=customFields.get(i);
      row=first ? rowOne : rowTwo;
      View shareItem=getLayoutInflater().inflate(R.layout.share_menu_item,null);
      TextView title=(TextView)shareItem.findViewById(R.id.title);
      title.setText(f.getTitle());
      ImageView icon=(ImageView)shareItem.findViewById(R.id.icon);
      icon.setClickable(true);
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
        icon.setBackground(ShareMenuButtonFactory.get(f.getColor(),this));
      }
 else {
        icon.setBackgroundDrawable(ShareMenuButtonFactory.get(f.getColor(),this));
      }
      icon.setImageResource(f.getIcon());
      View.OnClickListener l=new View.OnClickListener(){
        @Override public void onClick(        View v){
          hideShare();
          f.getOnClickListener().onClick(shareItem);
        }
      }
;
      icon.setOnClickListener(l);
      if (i == customFields.size() - 1) {
        menuIconToChange=icon;
        menuTitleToChange=title;
        defaultSendOcl=l;
      }
      row.addView(shareItem,params);
      first=!first;
    }
    if (menuIconToChange instanceof ImageView) {
      menuIconToChange.setTag(R.id.icon,((ImageView)menuIconToChange).getDrawable());
    }
    menuIconToChange.setTag(R.id.background,menuIconToChange.getBackground());
    menuTitleToChange.setTag(menuTitleToChange.getText().toString());
  }
  handleIntent();
  try {
    Class.forName("com.google.android.gms.maps.GoogleMap");
  }
 catch (  ClassNotFoundException e) {
    shareLocation.setVisibility(View.GONE);
    findViewById(R.id.share_hide).setVisibility(View.VISIBLE);
    findViewById(R.id.location_text).setVisibility(View.INVISIBLE);
  }
  shareSendOcl=new View.OnClickListener(){
    @Override public void onClick(    View v){
      Set<String> strings=fastShareAdapter.getSelectedVM().get();
      for (      String s : strings.toArray(new String[strings.size()])) {
        execute(messenger().sendUri(peer,Uri.fromFile(new File(s))));
      }
      fastShareAdapter.clearSelected();
      hideShare();
    }
  }
;
  RecyclerView fastShare=(RecyclerView)findViewById(R.id.fast_share);
  if (ActorSDK.sharedActor().isFastShareEnabled()) {
    fastShareAdapter=new FastShareAdapter(this);
    LinearLayoutManager layoutManager=new LinearLayoutManager(this,LinearLayoutManager.HORIZONTAL,false);
    fastShare.setAdapter(fastShareAdapter);
    fastShare.setLayoutManager(layoutManager);
    StateListDrawable background=ShareMenuButtonFactory.get(ActorSDK.sharedActor().style.getBackyardBackgroundColor(),ChatActivity.this);
    fastShareAdapter.getSelectedVM().subscribe(new ValueChangedListener<Set<String>>(){
      @Override public void onChanged(      Set<String> val,      Value<Set<String>> valueModel){
        if (val.size() > 0) {
          menuIconToChange.setBackgroundDrawable(background);
          menuIconToChange.setImageResource(R.drawable.conv_send);
          menuIconToChange.setColorFilter(0xffffffff,PorterDuff.Mode.MULTIPLY);
          menuTitleToChange.setText(getString(R.string.chat_doc_send) + "(" + val.size()+ ")");
          menuIconToChange.setOnClickListener(shareSendOcl);
        }
 else {
          menuIconToChange.setBackgroundDrawable((Drawable)menuIconToChange.getTag(R.id.background));
          menuIconToChange.setImageDrawable((Drawable)menuIconToChange.getTag(R.id.icon));
          menuIconToChange.setColorFilter(null);
          menuIconToChange.setOnClickListener(defaultSendOcl);
          menuTitleToChange.setText((String)menuTitleToChange.getTag());
        }
      }
    }
);
  }
 else {
    fastShare.setVisibility(View.GONE);
  }
  emptyBotSend=findViewById(R.id.botEmptyTextBlock);
  emptyBotHint=(TextView)findViewById(R.id.botEmptyHint);
  checkEmptyBot();
}
