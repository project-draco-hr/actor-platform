{
  if (!isValidated) {
    return;
  }
  isValidated=false;
  if (seq < 0) {
    Log.d(TAG,"Loading fresh state...");
    request(new RequestGetState(new ArrayList<ApiUpdateOptimization>()),new RpcCallback<ResponseSeq>(){
      @Override public void onResult(      ResponseSeq response){
        if (isValidated) {
          return;
        }
        Log.d(TAG,"State loaded {seq=" + seq + "}");
        seq=response.getSeq();
        state=response.getState();
        persistState(seq,state);
        onBecomeValid(response.getSeq(),response.getState());
      }
      @Override public void onError(      RpcException e){
        if (isValidated) {
          return;
        }
        isValidated=true;
        invalidate();
      }
    }
);
  }
 else {
    Log.d(TAG,"Loading difference...");
    onUpdateStarted();
    final long loadStart=im.actor.runtime.Runtime.getCurrentTime();
    request(new RequestGetDifference(seq,state,new ArrayList<ApiUpdateOptimization>()),new RpcCallback<ResponseGetDifference>(){
      @Override public void onResult(      final ResponseGetDifference response){
        if (isValidated) {
          return;
        }
        Log.d(TAG,"Difference loaded {seq=" + response.getSeq() + "} in "+ (im.actor.runtime.Runtime.getCurrentTime() - loadStart)+ " ms");
        handler.onDifferenceUpdate(response).then(new Consumer<SequenceHandlerActor.UpdateProcessed>(){
          @Override public void apply(          SequenceHandlerActor.UpdateProcessed updateProcessed){
            onUpdatesApplied(response.getSeq(),response.getState());
          }
        }
).done(self());
        onBecomeValid(response.getSeq(),response.getState());
        if (response.needMore()) {
          invalidate();
        }
 else {
          onUpdateEnded();
        }
      }
      @Override public void onError(      RpcException e){
        if (isValidated) {
          return;
        }
        isValidated=true;
        invalidate();
      }
    }
);
  }
}
