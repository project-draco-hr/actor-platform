{
  ArrayList<DefferedListModification<T>> listModifications=new ArrayList<DefferedListModification<T>>();
  DefferedListModification<T> prev=null;
  for (  DisplayList.ModificationResult<T> res : modificationResults) {
    for (    DisplayList.ModificationResult.Operation<T> operation : res.getOperations()) {
      DefferedListModification<T> mod=null;
switch (operation.getType()) {
case ADD:
        if (prev != null) {
          if (prev.getOperation() == DefferedListModification.Operation.ADD) {
            if (prev.getIndex() == operation.getIndex() - 1) {
              prev.expand(operation.getItem());
              continue;
            }
          }
 else           if (prev.getOperation() == DefferedListModification.Operation.ADD_RANGE) {
            if (prev.getIndex() + prev.getLength() == operation.getIndex()) {
              prev.expand(operation.getItem());
              continue;
            }
          }
        }
      mod=new DefferedListModification<T>(DefferedListModification.Operation.ADD,operation.getIndex(),operation.getItem());
    break;
case UPDATE:
  if (prev != null) {
    if (prev.getOperation() == DefferedListModification.Operation.UPDATE) {
      if (prev.getIndex() == operation.getIndex() - 1) {
        prev.expand(operation.getItem());
        continue;
      }
    }
 else     if (prev.getOperation() == DefferedListModification.Operation.UPDATE_RANGE) {
      if (prev.getIndex() + prev.getLength() == operation.getIndex()) {
        prev.expand(operation.getItem());
        continue;
      }
    }
  }
mod=new DefferedListModification<T>(DefferedListModification.Operation.UPDATE,operation.getIndex(),operation.getItem());
break;
case REMOVE:
if (prev != null) {
if (prev.getOperation() == DefferedListModification.Operation.REMOVE) {
if (prev.getIndex() == operation.getIndex() - 1) {
  prev.expand(operation.getItem());
  continue;
}
}
 else if (prev.getOperation() == DefferedListModification.Operation.REMOVE_RANGE) {
if (prev.getIndex() + prev.getLength() == operation.getIndex()) {
  prev.expand(operation.getItem());
  continue;
}
}
}
mod=new DefferedListModification<T>(DefferedListModification.Operation.REMOVE,operation.getIndex());
break;
case MOVE:
mod=new DefferedListModification<T>(DefferedListModification.Operation.MOVE,operation.getIndex(),operation.getDestIndex(),1);
break;
}
if (mod != null) {
prev=mod;
listModifications.add(mod);
}
}
}
return new DefferedListChange<T>(initialList,listModifications);
}
