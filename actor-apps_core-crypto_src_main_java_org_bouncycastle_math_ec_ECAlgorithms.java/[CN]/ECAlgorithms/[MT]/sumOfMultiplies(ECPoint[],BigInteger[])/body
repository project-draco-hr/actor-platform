{
  if (ps == null || ks == null || ps.length != ks.length || ps.length < 1) {
    throw new IllegalArgumentException("point and scalar arrays should be non-null, and of equal, non-zero, length");
  }
  int count=ps.length;
switch (count) {
case 1:
    return ps[0].multiply(ks[0]);
case 2:
  return sumOfTwoMultiplies(ps[0],ks[0],ps[1],ks[1]);
default :
break;
}
ECPoint p=ps[0];
ECCurve c=p.getCurve();
ECPoint[] imported=new ECPoint[count];
imported[0]=p;
for (int i=1; i < count; ++i) {
imported[i]=importPoint(c,ps[i]);
}
ECEndomorphism endomorphism=c.getEndomorphism();
if (endomorphism instanceof GLVEndomorphism) {
return validatePoint(implSumOfMultipliesGLV(imported,ks,(GLVEndomorphism)endomorphism));
}
return validatePoint(implSumOfMultiplies(imported,ks));
}
